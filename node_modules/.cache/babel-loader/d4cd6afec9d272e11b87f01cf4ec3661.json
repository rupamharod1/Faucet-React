{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchTransactionForConfirmations = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst schemas_js_1 = require(\"../schemas.js\");\n\nconst watch_transaction_by_pooling_js_1 = require(\"./watch_transaction_by_pooling.js\");\n\nconst watch_transaction_by_subscription_js_1 = require(\"./watch_transaction_by_subscription.js\");\n\nfunction watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {\n  if ((0, web3_validator_1.isNullish)(transactionReceipt) || (0, web3_validator_1.isNullish)(transactionReceipt.blockHash)) throw new web3_errors_1.TransactionMissingReceiptOrBlockHashError({\n    receipt: transactionReceipt,\n    blockHash: (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),\n    transactionHash: (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, returnFormat)\n  });\n  if (!transactionReceipt.blockNumber) throw new web3_errors_1.TransactionReceiptMissingBlockNumberError({\n    receipt: transactionReceipt\n  }); // As we have the receipt, it's the first confirmation that tx is accepted.\n\n  transactionPromiEvent.emit('confirmation', {\n    confirmations: (0, web3_utils_1.format)({\n      format: 'uint'\n    }, 1, returnFormat),\n    receipt: (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),\n    latestBlockHash: (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionReceipt.blockHash, returnFormat)\n  }); // so a subscription for newBlockHeaders can be made instead of polling\n\n  const provider = web3Context.requestManager.provider;\n\n  if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n    (0, watch_transaction_by_subscription_js_1.watchTransactionBySubscription)({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  } else {\n    (0, watch_transaction_by_pooling_js_1.watchTransactionByPolling)({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  }\n}\n\nexports.watchTransactionForConfirmations = watchTransactionForConfirmations;","map":{"version":3,"mappings":";;;;;;;AAkBA;;AACA;;AAEA;;AAKA;;AACA;;AAIA;;AAEA,SAAgBA,gCAAhB,CAKCC,WALD,EAMCC,qBAND,EAOCC,kBAPD,EAQCC,eARD,EASCC,YATD,EAS2B;EAE1B,IAAI,gCAAUF,kBAAV,KAAiC,gCAAUA,kBAAkB,CAACG,SAA7B,CAArC,EACC,MAAM,IAAIC,uDAAJ,CAA8C;IACnDC,OAAO,EAAEL,kBAD0C;IAEnDG,SAAS,EAAE,yBAAO;MAAEG,MAAM,EAAE;IAAV,CAAP,EAA8BN,kBAAkB,SAAlB,sBAAkB,WAAlB,GAAkB,MAAlB,qBAAkB,CAAEG,SAAlD,EAA6DD,YAA7D,CAFwC;IAGnDD,eAAe,EAAE,yBAAO;MAAEK,MAAM,EAAE;IAAV,CAAP,EAA8BL,eAA9B,EAA+CC,YAA/C;EAHkC,CAA9C,CAAN;EAMD,IAAI,CAACF,kBAAkB,CAACO,WAAxB,EACC,MAAM,IAAIH,uDAAJ,CAA8C;IAAEC,OAAO,EAAEL;EAAX,CAA9C,CAAN,CAVyB,CAY1B;;EACAD,qBAAqB,CAACS,IAAtB,CAA2B,cAA3B,EAA2C;IAC1CC,aAAa,EAAE,yBAAO;MAAEH,MAAM,EAAE;IAAV,CAAP,EAA2B,CAA3B,EAA8BJ,YAA9B,CAD2B;IAE1CG,OAAO,EAAE,yBAAOK,qCAAP,EAAiCV,kBAAjC,EAAqDE,YAArD,CAFiC;IAG1CS,eAAe,EAAE,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA8BN,kBAAkB,CAACG,SAAjD,EAA4DD,YAA5D;EAHyB,CAA3C,EAb0B,CAmB1B;;EACA,MAAMU,QAAQ,GAAqBd,WAAW,CAACe,cAAZ,CAA2BD,QAA9D;;EACA,IAAIA,QAAQ,IAAI,2BAA2BA,QAAvC,IAAmDA,QAAQ,CAACE,qBAAT,EAAvD,EAAyF;IACxF,2EAA+B;MAC9BhB,WAD8B;MAE9BE,kBAF8B;MAG9BD,qBAH8B;MAI9BG;IAJ8B,CAA/B;EAMA,CAPD,MAOO;IACN,iEAA0B;MACzBJ,WADyB;MAEzBE,kBAFyB;MAGzBD,qBAHyB;MAIzBG;IAJyB,CAA1B;EAMA;AACD;;AA7CDa","names":["watchTransactionForConfirmations","web3Context","transactionPromiEvent","transactionReceipt","transactionHash","returnFormat","blockHash","web3_errors_1","receipt","format","blockNumber","emit","confirmations","schemas_js_1","latestBlockHash","provider","requestManager","supportsSubscriptions","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/watch_transaction_for_confirmations.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, Web3BaseProvider, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\n\nimport {\n\tTransactionMissingReceiptOrBlockHashError,\n\tTransactionReceiptMissingBlockNumberError,\n} from 'web3-errors';\nimport { DataFormat } from 'web3-types';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport {\n\twatchTransactionByPolling,\n\tWeb3PromiEventEventTypeBase,\n} from './watch_transaction_by_pooling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\n\nexport function watchTransactionForConfirmations<\n\tReturnFormat extends DataFormat,\n\tWeb3PromiEventEventType extends Web3PromiEventEventTypeBase<ReturnFormat>,\n\tResolveType = TransactionReceipt,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventType>,\n\ttransactionReceipt: TransactionReceipt,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tif (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash))\n\t\tthrow new TransactionMissingReceiptOrBlockHashError({\n\t\t\treceipt: transactionReceipt,\n\t\t\tblockHash: format({ format: 'bytes32' }, transactionReceipt?.blockHash, returnFormat),\n\t\t\ttransactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),\n\t\t});\n\n\tif (!transactionReceipt.blockNumber)\n\t\tthrow new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n\n\t// As we have the receipt, it's the first confirmation that tx is accepted.\n\ttransactionPromiEvent.emit('confirmation', {\n\t\tconfirmations: format({ format: 'uint' }, 1, returnFormat),\n\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\tlatestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n\t});\n\n\t// so a subscription for newBlockHeaders can be made instead of polling\n\tconst provider: Web3BaseProvider = web3Context.requestManager.provider as Web3BaseProvider;\n\tif (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n\t\twatchTransactionBySubscription({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t} else {\n\t\twatchTransactionByPolling({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}