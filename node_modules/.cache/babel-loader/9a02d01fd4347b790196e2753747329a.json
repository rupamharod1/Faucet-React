{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { format } from 'web3-utils';\nimport { netRpcMethods } from 'web3-rpc-methods';\nexport function getId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield netRpcMethods.getId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexport function getPeerCount(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield netRpcMethods.getPeerCount(web3Context.requestManager); // Data returned is number in hex format\n\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexport const isListening = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return netRpcMethods.isListening(web3Context.requestManager);\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,MAAT,QAAuB,YAAvB;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAM,SAAgBC,KAAhB,CACLC,WADK,EAELC,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACC,KAAd,CAAoBC,WAAW,CAACG,cAAhC,CAAvB;IAEA,OAAON,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBK,QAArB,EAAoDD,YAApD,CAAb;EACA;AAAA;AAED,OAAM,SAAgBG,YAAhB,CACLJ,WADK,EAELC,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACM,YAAd,CAA2BJ,WAAW,CAACG,cAAvC,CAAvB,EAEA;;IACA,OAAON,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBK,QAArB,EAAoDD,YAApD,CAAb;EACA;AAAA;AAED,OAAO,MAAMI,WAAW,GAAUL,WAAP,IAA+CM;EACzE,oBAAa,CAACD,WAAd,CAA0BL,WAAW,CAACG,cAAtC;AAAqD,CADoB,CAAnE","names":["format","netRpcMethods","getId","web3Context","returnFormat","response","requestManager","getPeerCount","isListening","__awaiter"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-net/src/rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format } from 'web3-utils';\nimport { Web3Context } from 'web3-core';\nimport { DataFormat, Web3NetAPI } from 'web3-types';\nimport { netRpcMethods } from 'web3-rpc-methods';\n\nexport async function getId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3NetAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await netRpcMethods.getId(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as unknown as number, returnFormat);\n}\n\nexport async function getPeerCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3NetAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await netRpcMethods.getPeerCount(web3Context.requestManager);\n\n\t// Data returned is number in hex format\n\treturn format({ format: 'uint' }, response as unknown as number, returnFormat);\n}\n\nexport const isListening = async (web3Context: Web3Context<Web3NetAPI>) =>\n\tnetRpcMethods.isListening(web3Context.requestManager);\n"]},"metadata":{},"sourceType":"module"}