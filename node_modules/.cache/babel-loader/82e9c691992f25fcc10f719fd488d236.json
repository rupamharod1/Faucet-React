{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TransactionPollingTimeoutError } from 'web3-errors'; // eslint-disable-next-line import/no-cycle\n\nimport { pollTillDefinedAndReturnIntervalId, rejectIfTimeout } from 'web3-utils'; // eslint-disable-next-line import/no-cycle\n\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getTransactionReceipt } from '../rpc_method_wrappers.js';\nexport function waitForTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const pollingInterval = (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval;\n    const [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        return getTransactionReceipt(web3Context, transactionHash, returnFormat);\n      } catch (error) {\n        console.warn('An error happen while trying to get the transaction receipt', error);\n        return undefined;\n      }\n    }), pollingInterval);\n    const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionPollingTimeout, new TransactionPollingTimeoutError({\n      numberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n      transactionHash\n    }));\n    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);\n\n    try {\n      // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n      return yield Promise.race([awaitableTransactionReceipt, rejectOnTimeout, rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n      ]);\n    } finally {\n      if (timeoutId) clearTimeout(timeoutId);\n      if (IntervalId) clearInterval(IntervalId);\n      blockTimeoutResourceCleaner.clean();\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,8BAAT,QAA+C,aAA/C,C,CAGA;;AACA,SAASC,kCAAT,EAA6CC,eAA7C,QAAoE,YAApE,C,CACA;;AACA,SAASC,oBAAT,QAAqC,8BAArC,C,CACA;;AACA,SAASC,qBAAT,QAAsC,2BAAtC;AAEA,OAAM,SAAgBC,yBAAhB,CACLC,WADK,EAELC,eAFK,EAGLC,YAHK,EAGqB;;;;IAG1B,MAAMC,eAAe,GACpB,iBAAW,CAACC,iCAAZ,MAA6C,IAA7C,IAA6CC,aAA7C,GAA6CA,EAA7C,GAAiDL,WAAW,CAACM,0BAD9D;IAGA,MAAM,CAACC,2BAAD,EAA8BC,UAA9B,IAA4Cb,kCAAkC,CAAC,MAAWc;MAC/F,IAAI;QACH,OAAOX,qBAAqB,CAACE,WAAD,EAAcC,eAAd,EAA+BC,YAA/B,CAA5B;MACA,CAFD,CAEE,OAAOQ,KAAP,EAAc;QACfC,OAAO,CAACC,IAAR,CAAa,6DAAb,EAA4EF,KAA5E;QACA,OAAOG,SAAP;MACA;IACD,CAP+F,CAAZ,EAOjFV,eAPiF,CAApF;IASA,MAAM,CAACW,SAAD,EAAYC,eAAZ,IAA+BnB,eAAe,CACnDI,WAAW,CAACgB,yBADuC,EAEnD,IAAItB,8BAAJ,CAAmC;MAClCuB,eAAe,EAAEjB,WAAW,CAACgB,yBAAZ,GAAwC,IADvB;MAElCf;IAFkC,CAAnC,CAFmD,CAApD;IAQA,MAAM,CAACiB,oBAAD,EAAuBC,2BAAvB,IAAsD,MAAMtB,oBAAoB,CACrFG,WADqF,EAErFC,eAFqF,CAAtF;;IAKA,IAAI;MACH;MACA,OAAO,MAAMmB,OAAO,CAACC,IAAR,CAAa,CACzBd,2BADyB,EAEzBQ,eAFyB,EAGzBG,oBAHyB,CAGH;MAHG,CAAb,CAAb;IAKA,CAPD,SAOU;MACT,IAAGJ,SAAH,EACCQ,YAAY,CAACR,SAAD,CAAZ;MACD,IAAGN,UAAH,EACCe,aAAa,CAACf,UAAD,CAAb;MACDW,2BAA2B,CAACK,KAA5B;IACA;;AACD","names":["TransactionPollingTimeoutError","pollTillDefinedAndReturnIntervalId","rejectIfTimeout","rejectIfBlockTimeout","getTransactionReceipt","waitForTransactionReceipt","web3Context","transactionHash","returnFormat","pollingInterval","transactionReceiptPollingInterval","_a","transactionPollingInterval","awaitableTransactionReceipt","IntervalId","__awaiter","error","console","warn","undefined","timeoutId","rejectOnTimeout","transactionPollingTimeout","numberOfSeconds","rejectOnBlockTimeout","blockTimeoutResourceCleaner","Promise","race","clearTimeout","clearInterval","clean"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/wait_for_transaction_receipt.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { TransactionPollingTimeoutError } from 'web3-errors';\nimport { EthExecutionAPI, Bytes, TransactionReceipt, DataFormat } from 'web3-types';\n\n// eslint-disable-next-line import/no-cycle\nimport { pollTillDefinedAndReturnIntervalId, rejectIfTimeout } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionReceipt } from '../rpc_method_wrappers.js';\n\nexport async function waitForTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n): Promise<TransactionReceipt> {\n\n\tconst pollingInterval =\n\t\tweb3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval;\n\n\tconst [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(async () => {\n\t\ttry {\n\t\t\treturn getTransactionReceipt(web3Context, transactionHash, returnFormat);\n\t\t} catch (error) {\n\t\t\tconsole.warn('An error happen while trying to get the transaction receipt', error);\n\t\t\treturn undefined;\n\t\t}\n\t}, pollingInterval);\n\n\tconst [timeoutId, rejectOnTimeout] = rejectIfTimeout(\n\t\tweb3Context.transactionPollingTimeout,\n\t\tnew TransactionPollingTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tawaitableTransactionReceipt,\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Polling Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tif(timeoutId)\n\t\t\tclearTimeout(timeoutId);\n\t\tif(IntervalId)\n\t\t\tclearInterval(IntervalId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}