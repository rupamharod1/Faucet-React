{"ast":null,"code":"import { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { TransactionMissingReceiptOrBlockHashError, TransactionReceiptMissingBlockNumberError } from 'web3-errors';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { watchTransactionByPolling } from './watch_transaction_by_pooling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\nexport function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {\n  if (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash)) throw new TransactionMissingReceiptOrBlockHashError({\n    receipt: transactionReceipt,\n    blockHash: format({\n      format: 'bytes32'\n    }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),\n    transactionHash: format({\n      format: 'bytes32'\n    }, transactionHash, returnFormat)\n  });\n  if (!transactionReceipt.blockNumber) throw new TransactionReceiptMissingBlockNumberError({\n    receipt: transactionReceipt\n  }); // As we have the receipt, it's the first confirmation that tx is accepted.\n\n  transactionPromiEvent.emit('confirmation', {\n    confirmations: format({\n      format: 'uint'\n    }, 1, returnFormat),\n    receipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n    latestBlockHash: format({\n      format: 'bytes32'\n    }, transactionReceipt.blockHash, returnFormat)\n  }); // so a subscription for newBlockHeaders can be made instead of polling\n\n  const provider = web3Context.requestManager.provider;\n\n  if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n    watchTransactionBySubscription({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  } else {\n    watchTransactionByPolling({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  }\n}","map":{"version":3,"mappings":"AAkBA,SAASA,MAAT,QAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,SACCC,yCADD,EAECC,yCAFD,QAGO,aAHP;AAKA,SAASC,wBAAT,QAAyC,eAAzC;AACA,SACCC,yBADD,QAGO,mCAHP;AAIA,SAASC,8BAAT,QAA+C,wCAA/C;AAEA,OAAM,SAAUC,gCAAV,CAKLC,WALK,EAMLC,qBANK,EAOLC,kBAPK,EAQLC,eARK,EASLC,YATK,EASqB;EAE1B,IAAIX,SAAS,CAACS,kBAAD,CAAT,IAAiCT,SAAS,CAACS,kBAAkB,CAACG,SAApB,CAA9C,EACC,MAAM,IAAIX,yCAAJ,CAA8C;IACnDY,OAAO,EAAEJ,kBAD0C;IAEnDG,SAAS,EAAEb,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAwBU,kBAAkB,SAAlB,sBAAkB,WAAlB,GAAkB,MAAlB,qBAAkB,CAAEG,SAA5C,EAAuDD,YAAvD,CAFkC;IAGnDD,eAAe,EAAEX,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAwBW,eAAxB,EAAyCC,YAAzC;EAH4B,CAA9C,CAAN;EAMD,IAAI,CAACF,kBAAkB,CAACK,WAAxB,EACC,MAAM,IAAIZ,yCAAJ,CAA8C;IAAEW,OAAO,EAAEJ;EAAX,CAA9C,CAAN,CAVyB,CAY1B;;EACAD,qBAAqB,CAACO,IAAtB,CAA2B,cAA3B,EAA2C;IAC1CC,aAAa,EAAEjB,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqB,CAArB,EAAwBY,YAAxB,CADqB;IAE1CE,OAAO,EAAEd,MAAM,CAACI,wBAAD,EAA2BM,kBAA3B,EAA+CE,YAA/C,CAF2B;IAG1CM,eAAe,EAAElB,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAwBU,kBAAkB,CAACG,SAA3C,EAAsDD,YAAtD;EAHmB,CAA3C,EAb0B,CAmB1B;;EACA,MAAMO,QAAQ,GAAqBX,WAAW,CAACY,cAAZ,CAA2BD,QAA9D;;EACA,IAAIA,QAAQ,IAAI,2BAA2BA,QAAvC,IAAmDA,QAAQ,CAACE,qBAAT,EAAvD,EAAyF;IACxFf,8BAA8B,CAAC;MAC9BE,WAD8B;MAE9BE,kBAF8B;MAG9BD,qBAH8B;MAI9BG;IAJ8B,CAAD,CAA9B;EAMA,CAPD,MAOO;IACNP,yBAAyB,CAAC;MACzBG,WADyB;MAEzBE,kBAFyB;MAGzBD,qBAHyB;MAIzBG;IAJyB,CAAD,CAAzB;EAMA;AACD","names":["format","isNullish","TransactionMissingReceiptOrBlockHashError","TransactionReceiptMissingBlockNumberError","transactionReceiptSchema","watchTransactionByPolling","watchTransactionBySubscription","watchTransactionForConfirmations","web3Context","transactionPromiEvent","transactionReceipt","transactionHash","returnFormat","blockHash","receipt","blockNumber","emit","confirmations","latestBlockHash","provider","requestManager","supportsSubscriptions"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/watch_transaction_for_confirmations.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, Web3BaseProvider, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\n\nimport {\n\tTransactionMissingReceiptOrBlockHashError,\n\tTransactionReceiptMissingBlockNumberError,\n} from 'web3-errors';\nimport { DataFormat } from 'web3-types';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport {\n\twatchTransactionByPolling,\n\tWeb3PromiEventEventTypeBase,\n} from './watch_transaction_by_pooling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\n\nexport function watchTransactionForConfirmations<\n\tReturnFormat extends DataFormat,\n\tWeb3PromiEventEventType extends Web3PromiEventEventTypeBase<ReturnFormat>,\n\tResolveType = TransactionReceipt,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventType>,\n\ttransactionReceipt: TransactionReceipt,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tif (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash))\n\t\tthrow new TransactionMissingReceiptOrBlockHashError({\n\t\t\treceipt: transactionReceipt,\n\t\t\tblockHash: format({ format: 'bytes32' }, transactionReceipt?.blockHash, returnFormat),\n\t\t\ttransactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),\n\t\t});\n\n\tif (!transactionReceipt.blockNumber)\n\t\tthrow new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n\n\t// As we have the receipt, it's the first confirmation that tx is accepted.\n\ttransactionPromiEvent.emit('confirmation', {\n\t\tconfirmations: format({ format: 'uint' }, 1, returnFormat),\n\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\tlatestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n\t});\n\n\t// so a subscription for newBlockHeaders can be made instead of polling\n\tconst provider: Web3BaseProvider = web3Context.requestManager.provider as Web3BaseProvider;\n\tif (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n\t\twatchTransactionBySubscription({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t} else {\n\t\twatchTransactionByPolling({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}