{"ast":null,"code":"import { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nconst extraTxTypes = new Map(); // eslint-disable-next-line @typescript-eslint/no-extraneous-class\n\nexport class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n  constructor() {}\n\n  static typeToInt(txType) {\n    return Number(uint8ArrayToBigInt(toUint8Array(txType)));\n  }\n\n  static registerTransactionType(type, txClass) {\n    const txType = TransactionFactory.typeToInt(type);\n    extraTxTypes.set(txType, txClass);\n  }\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n\n\n  static fromTxData(txData) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(txData, txOptions);\n    }\n\n    const txType = TransactionFactory.typeToInt(txData.type);\n\n    if (txType === 0) {\n      return Transaction.fromTxData(txData, txOptions);\n    }\n\n    if (txType === 1) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      return AccessListEIP2930Transaction.fromTxData( // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n\n    if (txType === 2) {\n      return FeeMarketEIP1559Transaction.fromTxData( // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n\n    const ExtraTransaction = extraTxTypes.get(txType);\n\n    if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) {\n      return ExtraTransaction.fromTxData(txData, txOptions);\n    }\n\n    throw new Error(`Tx instantiation with type ${txType} not supported`);\n  }\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Uint8Array\n   * @param txOptions - The transaction options\n   */\n\n\n  static fromSerializedData(data) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      switch (data[0]) {\n        case 1:\n          return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n\n        case 2:\n          return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n\n        default:\n          {\n            const ExtraTransaction = extraTxTypes.get(Number(data[0]));\n\n            if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) {\n              return ExtraTransaction.fromSerializedTx(data, txOptions);\n            }\n\n            throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n          }\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions);\n    }\n  }\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Uint8Array[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Uint8Array or Uint8Array[]\n   * @param txOptions - The transaction options\n   */\n\n\n  static fromBlockBodyData(data) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (data instanceof Uint8Array) {\n      return this.fromSerializedData(data, txOptions);\n    }\n\n    if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions);\n    }\n\n    throw new Error('Cannot decode transaction: unknown type input');\n  }\n\n}","map":{"version":3,"mappings":"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","names":["toUint8Array","uint8ArrayToBigInt","FeeMarketEIP1559Transaction","AccessListEIP2930Transaction","Transaction","extraTxTypes","Map","TransactionFactory","constructor","typeToInt","txType","Number","registerTransactionType","type","txClass","set","fromTxData","txData","txOptions","undefined","ExtraTransaction","get","Error","fromSerializedData","data","fromSerializedTx","fromBlockBodyData","Uint8Array","Array","isArray","fromValuesArray"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/tx/transactionFactory.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Numbers } from 'web3-types';\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nimport type { TypedTransaction } from '../types.js';\n\nimport type {\n\tAccessListEIP2930TxData,\n\tFeeMarketEIP1559TxData,\n\tTxData,\n\tTxOptions,\n} from './types.js';\nimport { BaseTransaction } from './baseTransaction.js';\n\nconst extraTxTypes: Map<Numbers, typeof BaseTransaction<unknown>> = new Map();\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n\t// It is not possible to instantiate a TransactionFactory object.\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n\tprivate constructor() {}\n\n\tpublic static typeToInt(txType: Numbers) {\n\t\treturn Number(uint8ArrayToBigInt(toUint8Array(txType)));\n\t}\n\n\tpublic static registerTransactionType<NewTxTypeClass extends typeof BaseTransaction<unknown>>(\n\t\ttype: Numbers,\n\t\ttxClass: NewTxTypeClass,\n\t) {\n\t\tconst txType = TransactionFactory.typeToInt(type);\n\t\textraTxTypes.set(txType, txClass);\n\t}\n\n\t/**\n\t * Create a transaction from a `txData` object\n\t *\n\t * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n\t * @param txOptions - Options to pass on to the constructor of the transaction\n\t */\n\tpublic static fromTxData(\n\t\ttxData: TxData | TypedTransaction,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (!('type' in txData) || txData.type === undefined) {\n\t\t\t// Assume legacy transaction\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tconst txType = TransactionFactory.typeToInt(txData.type);\n\t\tif (txType === 0) {\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tif (txType === 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<AccessListEIP2930TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tif (txType === 2) {\n\t\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<FeeMarketEIP1559TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tconst ExtraTransaction = extraTxTypes.get(txType);\n\t\tif (ExtraTransaction?.fromTxData) {\n\t\t\treturn ExtraTransaction.fromTxData(txData, txOptions) as TypedTransaction;\n\t\t}\n\n\t\tthrow new Error(`Tx instantiation with type ${txType} not supported`);\n\t}\n\n\t/**\n\t * This method tries to decode serialized data.\n\t *\n\t * @param data - The data Uint8Array\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromSerializedData(\n\t\tdata: Uint8Array,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (data[0] <= 0x7f) {\n\t\t\t// Determine the type.\n\t\t\tswitch (data[0]) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tdefault: {\n\t\t\t\t\tconst ExtraTransaction = extraTxTypes.get(Number(data[0]));\n\t\t\t\t\tif (ExtraTransaction?.fromSerializedTx) {\n\t\t\t\t\t\treturn ExtraTransaction.fromSerializedTx(\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\ttxOptions,\n\t\t\t\t\t\t) as TypedTransaction;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(`TypedTransaction with ID ${data[0]} unknown`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn Transaction.fromSerializedTx(data, txOptions);\n\t\t}\n\t}\n\n\t/**\n\t * When decoding a BlockBody, in the transactions field, a field is either:\n\t * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n\t * A Uint8Array[] (Legacy Transaction)\n\t * This method returns the right transaction.\n\t *\n\t * @param data - A Uint8Array or Uint8Array[]\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromBlockBodyData(data: Uint8Array | Uint8Array[], txOptions: TxOptions = {}) {\n\t\tif (data instanceof Uint8Array) {\n\t\t\treturn this.fromSerializedData(data, txOptions);\n\t\t}\n\t\tif (Array.isArray(data)) {\n\t\t\t// It is a legacy transaction\n\t\t\treturn Transaction.fromValuesArray(data, txOptions);\n\t\t}\n\t\tthrow new Error('Cannot decode transaction: unknown type input');\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}