{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Resolver = void 0;\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst config_js_1 = require(\"./config.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); //  Default public resolver\n//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol\n\n\nclass Resolver {\n  constructor(registry) {\n    this.registry = registry;\n  }\n\n  getResolverContractAdapter(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      //  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag\n      return this.registry.getResolver(ENSName);\n    });\n  } //  https://eips.ethereum.org/EIPS/eip-165\n  // eslint-disable-next-line class-methods-use-this\n\n\n  checkInterfaceSupport(resolverContract, methodName) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if ((0, web3_utils_1.isNullish)(config_js_1.interfaceIds[methodName])) throw new web3_errors_1.ResolverMethodMissingError((_a = resolverContract.options.address) !== null && _a !== void 0 ? _a : '', methodName);\n      const supported = yield resolverContract.methods.supportsInterface(config_js_1.interfaceIds[methodName]).call();\n      if (!supported) throw new web3_errors_1.ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : '', methodName);\n    });\n  }\n\n  supportsInterface(ENSName, interfaceId) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      let interfaceIdParam = interfaceId;\n\n      if (!(0, web3_validator_1.isHexStrict)(interfaceIdParam)) {\n        interfaceIdParam = (_a = (0, web3_utils_1.sha3)(interfaceId)) !== null && _a !== void 0 ? _a : '';\n        if (interfaceId === '') throw new Error('Invalid interface Id');\n        interfaceIdParam = interfaceIdParam.slice(0, 10);\n      }\n\n      return resolverContract.methods.supportsInterface(interfaceIdParam).call();\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n\n\n  getAddress(ENSName) {\n    let coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, config_js_1.methodsInInterface.addr);\n      return resolverContract.methods.addr((0, utils_js_1.namehash)(ENSName), coinType).call();\n    });\n  }\n\n  getPubkey(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, config_js_1.methodsInInterface.pubkey);\n      return resolverContract.methods.pubkey((0, utils_js_1.namehash)(ENSName)).call();\n    });\n  }\n\n  getContenthash(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, config_js_1.methodsInInterface.contenthash);\n      return resolverContract.methods.contenthash((0, utils_js_1.namehash)(ENSName)).call();\n    });\n  }\n\n}\n\nexports.Resolver = Resolver;","map":{"version":3,"mappings":"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","names":["Resolver","constructor","registry","getResolverContractAdapter","ENSName","getResolver","checkInterfaceSupport","resolverContract","methodName","config_js_1","web3_errors_1","options","address","_a","supported","methods","supportsInterface","call","_b","interfaceId","interfaceIdParam","Error","slice","getAddress","coinType","addr","getPubkey","pubkey","getContenthash","contenthash","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-ens/src/resolver.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ResolverMethodMissingError } from 'web3-errors';\nimport { Contract } from 'web3-eth-contract';\nimport { isNullish, sha3 } from 'web3-utils';\nimport { isHexStrict } from 'web3-validator';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { interfaceIds, methodsInInterface } from './config.js';\nimport { Registry } from './registry.js';\nimport { namehash } from './utils.js';\n\n//  Default public resolver\n//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol\n\nexport class Resolver {\n\tprivate readonly registry: Registry;\n\n\tpublic constructor(registry: Registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tprivate async getResolverContractAdapter(ENSName: string) {\n\t\t//  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag\n\t\treturn this.registry.getResolver(ENSName);\n\t}\n\n\t//  https://eips.ethereum.org/EIPS/eip-165\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic async checkInterfaceSupport(\n\t\tresolverContract: Contract<typeof PublicResolverAbi>,\n\t\tmethodName: string,\n\t) {\n\t\tif (isNullish(interfaceIds[methodName]))\n\t\t\tthrow new ResolverMethodMissingError(\n\t\t\t\tresolverContract.options.address ?? '',\n\t\t\t\tmethodName,\n\t\t\t);\n\n\t\tconst supported = await resolverContract.methods\n\t\t\t.supportsInterface(interfaceIds[methodName])\n\t\t\t.call();\n\n\t\tif (!supported)\n\t\t\tthrow new ResolverMethodMissingError(\n\t\t\t\tresolverContract.options.address ?? '',\n\t\t\t\tmethodName,\n\t\t\t);\n\t}\n\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tlet interfaceIdParam = interfaceId;\n\n\t\tif (!isHexStrict(interfaceIdParam)) {\n\t\t\tinterfaceIdParam = sha3(interfaceId) ?? '';\n\n\t\t\tif (interfaceId === '') throw new Error('Invalid interface Id');\n\n\t\t\tinterfaceIdParam = interfaceIdParam.slice(0, 10);\n\t\t}\n\n\t\treturn resolverContract.methods.supportsInterface(interfaceIdParam).call();\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-inferrable-types\n\tpublic async getAddress(ENSName: string, coinType: number = 60) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);\n\n\t\treturn resolverContract.methods.addr(namehash(ENSName), coinType).call();\n\t}\n\n\tpublic async getPubkey(ENSName: string) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);\n\n\t\treturn resolverContract.methods.pubkey(namehash(ENSName)).call();\n\t}\n\n\tpublic async getContenthash(ENSName: string) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);\n\n\t\treturn resolverContract.methods.contenthash(namehash(ENSName)).call();\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}