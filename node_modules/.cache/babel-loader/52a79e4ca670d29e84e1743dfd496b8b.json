{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_RAW_TX_UNDEFINED, ERR_TX, ERR_TX_BLOCK_TIMEOUT, ERR_TX_CONTRACT_NOT_STORED, ERR_TX_CHAIN_ID_MISMATCH, ERR_TX_DATA_AND_INPUT, ERR_TX_GAS_MISMATCH, ERR_TX_CHAIN_MISMATCH, ERR_TX_HARDFORK_MISMATCH, ERR_TX_INVALID_CALL, ERR_TX_INVALID_CHAIN_INFO, ERR_TX_INVALID_FEE_MARKET_GAS, ERR_TX_INVALID_FEE_MARKET_GAS_PRICE, ERR_TX_INVALID_LEGACY_FEE_MARKET, ERR_TX_INVALID_LEGACY_GAS, ERR_TX_INVALID_NONCE_OR_CHAIN_ID, ERR_TX_INVALID_OBJECT, ERR_TX_INVALID_SENDER, ERR_TX_INVALID_RECEIVER, ERR_TX_LOCAL_WALLET_NOT_AVAILABLE, ERR_TX_MISSING_CHAIN_INFO, ERR_TX_MISSING_CUSTOM_CHAIN, ERR_TX_MISSING_CUSTOM_CHAIN_ID, ERR_TX_MISSING_GAS, ERR_TX_NO_CONTRACT_ADDRESS, ERR_TX_NOT_FOUND, ERR_TX_OUT_OF_GAS, ERR_TX_POLLING_TIMEOUT, ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER, ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL, ERR_TX_REVERT_INSTRUCTION, ERR_TX_REVERT_TRANSACTION, ERR_TX_REVERT_WITHOUT_REASON, ERR_TX_SEND_TIMEOUT, ERR_TX_SIGNING, ERR_TX_UNABLE_TO_POPULATE_NONCE, ERR_TX_UNSUPPORTED_EIP_1559, ERR_TX_UNSUPPORTED_TYPE, ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR, ERR_TX_INVALID_PROPERTIES_FOR_TYPE, ERR_TX_MISSING_GAS_INNER_ERROR, ERR_TX_GAS_MISMATCH_INNER_ERROR } from '../error_codes.js';\nimport { InvalidValueError, BaseWeb3Error } from '../web3_error_base.js';\nexport class TransactionError extends BaseWeb3Error {\n  constructor(message, receipt) {\n    super(message);\n    this.receipt = receipt;\n    this.code = ERR_TX;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      receipt: this.receipt\n    });\n  }\n\n}\nexport class RevertInstructionError extends BaseWeb3Error {\n  constructor(reason, signature) {\n    super(`Your request got reverted with the following reason string: ${reason}`);\n    this.reason = reason;\n    this.signature = signature;\n    this.code = ERR_TX_REVERT_INSTRUCTION;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      signature: this.signature\n    });\n  }\n\n}\nexport class TransactionRevertInstructionError extends BaseWeb3Error {\n  constructor(reason, signature, receipt, data) {\n    super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`}`);\n    this.reason = reason;\n    this.signature = signature;\n    this.receipt = receipt;\n    this.data = data;\n    this.code = ERR_TX_REVERT_TRANSACTION;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      signature: this.signature,\n      receipt: this.receipt,\n      data: this.data\n    });\n  }\n\n}\n/**\n * This error is used when a transaction to a smart contract fails and\n * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)\n * is able to be parsed from the revert reason\n */\n\nexport class TransactionRevertWithCustomError extends TransactionRevertInstructionError {\n  constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data) {\n    super(reason);\n    this.reason = reason;\n    this.customErrorName = customErrorName;\n    this.customErrorDecodedSignature = customErrorDecodedSignature;\n    this.customErrorArguments = customErrorArguments;\n    this.signature = signature;\n    this.receipt = receipt;\n    this.data = data;\n    this.code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      customErrorName: this.customErrorName,\n      customErrorDecodedSignature: this.customErrorDecodedSignature,\n      customErrorArguments: this.customErrorArguments,\n      signature: this.signature,\n      receipt: this.receipt,\n      data: this.data\n    });\n  }\n\n}\nexport class NoContractAddressFoundError extends TransactionError {\n  constructor(receipt) {\n    super(\"The transaction receipt didn't contain a contract address.\", receipt);\n    this.code = ERR_TX_NO_CONTRACT_ADDRESS;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      receipt: this.receipt\n    });\n  }\n\n}\nexport class ContractCodeNotStoredError extends TransactionError {\n  constructor(receipt) {\n    super(\"The contract code couldn't be stored, please check your gas limit.\", receipt);\n    this.code = ERR_TX_CONTRACT_NOT_STORED;\n  }\n\n}\nexport class TransactionRevertedWithoutReasonError extends TransactionError {\n  constructor(receipt) {\n    super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`}`, receipt);\n    this.code = ERR_TX_REVERT_WITHOUT_REASON;\n  }\n\n}\nexport class TransactionOutOfGasError extends TransactionError {\n  constructor(receipt) {\n    super(`Transaction ran out of gas. Please provide more gas:\\n ${JSON.stringify(receipt, undefined, 2)}`, receipt);\n    this.code = ERR_TX_OUT_OF_GAS;\n  }\n\n}\nexport class UndefinedRawTransactionError extends TransactionError {\n  constructor() {\n    super(`Raw transaction undefined`);\n    this.code = ERR_RAW_TX_UNDEFINED;\n  }\n\n}\nexport class TransactionNotFound extends TransactionError {\n  constructor() {\n    super('Transaction not found');\n    this.code = ERR_TX_NOT_FOUND;\n  }\n\n}\nexport class InvalidTransactionWithSender extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction with invalid sender');\n    this.code = ERR_TX_INVALID_SENDER;\n  }\n\n}\nexport class InvalidTransactionWithReceiver extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction with invalid receiver');\n    this.code = ERR_TX_INVALID_RECEIVER;\n  }\n\n}\nexport class InvalidTransactionCall extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction call');\n    this.code = ERR_TX_INVALID_CALL;\n  }\n\n}\nexport class MissingCustomChainError extends InvalidValueError {\n  constructor() {\n    super('MissingCustomChainError', 'If tx.common is provided it must have tx.common.customChain');\n    this.code = ERR_TX_MISSING_CUSTOM_CHAIN;\n  }\n\n}\nexport class MissingCustomChainIdError extends InvalidValueError {\n  constructor() {\n    super('MissingCustomChainIdError', 'If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId');\n    this.code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;\n  }\n\n}\nexport class ChainIdMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), // https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176\n    'Chain Id doesnt match in tx.chainId tx.common.customChain.chainId');\n    this.code = ERR_TX_CHAIN_ID_MISMATCH;\n  }\n\n}\nexport class ChainMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), 'Chain doesnt match in tx.chain tx.common.basechain');\n    this.code = ERR_TX_CHAIN_MISMATCH;\n  }\n\n}\nexport class HardforkMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), 'hardfork doesnt match in tx.hardfork tx.common.hardfork');\n    this.code = ERR_TX_HARDFORK_MISMATCH;\n  }\n\n}\nexport class CommonOrChainAndHardforkError extends InvalidValueError {\n  constructor() {\n    super('CommonOrChainAndHardforkError', 'Please provide the common object or the chain and hardfork property but not all together.');\n    this.code = ERR_TX_INVALID_CHAIN_INFO;\n  }\n\n}\nexport class MissingChainOrHardforkError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super('MissingChainOrHardforkError', `When specifying chain and hardfork, both values must be defined. Received \"chain\": ${(_a = value.chain) !== null && _a !== void 0 ? _a : 'undefined'}, \"hardfork\": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : 'undefined'}`);\n    this.code = ERR_TX_MISSING_CHAIN_INFO;\n  }\n\n}\nexport class MissingGasInnerError extends BaseWeb3Error {\n  constructor() {\n    super('Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions');\n    this.code = ERR_TX_MISSING_GAS_INNER_ERROR;\n  }\n\n}\nexport class MissingGasError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b, _c, _d;\n\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, '\"gas\" is missing');\n    this.code = ERR_TX_MISSING_GAS;\n    this.innerError = new MissingGasInnerError();\n  }\n\n}\nexport class TransactionGasMismatchInnerError extends BaseWeb3Error {\n  constructor() {\n    super('Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions, not both');\n    this.code = ERR_TX_GAS_MISMATCH_INNER_ERROR;\n  }\n\n}\nexport class TransactionGasMismatchError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b, _c, _d;\n\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, 'transaction must specify legacy or fee market gas properties, not both');\n    this.code = ERR_TX_GAS_MISMATCH;\n    this.innerError = new TransactionGasMismatchInnerError();\n  }\n\n}\nexport class InvalidGasOrGasPrice extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Gas or gasPrice is lower than 0');\n    this.code = ERR_TX_INVALID_LEGACY_GAS;\n  }\n\n}\nexport class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, 'maxPriorityFeePerGas or maxFeePerGas is lower than 0');\n    this.code = ERR_TX_INVALID_FEE_MARKET_GAS;\n  }\n\n}\nexport class Eip1559GasPriceError extends InvalidValueError {\n  constructor(value) {\n    super(value, \"eip-1559 transactions don't support gasPrice\");\n    this.code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;\n  }\n\n}\nexport class UnsupportedFeeMarketError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, \"pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas\");\n    this.code = ERR_TX_INVALID_LEGACY_FEE_MARKET;\n  }\n\n}\nexport class InvalidTransactionObjectError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction object');\n    this.code = ERR_TX_INVALID_OBJECT;\n  }\n\n}\nexport class InvalidNonceOrChainIdError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super(`nonce: ${(_a = value.nonce) !== null && _a !== void 0 ? _a : 'undefined'}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Nonce or chainId is lower than 0');\n    this.code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;\n  }\n\n}\nexport class UnableToPopulateNonceError extends InvalidValueError {\n  constructor() {\n    super('UnableToPopulateNonceError', 'unable to populate nonce, no from address available');\n    this.code = ERR_TX_UNABLE_TO_POPULATE_NONCE;\n  }\n\n}\nexport class Eip1559NotSupportedError extends InvalidValueError {\n  constructor() {\n    super('Eip1559NotSupportedError', \"Network doesn't support eip-1559\");\n    this.code = ERR_TX_UNSUPPORTED_EIP_1559;\n  }\n\n}\nexport class UnsupportedTransactionTypeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'unsupported transaction type');\n    this.code = ERR_TX_UNSUPPORTED_TYPE;\n  }\n\n}\nexport class TransactionDataAndInputError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : 'undefined'}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : 'undefined'}`, 'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    this.code = ERR_TX_DATA_AND_INPUT;\n  }\n\n}\nexport class TransactionSendTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\\n\\tTransaction Hash: ${value.transactionHash ? value.transactionHash.toString() : 'not available'}`);\n    this.code = ERR_TX_SEND_TIMEOUT;\n  }\n\n}\n\nfunction transactionTimeoutHint(transactionHash) {\n  return `Please make sure your transaction was properly sent and there no pervious pending transaction for the same account. However, be aware that it might still be mined!\\n\\tTransaction Hash: ${transactionHash ? transactionHash.toString() : 'not available'}`;\n}\n\nexport class TransactionPollingTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);\n    this.code = ERR_TX_POLLING_TIMEOUT;\n  }\n\n}\nexport class TransactionBlockTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);\n    this.code = ERR_TX_BLOCK_TIMEOUT;\n  }\n\n}\nexport class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n\n    super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a = value.blockHash) === null || _a === void 0 ? void 0 : _a.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);\n    this.code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;\n  }\n\n}\nexport class TransactionReceiptMissingBlockNumberError extends InvalidValueError {\n  constructor(value) {\n    super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);\n    this.code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;\n  }\n\n}\nexport class TransactionSigningError extends BaseWeb3Error {\n  constructor(errorDetails) {\n    super(`Invalid signature. \"${errorDetails}\"`);\n    this.code = ERR_TX_SIGNING;\n  }\n\n}\nexport class LocalWalletNotAvailableError extends InvalidValueError {\n  constructor() {\n    super('LocalWalletNotAvailableError', `Attempted to index account in local wallet, but no wallet is available`);\n    this.code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;\n  }\n\n}\nexport class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {\n  constructor(validationError, txType) {\n    const invalidPropertyNames = [];\n    validationError.forEach(error => invalidPropertyNames.push(error.keyword));\n    super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(', ')}`);\n    this.code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ERR_RAW_TX_UNDEFINED","ERR_TX","ERR_TX_BLOCK_TIMEOUT","ERR_TX_CONTRACT_NOT_STORED","ERR_TX_CHAIN_ID_MISMATCH","ERR_TX_DATA_AND_INPUT","ERR_TX_GAS_MISMATCH","ERR_TX_CHAIN_MISMATCH","ERR_TX_HARDFORK_MISMATCH","ERR_TX_INVALID_CALL","ERR_TX_INVALID_CHAIN_INFO","ERR_TX_INVALID_FEE_MARKET_GAS","ERR_TX_INVALID_FEE_MARKET_GAS_PRICE","ERR_TX_INVALID_LEGACY_FEE_MARKET","ERR_TX_INVALID_LEGACY_GAS","ERR_TX_INVALID_NONCE_OR_CHAIN_ID","ERR_TX_INVALID_OBJECT","ERR_TX_INVALID_SENDER","ERR_TX_INVALID_RECEIVER","ERR_TX_LOCAL_WALLET_NOT_AVAILABLE","ERR_TX_MISSING_CHAIN_INFO","ERR_TX_MISSING_CUSTOM_CHAIN","ERR_TX_MISSING_CUSTOM_CHAIN_ID","ERR_TX_MISSING_GAS","ERR_TX_NO_CONTRACT_ADDRESS","ERR_TX_NOT_FOUND","ERR_TX_OUT_OF_GAS","ERR_TX_POLLING_TIMEOUT","ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER","ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL","ERR_TX_REVERT_INSTRUCTION","ERR_TX_REVERT_TRANSACTION","ERR_TX_REVERT_WITHOUT_REASON","ERR_TX_SEND_TIMEOUT","ERR_TX_SIGNING","ERR_TX_UNABLE_TO_POPULATE_NONCE","ERR_TX_UNSUPPORTED_EIP_1559","ERR_TX_UNSUPPORTED_TYPE","ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR","ERR_TX_INVALID_PROPERTIES_FOR_TYPE","ERR_TX_MISSING_GAS_INNER_ERROR","ERR_TX_GAS_MISMATCH_INNER_ERROR","InvalidValueError","BaseWeb3Error","TransactionError","constructor","message","receipt","toJSON","RevertInstructionError","reason","signature","TransactionRevertInstructionError","data","undefined","convertToString","TransactionRevertWithCustomError","customErrorName","customErrorDecodedSignature","customErrorArguments","NoContractAddressFoundError","code","ContractCodeNotStoredError","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","JSON","stringify","UndefinedRawTransactionError","TransactionNotFound","InvalidTransactionWithSender","value","InvalidTransactionWithReceiver","InvalidTransactionCall","MissingCustomChainError","MissingCustomChainIdError","ChainIdMismatchError","ChainMismatchError","HardforkMismatchError","CommonOrChainAndHardforkError","MissingChainOrHardforkError","chain","_a","hardfork","_b","MissingGasInnerError","MissingGasError","gas","gasPrice","maxPriorityFeePerGas","_c","maxFeePerGas","_d","innerError","TransactionGasMismatchInnerError","TransactionGasMismatchError","InvalidGasOrGasPrice","InvalidMaxPriorityFeePerGasOrMaxFeePerGas","Eip1559GasPriceError","UnsupportedFeeMarketError","InvalidTransactionObjectError","InvalidNonceOrChainIdError","nonce","chainId","UnableToPopulateNonceError","Eip1559NotSupportedError","UnsupportedTransactionTypeError","TransactionDataAndInputError","input","TransactionSendTimeoutError","numberOfSeconds","transactionHash","toString","transactionTimeoutHint","TransactionPollingTimeoutError","TransactionBlockTimeoutError","starterBlockNumber","numberOfBlocks","TransactionMissingReceiptOrBlockHashError","blockHash","TransactionReceiptMissingBlockNumberError","TransactionSigningError","errorDetails","LocalWalletNotAvailableError","InvalidPropertiesForTransactionTypeError","validationError","txType","invalidPropertyNames","forEach","error","push","keyword","join"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-errors/src/errors/transaction_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n\tBytes,\n\tHexString,\n\tNumbers,\n\tTransactionReceipt,\n\tWeb3ValidationErrorObject,\n} from 'web3-types';\nimport {\n\tERR_RAW_TX_UNDEFINED,\n\tERR_TX,\n\tERR_TX_BLOCK_TIMEOUT,\n\tERR_TX_CONTRACT_NOT_STORED,\n\tERR_TX_CHAIN_ID_MISMATCH,\n\tERR_TX_DATA_AND_INPUT,\n\tERR_TX_GAS_MISMATCH,\n\tERR_TX_CHAIN_MISMATCH,\n\tERR_TX_HARDFORK_MISMATCH,\n\tERR_TX_INVALID_CALL,\n\tERR_TX_INVALID_CHAIN_INFO,\n\tERR_TX_INVALID_FEE_MARKET_GAS,\n\tERR_TX_INVALID_FEE_MARKET_GAS_PRICE,\n\tERR_TX_INVALID_LEGACY_FEE_MARKET,\n\tERR_TX_INVALID_LEGACY_GAS,\n\tERR_TX_INVALID_NONCE_OR_CHAIN_ID,\n\tERR_TX_INVALID_OBJECT,\n\tERR_TX_INVALID_SENDER,\n\tERR_TX_INVALID_RECEIVER,\n\tERR_TX_LOCAL_WALLET_NOT_AVAILABLE,\n\tERR_TX_MISSING_CHAIN_INFO,\n\tERR_TX_MISSING_CUSTOM_CHAIN,\n\tERR_TX_MISSING_CUSTOM_CHAIN_ID,\n\tERR_TX_MISSING_GAS,\n\tERR_TX_NO_CONTRACT_ADDRESS,\n\tERR_TX_NOT_FOUND,\n\tERR_TX_OUT_OF_GAS,\n\tERR_TX_POLLING_TIMEOUT,\n\tERR_TX_RECEIPT_MISSING_BLOCK_NUMBER,\n\tERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL,\n\tERR_TX_REVERT_INSTRUCTION,\n\tERR_TX_REVERT_TRANSACTION,\n\tERR_TX_REVERT_WITHOUT_REASON,\n\tERR_TX_SEND_TIMEOUT,\n\tERR_TX_SIGNING,\n\tERR_TX_UNABLE_TO_POPULATE_NONCE,\n\tERR_TX_UNSUPPORTED_EIP_1559,\n\tERR_TX_UNSUPPORTED_TYPE,\n\tERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR,\n\tERR_TX_INVALID_PROPERTIES_FOR_TYPE,\n\tERR_TX_MISSING_GAS_INNER_ERROR,\n\tERR_TX_GAS_MISMATCH_INNER_ERROR,\n} from '../error_codes.js';\nimport { InvalidValueError, BaseWeb3Error } from '../web3_error_base.js';\n\nexport class TransactionError<ReceiptType = TransactionReceipt> extends BaseWeb3Error {\n\tpublic code = ERR_TX;\n\n\tpublic constructor(message: string, public receipt?: ReceiptType) {\n\t\tsuper(message);\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), receipt: this.receipt };\n\t}\n}\n\nexport class RevertInstructionError extends BaseWeb3Error {\n\tpublic code = ERR_TX_REVERT_INSTRUCTION;\n\n\tpublic constructor(public reason: string, public signature: string) {\n\t\tsuper(`Your request got reverted with the following reason string: ${reason}`);\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), reason: this.reason, signature: this.signature };\n\t}\n}\n\nexport class TransactionRevertInstructionError<\n\tReceiptType = TransactionReceipt,\n> extends BaseWeb3Error {\n\tpublic code = ERR_TX_REVERT_TRANSACTION;\n\n\tpublic constructor(\n\t\tpublic reason: string,\n\t\tpublic signature?: string,\n\t\tpublic receipt?: ReceiptType,\n\t\tpublic data?: string,\n\t) {\n\t\tsuper(\n\t\t\t`Transaction has been reverted by the EVM${\n\t\t\t\treceipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`\n\t\t\t}`,\n\t\t);\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\treason: this.reason,\n\t\t\tsignature: this.signature,\n\t\t\treceipt: this.receipt,\n\t\t\tdata: this.data,\n\t\t};\n\t}\n}\n\n/**\n * This error is used when a transaction to a smart contract fails and\n * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)\n * is able to be parsed from the revert reason\n */\nexport class TransactionRevertWithCustomError<\n\tReceiptType = TransactionReceipt,\n> extends TransactionRevertInstructionError<ReceiptType> {\n\tpublic code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;\n\n\tpublic constructor(\n\t\tpublic reason: string,\n\t\tpublic customErrorName: string,\n\t\tpublic customErrorDecodedSignature: string,\n\t\tpublic customErrorArguments: Record<string, unknown>,\n\t\tpublic signature?: string,\n\t\tpublic receipt?: ReceiptType,\n\t\tpublic data?: string,\n\t) {\n\t\tsuper(reason);\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\treason: this.reason,\n\t\t\tcustomErrorName: this.customErrorName,\n\t\t\tcustomErrorDecodedSignature: this.customErrorDecodedSignature,\n\t\t\tcustomErrorArguments: this.customErrorArguments,\n\t\t\tsignature: this.signature,\n\t\t\treceipt: this.receipt,\n\t\t\tdata: this.data,\n\t\t};\n\t}\n}\n\nexport class NoContractAddressFoundError extends TransactionError {\n\tpublic constructor(receipt: TransactionReceipt) {\n\t\tsuper(\"The transaction receipt didn't contain a contract address.\", receipt);\n\t\tthis.code = ERR_TX_NO_CONTRACT_ADDRESS;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), receipt: this.receipt };\n\t}\n}\n\nexport class ContractCodeNotStoredError extends TransactionError {\n\tpublic constructor(receipt: TransactionReceipt) {\n\t\tsuper(\"The contract code couldn't be stored, please check your gas limit.\", receipt);\n\t\tthis.code = ERR_TX_CONTRACT_NOT_STORED;\n\t}\n}\n\nexport class TransactionRevertedWithoutReasonError<\n\tReceiptType = TransactionReceipt,\n> extends TransactionError<ReceiptType> {\n\tpublic constructor(receipt?: ReceiptType) {\n\t\tsuper(\n\t\t\t`Transaction has been reverted by the EVM${\n\t\t\t\treceipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`\n\t\t\t}`,\n\t\t\treceipt,\n\t\t);\n\t\tthis.code = ERR_TX_REVERT_WITHOUT_REASON;\n\t}\n}\n\nexport class TransactionOutOfGasError extends TransactionError {\n\tpublic constructor(receipt: TransactionReceipt) {\n\t\tsuper(\n\t\t\t`Transaction ran out of gas. Please provide more gas:\\n ${JSON.stringify(\n\t\t\t\treceipt,\n\t\t\t\tundefined,\n\t\t\t\t2,\n\t\t\t)}`,\n\t\t\treceipt,\n\t\t);\n\t\tthis.code = ERR_TX_OUT_OF_GAS;\n\t}\n}\n\nexport class UndefinedRawTransactionError extends TransactionError {\n\tpublic constructor() {\n\t\tsuper(`Raw transaction undefined`);\n\t\tthis.code = ERR_RAW_TX_UNDEFINED;\n\t}\n}\nexport class TransactionNotFound extends TransactionError {\n\tpublic constructor() {\n\t\tsuper('Transaction not found');\n\t\tthis.code = ERR_TX_NOT_FOUND;\n\t}\n}\n\nexport class InvalidTransactionWithSender extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_SENDER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction with invalid sender');\n\t}\n}\nexport class InvalidTransactionWithReceiver extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_RECEIVER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction with invalid receiver');\n\t}\n}\nexport class InvalidTransactionCall extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_CALL;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction call');\n\t}\n}\n\nexport class MissingCustomChainError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_CUSTOM_CHAIN;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'MissingCustomChainError',\n\t\t\t'If tx.common is provided it must have tx.common.customChain',\n\t\t);\n\t}\n}\n\nexport class MissingCustomChainIdError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'MissingCustomChainIdError',\n\t\t\t'If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId',\n\t\t);\n\t}\n}\n\nexport class ChainIdMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_CHAIN_ID_MISMATCH;\n\n\tpublic constructor(value: { txChainId: unknown; customChainId: unknown }) {\n\t\tsuper(\n\t\t\tJSON.stringify(value),\n\t\t\t// https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176\n\t\t\t'Chain Id doesnt match in tx.chainId tx.common.customChain.chainId',\n\t\t);\n\t}\n}\n\nexport class ChainMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_CHAIN_MISMATCH;\n\n\tpublic constructor(value: { txChain: unknown; baseChain: unknown }) {\n\t\tsuper(JSON.stringify(value), 'Chain doesnt match in tx.chain tx.common.basechain');\n\t}\n}\n\nexport class HardforkMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_HARDFORK_MISMATCH;\n\n\tpublic constructor(value: { txHardfork: unknown; commonHardfork: unknown }) {\n\t\tsuper(JSON.stringify(value), 'hardfork doesnt match in tx.hardfork tx.common.hardfork');\n\t}\n}\n\nexport class CommonOrChainAndHardforkError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_CHAIN_INFO;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'CommonOrChainAndHardforkError',\n\t\t\t'Please provide the common object or the chain and hardfork property but not all together.',\n\t\t);\n\t}\n}\n\nexport class MissingChainOrHardforkError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_CHAIN_INFO;\n\n\tpublic constructor(value: { chain: string | undefined; hardfork: string | undefined }) {\n\t\tsuper(\n\t\t\t'MissingChainOrHardforkError',\n\t\t\t`When specifying chain and hardfork, both values must be defined. Received \"chain\": ${\n\t\t\t\tvalue.chain ?? 'undefined'\n\t\t\t}, \"hardfork\": ${value.hardfork ?? 'undefined'}`,\n\t\t);\n\t}\n}\n\nexport class MissingGasInnerError extends BaseWeb3Error {\n\tpublic code = ERR_TX_MISSING_GAS_INNER_ERROR;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions',\n\t\t);\n\t}\n}\n\nexport class MissingGasError extends InvalidValueError {\n\tpublic code = ERR_TX_MISSING_GAS;\n\n\tpublic constructor(value: {\n\t\tgas: Numbers | undefined;\n\t\tgasPrice: Numbers | undefined;\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`gas: ${value.gas ?? 'undefined'}, gasPrice: ${\n\t\t\t\tvalue.gasPrice ?? 'undefined'\n\t\t\t}, maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t'\"gas\" is missing',\n\t\t);\n\t\tthis.innerError = new MissingGasInnerError();\n\t}\n}\n\nexport class TransactionGasMismatchInnerError extends BaseWeb3Error {\n\tpublic code = ERR_TX_GAS_MISMATCH_INNER_ERROR;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions, not both',\n\t\t);\n\t}\n}\n\nexport class TransactionGasMismatchError extends InvalidValueError {\n\tpublic code = ERR_TX_GAS_MISMATCH;\n\n\tpublic constructor(value: {\n\t\tgas: Numbers | undefined;\n\t\tgasPrice: Numbers | undefined;\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`gas: ${value.gas ?? 'undefined'}, gasPrice: ${\n\t\t\t\tvalue.gasPrice ?? 'undefined'\n\t\t\t}, maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t'transaction must specify legacy or fee market gas properties, not both',\n\t\t);\n\t\tthis.innerError = new TransactionGasMismatchInnerError();\n\t}\n}\n\nexport class InvalidGasOrGasPrice extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_LEGACY_GAS;\n\n\tpublic constructor(value: { gas: Numbers | undefined; gasPrice: Numbers | undefined }) {\n\t\tsuper(\n\t\t\t`gas: ${value.gas ?? 'undefined'}, gasPrice: ${value.gasPrice ?? 'undefined'}`,\n\t\t\t'Gas or gasPrice is lower than 0',\n\t\t);\n\t}\n}\n\nexport class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_FEE_MARKET_GAS;\n\n\tpublic constructor(value: {\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t'maxPriorityFeePerGas or maxFeePerGas is lower than 0',\n\t\t);\n\t}\n}\n\nexport class Eip1559GasPriceError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, \"eip-1559 transactions don't support gasPrice\");\n\t}\n}\n\nexport class UnsupportedFeeMarketError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_LEGACY_FEE_MARKET;\n\n\tpublic constructor(value: {\n\t\tmaxPriorityFeePerGas: Numbers | undefined;\n\t\tmaxFeePerGas: Numbers | undefined;\n\t}) {\n\t\tsuper(\n\t\t\t`maxPriorityFeePerGas: ${value.maxPriorityFeePerGas ?? 'undefined'}, maxFeePerGas: ${\n\t\t\t\tvalue.maxFeePerGas ?? 'undefined'\n\t\t\t}`,\n\t\t\t\"pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas\",\n\t\t);\n\t}\n}\n\nexport class InvalidTransactionObjectError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_OBJECT;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid transaction object');\n\t}\n}\n\nexport class InvalidNonceOrChainIdError extends InvalidValueError {\n\tpublic code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;\n\n\tpublic constructor(value: { nonce: Numbers | undefined; chainId: Numbers | undefined }) {\n\t\tsuper(\n\t\t\t`nonce: ${value.nonce ?? 'undefined'}, chainId: ${value.chainId ?? 'undefined'}`,\n\t\t\t'Nonce or chainId is lower than 0',\n\t\t);\n\t}\n}\n\nexport class UnableToPopulateNonceError extends InvalidValueError {\n\tpublic code = ERR_TX_UNABLE_TO_POPULATE_NONCE;\n\n\tpublic constructor() {\n\t\tsuper('UnableToPopulateNonceError', 'unable to populate nonce, no from address available');\n\t}\n}\n\nexport class Eip1559NotSupportedError extends InvalidValueError {\n\tpublic code = ERR_TX_UNSUPPORTED_EIP_1559;\n\n\tpublic constructor() {\n\t\tsuper('Eip1559NotSupportedError', \"Network doesn't support eip-1559\");\n\t}\n}\n\nexport class UnsupportedTransactionTypeError extends InvalidValueError {\n\tpublic code = ERR_TX_UNSUPPORTED_TYPE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'unsupported transaction type');\n\t}\n}\n\nexport class TransactionDataAndInputError extends InvalidValueError {\n\tpublic code = ERR_TX_DATA_AND_INPUT;\n\n\tpublic constructor(value: { data: HexString | undefined; input: HexString | undefined }) {\n\t\tsuper(\n\t\t\t`data: ${value.data ?? 'undefined'}, input: ${value.input ?? 'undefined'}`,\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n}\n\nexport class TransactionSendTimeoutError extends BaseWeb3Error {\n\tpublic code = ERR_TX_SEND_TIMEOUT;\n\n\tpublic constructor(value: { numberOfSeconds: number; transactionHash?: Bytes }) {\n\t\tsuper(\n\t\t\t`The connected Ethereum Node did not respond within ${\n\t\t\t\tvalue.numberOfSeconds\n\t\t\t} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\\n\\tTransaction Hash: ${\n\t\t\t\tvalue.transactionHash ? value.transactionHash.toString() : 'not available'\n\t\t\t}`,\n\t\t);\n\t}\n}\n\nfunction transactionTimeoutHint(transactionHash?: Bytes) {\n\treturn `Please make sure your transaction was properly sent and there no pervious pending transaction for the same account. However, be aware that it might still be mined!\\n\\tTransaction Hash: ${\n\t\ttransactionHash ? transactionHash.toString() : 'not available'\n\t}`;\n}\n\nexport class TransactionPollingTimeoutError extends BaseWeb3Error {\n\tpublic code = ERR_TX_POLLING_TIMEOUT;\n\n\tpublic constructor(value: { numberOfSeconds: number; transactionHash: Bytes }) {\n\t\tsuper(\n\t\t\t`Transaction was not mined within ${\n\t\t\t\tvalue.numberOfSeconds\n\t\t\t} seconds. ${transactionTimeoutHint(value.transactionHash)}`,\n\t\t);\n\t}\n}\n\nexport class TransactionBlockTimeoutError extends BaseWeb3Error {\n\tpublic code = ERR_TX_BLOCK_TIMEOUT;\n\n\tpublic constructor(value: {\n\t\tstarterBlockNumber: number;\n\t\tnumberOfBlocks: number;\n\t\ttransactionHash?: Bytes;\n\t}) {\n\t\tsuper(\n\t\t\t`Transaction started at ${value.starterBlockNumber} but was not mined within ${\n\t\t\t\tvalue.numberOfBlocks\n\t\t\t} blocks. ${transactionTimeoutHint(value.transactionHash)}`,\n\t\t);\n\t}\n}\n\nexport class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {\n\tpublic code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;\n\n\tpublic constructor(value: {\n\t\treceipt: TransactionReceipt;\n\t\tblockHash: Bytes;\n\t\ttransactionHash: Bytes;\n\t}) {\n\t\tsuper(\n\t\t\t`receipt: ${JSON.stringify(\n\t\t\t\tvalue.receipt,\n\t\t\t)}, blockHash: ${value.blockHash?.toString()}, transactionHash: ${value.transactionHash?.toString()}`,\n\t\t\t`Receipt missing or blockHash null`,\n\t\t);\n\t}\n}\n\nexport class TransactionReceiptMissingBlockNumberError extends InvalidValueError {\n\tpublic code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;\n\n\tpublic constructor(value: { receipt: TransactionReceipt }) {\n\t\tsuper(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);\n\t}\n}\n\nexport class TransactionSigningError extends BaseWeb3Error {\n\tpublic code = ERR_TX_SIGNING;\n\tpublic constructor(errorDetails: string) {\n\t\tsuper(`Invalid signature. \"${errorDetails}\"`);\n\t}\n}\n\nexport class LocalWalletNotAvailableError extends InvalidValueError {\n\tpublic code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t'LocalWalletNotAvailableError',\n\t\t\t`Attempted to index account in local wallet, but no wallet is available`,\n\t\t);\n\t}\n}\nexport class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {\n\tpublic code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;\n\n\tpublic constructor(\n\t\tvalidationError: Web3ValidationErrorObject[],\n\t\ttxType: '0x0' | '0x1' | '0x2',\n\t) {\n\t\tconst invalidPropertyNames: string[] = [];\n\t\tvalidationError.forEach(error => invalidPropertyNames.push(error.keyword));\n\t\tsuper(\n\t\t\t`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(\n\t\t\t\t', ',\n\t\t\t)}`,\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}