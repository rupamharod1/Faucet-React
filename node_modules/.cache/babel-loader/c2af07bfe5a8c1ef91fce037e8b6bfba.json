{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport { ERR_RPC_INTERNAL_ERROR, ERR_RPC_INVALID_INPUT, ERR_RPC_INVALID_JSON, ERR_RPC_INVALID_METHOD, ERR_RPC_INVALID_PARAMS, ERR_RPC_INVALID_REQUEST, ERR_RPC_LIMIT_EXCEEDED, ERR_RPC_MISSING_RESOURCE, ERR_RPC_NOT_SUPPORTED, ERR_RPC_TRANSACTION_REJECTED, ERR_RPC_UNAVAILABLE_RESOURCE, ERR_RPC_UNSUPPORTED_METHOD } from '../error_codes.js';\nimport { RpcErrorMessages, genericRpcErrorMessageTemplate } from './rpc_error_messages.js';\nexport class RpcError extends BaseWeb3Error {\n  constructor(rpcError, message) {\n    super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()));\n    this.code = rpcError.error.code;\n    this.id = rpcError.id;\n    this.jsonrpc = rpcError.jsonrpc;\n    this.jsonRpcError = rpcError.error;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      error: this.jsonRpcError,\n      id: this.id,\n      jsonRpc: this.jsonrpc\n    });\n  }\n\n}\nexport class EIP1193ProviderRpcError extends BaseWeb3Error {\n  constructor(code, data) {\n    var _a, _b, _c, _d;\n\n    if (!code) {\n      // this case should ideally not happen\n      super();\n    } else if ((_a = RpcErrorMessages[code]) === null || _a === void 0 ? void 0 : _a.message) {\n      super(RpcErrorMessages[code].message);\n    } else {\n      // Retrieve the status code object for the given code from the table, by searching through the appropriate range\n      const statusCodeRange = Object.keys(RpcErrorMessages).find(statusCode => typeof statusCode === 'string' && code >= parseInt(statusCode.split('-')[0], 10) && code <= parseInt(statusCode.split('-')[1], 10));\n      super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : '']) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace('*code*', (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '\"\"'));\n    }\n\n    this.code = code;\n    this.data = data;\n  }\n\n}\nexport class ParseError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);\n    this.code = ERR_RPC_INVALID_JSON;\n  }\n\n}\nexport class InvalidRequestError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);\n    this.code = ERR_RPC_INVALID_REQUEST;\n  }\n\n}\nexport class MethodNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);\n    this.code = ERR_RPC_INVALID_METHOD;\n  }\n\n}\nexport class InvalidParamsError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);\n    this.code = ERR_RPC_INVALID_PARAMS;\n  }\n\n}\nexport class InternalError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);\n    this.code = ERR_RPC_INTERNAL_ERROR;\n  }\n\n}\nexport class InvalidInputError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);\n    this.code = ERR_RPC_INVALID_INPUT;\n  }\n\n}\nexport class MethodNotSupported extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);\n    this.code = ERR_RPC_UNSUPPORTED_METHOD;\n  }\n\n}\nexport class ResourceUnavailableError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);\n    this.code = ERR_RPC_UNAVAILABLE_RESOURCE;\n  }\n\n}\nexport class ResourcesNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);\n    this.code = ERR_RPC_MISSING_RESOURCE;\n  }\n\n}\nexport class VersionNotSupportedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);\n    this.code = ERR_RPC_NOT_SUPPORTED;\n  }\n\n}\nexport class TransactionRejectedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);\n    this.code = ERR_RPC_TRANSACTION_REJECTED;\n  }\n\n}\nexport class LimitExceededError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);\n    this.code = ERR_RPC_LIMIT_EXCEEDED;\n  }\n\n}\nexport const rpcErrorsMap = new Map();\nrpcErrorsMap.set(ERR_RPC_INVALID_JSON, {\n  error: ParseError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {\n  error: InvalidRequestError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {\n  error: MethodNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, {\n  error: InvalidParamsError\n});\nrpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, {\n  error: InternalError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_INPUT, {\n  error: InvalidInputError\n});\nrpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {\n  error: MethodNotSupported\n});\nrpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {\n  error: ResourceUnavailableError\n});\nrpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {\n  error: TransactionRejectedError\n});\nrpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {\n  error: ResourcesNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {\n  error: VersionNotSupportedError\n});\nrpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, {\n  error: LimitExceededError\n});","map":{"version":3,"mappings":"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","names":["BaseWeb3Error","ERR_RPC_INTERNAL_ERROR","ERR_RPC_INVALID_INPUT","ERR_RPC_INVALID_JSON","ERR_RPC_INVALID_METHOD","ERR_RPC_INVALID_PARAMS","ERR_RPC_INVALID_REQUEST","ERR_RPC_LIMIT_EXCEEDED","ERR_RPC_MISSING_RESOURCE","ERR_RPC_NOT_SUPPORTED","ERR_RPC_TRANSACTION_REJECTED","ERR_RPC_UNAVAILABLE_RESOURCE","ERR_RPC_UNSUPPORTED_METHOD","RpcErrorMessages","genericRpcErrorMessageTemplate","RpcError","constructor","rpcError","message","replace","error","code","toString","id","jsonrpc","jsonRpcError","toJSON","jsonRpc","EIP1193ProviderRpcError","data","_a","statusCodeRange","Object","keys","find","statusCode","parseInt","split","_b","_c","_d","ParseError","InvalidRequestError","MethodNotFoundError","InvalidParamsError","InternalError","InvalidInputError","MethodNotSupported","ResourceUnavailableError","ResourcesNotFoundError","VersionNotSupportedError","TransactionRejectedError","LimitExceededError","rpcErrorsMap","Map","set"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-errors/src/errors/rpc_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport { JsonRpcResponseWithError, JsonRpcId, JsonRpcError } from 'web3-types';\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport {\n\tERR_RPC_INTERNAL_ERROR,\n\tERR_RPC_INVALID_INPUT,\n\tERR_RPC_INVALID_JSON,\n\tERR_RPC_INVALID_METHOD,\n\tERR_RPC_INVALID_PARAMS,\n\tERR_RPC_INVALID_REQUEST,\n\tERR_RPC_LIMIT_EXCEEDED,\n\tERR_RPC_MISSING_RESOURCE,\n\tERR_RPC_NOT_SUPPORTED,\n\tERR_RPC_TRANSACTION_REJECTED,\n\tERR_RPC_UNAVAILABLE_RESOURCE,\n\tERR_RPC_UNSUPPORTED_METHOD,\n} from '../error_codes.js';\nimport { RpcErrorMessages, genericRpcErrorMessageTemplate } from './rpc_error_messages.js';\n\nexport class RpcError extends BaseWeb3Error {\n\tpublic code: number;\n\tpublic id: JsonRpcId;\n\tpublic jsonrpc: string;\n\tpublic jsonRpcError: JsonRpcError;\n\tpublic constructor(rpcError: JsonRpcResponseWithError, message?: string) {\n\t\tsuper(\n\t\t\tmessage ??\n\t\t\t\tgenericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()),\n\t\t);\n\t\tthis.code = rpcError.error.code;\n\t\tthis.id = rpcError.id;\n\t\tthis.jsonrpc = rpcError.jsonrpc;\n\t\tthis.jsonRpcError = rpcError.error;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), error: this.jsonRpcError, id: this.id, jsonRpc: this.jsonrpc };\n\t}\n}\n\nexport class EIP1193ProviderRpcError extends BaseWeb3Error {\n\tpublic code: number;\n\tpublic data?: unknown;\n\n\tpublic constructor(code: number, data?: unknown) {\n\t\tif (!code) {\n\t\t\t// this case should ideally not happen\n\t\t\tsuper();\n\t\t} else if (RpcErrorMessages[code]?.message) {\n\t\t\tsuper(RpcErrorMessages[code].message);\n\t\t} else {\n\t\t\t// Retrieve the status code object for the given code from the table, by searching through the appropriate range\n\t\t\tconst statusCodeRange = Object.keys(RpcErrorMessages).find(\n\t\t\t\tstatusCode =>\n\t\t\t\t\ttypeof statusCode === 'string' &&\n\t\t\t\t\tcode >= parseInt(statusCode.split('-')[0], 10) &&\n\t\t\t\t\tcode <= parseInt(statusCode.split('-')[1], 10),\n\t\t\t);\n\t\t\tsuper(\n\t\t\t\tRpcErrorMessages[statusCodeRange ?? '']?.message ??\n\t\t\t\t\tgenericRpcErrorMessageTemplate.replace('*code*', code?.toString() ?? '\"\"'),\n\t\t\t);\n\t\t}\n\t\tthis.code = code;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ParseError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_JSON;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);\n\t}\n}\n\nexport class InvalidRequestError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_REQUEST;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);\n\t}\n}\n\nexport class MethodNotFoundError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_METHOD;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);\n\t}\n}\n\nexport class InvalidParamsError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_PARAMS;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);\n\t}\n}\n\nexport class InternalError extends RpcError {\n\tpublic code = ERR_RPC_INTERNAL_ERROR;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);\n\t}\n}\n\nexport class InvalidInputError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_INPUT;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);\n\t}\n}\n\nexport class MethodNotSupported extends RpcError {\n\tpublic code = ERR_RPC_UNSUPPORTED_METHOD;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);\n\t}\n}\n\nexport class ResourceUnavailableError extends RpcError {\n\tpublic code = ERR_RPC_UNAVAILABLE_RESOURCE;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);\n\t}\n}\n\nexport class ResourcesNotFoundError extends RpcError {\n\tpublic code = ERR_RPC_MISSING_RESOURCE;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);\n\t}\n}\n\nexport class VersionNotSupportedError extends RpcError {\n\tpublic code = ERR_RPC_NOT_SUPPORTED;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);\n\t}\n}\n\nexport class TransactionRejectedError extends RpcError {\n\tpublic code = ERR_RPC_TRANSACTION_REJECTED;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);\n\t}\n}\n\nexport class LimitExceededError extends RpcError {\n\tpublic code = ERR_RPC_LIMIT_EXCEEDED;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);\n\t}\n}\n\nexport const rpcErrorsMap = new Map<number, { error: typeof RpcError }>();\nrpcErrorsMap.set(ERR_RPC_INVALID_JSON, { error: ParseError });\nrpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {\n\terror: InvalidRequestError,\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {\n\terror: MethodNotFoundError,\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, { error: InvalidParamsError });\nrpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, { error: InternalError });\nrpcErrorsMap.set(ERR_RPC_INVALID_INPUT, { error: InvalidInputError });\nrpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {\n\terror: MethodNotSupported,\n});\nrpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {\n\terror: ResourceUnavailableError,\n});\nrpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {\n\terror: TransactionRejectedError,\n});\nrpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {\n\terror: ResourcesNotFoundError,\n});\nrpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {\n\terror: VersionNotSupportedError,\n});\nrpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, { error: LimitExceededError });\n"]},"metadata":{},"sourceType":"module"}