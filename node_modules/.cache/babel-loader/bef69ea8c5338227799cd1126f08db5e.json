{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.ecrecover = exports.bigIntToUnpaddedUint8Array = exports.bigIntToHex = exports.unpadUint8Array = exports.stripZeros = exports.setLengthLeft = exports.assertIsUint8Array = exports.zeros = exports.bigIntToUint8Array = exports.uint8ArrayToBigInt = exports.toUint8Array = exports.intToUint8Array = exports.padToEven = exports.parseGethGenesis = exports.stripHexPrefix = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst constants_js_1 = require(\"../tx/constants.js\");\n\nconst enums_js_1 = require(\"./enums.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\n\n\nconst stripHexPrefix = str => {\n  if (typeof str !== 'string') throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n  return (0, web3_validator_1.isHexPrefixed)(str) ? str.slice(2) : str;\n};\n\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\n\nfunction formatNonce(nonce) {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000';\n  }\n\n  if ((0, web3_validator_1.isHexPrefixed)(nonce)) {\n    return `0x${(0, exports.stripHexPrefix)(nonce).padStart(16, '0')}`;\n  }\n\n  return `0x${nonce.padStart(16, '0')}`;\n}\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\n\n\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n\n  return `0x${i.toString(16)}`;\n};\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\n\n\nfunction parseGethParams(json) {\n  let mergeForkIdPostMerge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  var _a, _b; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas\n  } = json; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n  let {\n    extraData,\n    timestamp,\n    nonce\n  } = json;\n  const genesisTimestamp = Number(timestamp); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n  const {\n    chainId\n  } = config; // geth is not strictly putting empty fields with a 0x prefix\n\n  if (extraData === '') {\n    extraData = '0x';\n  } // geth may use number for timestamp\n\n\n  if (!(0, web3_validator_1.isHexPrefixed)(timestamp)) {\n    // eslint-disable-next-line radix\n    timestamp = intToHex(parseInt(timestamp));\n  } // geth may not give us a nonce strictly formatted to an 8 byte hex string\n\n\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce);\n  } // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n  }\n\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      // eslint-disable-next-line radix\n      gasLimit: parseInt(gasLimit),\n      // eslint-disable-next-line radix\n      difficulty: parseInt(difficulty),\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas\n    },\n    hardfork: undefined,\n    hardforks: [],\n    bootstrapNodes: [],\n    consensus: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config.clique !== undefined ? {\n      type: 'poa',\n      algorithm: 'clique',\n      clique: {\n        // The recent geth genesis seems to be using blockperiodseconds\n        // and epochlength for clique specification\n        // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n        epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength\n      }\n    } : {\n      type: 'pow',\n      algorithm: 'ethash',\n      ethash: {}\n    }\n  };\n  const forkMap = {\n    [enums_js_1.Hardfork.Homestead]: {\n      name: 'homesteadBlock'\n    },\n    [enums_js_1.Hardfork.Dao]: {\n      name: 'daoForkBlock'\n    },\n    [enums_js_1.Hardfork.TangerineWhistle]: {\n      name: 'eip150Block'\n    },\n    [enums_js_1.Hardfork.SpuriousDragon]: {\n      name: 'eip155Block'\n    },\n    [enums_js_1.Hardfork.Byzantium]: {\n      name: 'byzantiumBlock'\n    },\n    [enums_js_1.Hardfork.Constantinople]: {\n      name: 'constantinopleBlock'\n    },\n    [enums_js_1.Hardfork.Petersburg]: {\n      name: 'petersburgBlock'\n    },\n    [enums_js_1.Hardfork.Istanbul]: {\n      name: 'istanbulBlock'\n    },\n    [enums_js_1.Hardfork.MuirGlacier]: {\n      name: 'muirGlacierBlock'\n    },\n    [enums_js_1.Hardfork.Berlin]: {\n      name: 'berlinBlock'\n    },\n    [enums_js_1.Hardfork.London]: {\n      name: 'londonBlock'\n    },\n    [enums_js_1.Hardfork.MergeForkIdTransition]: {\n      name: 'mergeForkBlock',\n      postMerge: mergeForkIdPostMerge\n    },\n    [enums_js_1.Hardfork.Shanghai]: {\n      name: 'shanghaiTime',\n      postMerge: true,\n      isTimestamp: true\n    },\n    [enums_js_1.Hardfork.ShardingForkDev]: {\n      name: 'shardingForkTime',\n      postMerge: true,\n      isTimestamp: true\n    }\n  }; // forkMapRev is the map from config field name to Hardfork\n\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem;\n    return acc;\n  }, {}); // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n  const configHardforkNames = Object.keys(config).filter( // eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n  key => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n  params.hardforks = configHardforkNames.map(nameBlock => ({\n    name: forkMapRev[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    block: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true || // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] !== 'number' ? // eslint-disable-next-line no-null/no-null\n    null : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    timestamp: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] === 'number' ? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock] : undefined\n  })) // eslint-disable-next-line no-null/no-null\n  .filter(fork => fork.block !== null || fork.timestamp !== undefined);\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n\n    return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity);\n  });\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n\n    return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp);\n  }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: enums_js_1.Hardfork.Merge,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n      ttd: config.terminalTotalDifficulty,\n      // eslint-disable-next-line no-null/no-null\n      block: null\n    }; // Merge hardfork has to be placed before first hardfork that is dependent on merge\n\n    const postMergeIndex = params.hardforks.findIndex( // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    hf => {\n      var _a;\n\n      return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true;\n    });\n\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n    } else {\n      params.hardforks.push(mergeConfig);\n    }\n  }\n\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n  params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;\n  params.hardforks.unshift({\n    name: enums_js_1.Hardfork.Chainstart,\n    block: 0\n  });\n  return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\n\n\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n  try {\n    if (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n      throw new Error('Invalid format, expected geth genesis fields missing');\n    }\n\n    if (name !== undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n      json.name = name;\n    }\n\n    return parseGethParams(json, mergeForkIdPostMerge);\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n    throw new Error(`Error parsing parameters file: ${e.message}`);\n  }\n}\n\nexports.parseGethGenesis = parseGethGenesis;\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\n\nfunction padToEven(value) {\n  let a = value;\n\n  if (typeof a !== 'string') {\n    throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n  }\n\n  if (a.length % 2) a = `0${a}`;\n  return a;\n}\n\nexports.padToEven = padToEven;\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\n\nconst intToUint8Array = function (i) {\n  const hex = intToHex(i);\n  return (0, web3_utils_1.hexToBytes)(`0x${padToEven(hex.slice(2))}`);\n};\n\nexports.intToUint8Array = intToUint8Array;\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\n\nconst toUint8Array = function (v) {\n  // eslint-disable-next-line no-null/no-null\n  if (v === null || v === undefined) {\n    return new Uint8Array();\n  }\n\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n\n  if (Array.isArray(v)) {\n    return Uint8Array.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!(0, web3_validator_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n\n    return (0, web3_utils_1.hexToBytes)(padToEven((0, exports.stripHexPrefix)(v)));\n  }\n\n  if (typeof v === 'number') {\n    return (0, exports.toUint8Array)((0, web3_utils_1.numberToHex)(v));\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n    }\n\n    let n = v.toString(16);\n    if (n.length % 2) n = `0${n}`;\n    return (0, exports.toUint8Array)(`0x${n}`);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Uint8Array\n    return Uint8Array.from(v.toArray());\n  }\n\n  throw new Error('invalid type');\n};\n\nexports.toUint8Array = toUint8Array;\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\n\nfunction uint8ArrayToBigInt(buf) {\n  const hex = (0, web3_utils_1.bytesToHex)(buf);\n\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n\n  return BigInt(hex);\n}\n\nexports.uint8ArrayToBigInt = uint8ArrayToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\n\nfunction bigIntToUint8Array(num) {\n  return (0, exports.toUint8Array)(`0x${num.toString(16)}`);\n}\n\nexports.bigIntToUint8Array = bigIntToUint8Array;\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\n\nconst zeros = function (bytes) {\n  return new Uint8Array(bytes).fill(0);\n};\n\nexports.zeros = zeros;\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\n\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n\n  if (right) {\n    if (msg.length < length) {\n      buf.set(msg);\n      return buf;\n    }\n\n    return msg.subarray(0, length);\n  }\n\n  if (msg.length < length) {\n    buf.set(msg, length - msg.length);\n    return buf;\n  }\n\n  return msg.subarray(-length);\n};\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\n\n\nfunction assertIsUint8Array(input) {\n  if (!(input instanceof Uint8Array)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const msg = `This method only supports Uint8Array but input was: ${input}`;\n    throw new Error(msg);\n  }\n}\n\nexports.assertIsUint8Array = assertIsUint8Array;\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\n\nconst setLengthLeft = function (msg, length) {\n  assertIsUint8Array(msg);\n  return setLength(msg, length, false);\n};\n\nexports.setLengthLeft = setLengthLeft;\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\n\nfunction stripZeros(a) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n  let first = a[0]; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\n  while (a.length > 0 && first.toString() === '0') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n    a = a.slice(1); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n\n    first = a[0];\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n\n  return a;\n}\n\nexports.stripZeros = stripZeros;\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\n\nconst unpadUint8Array = function (a) {\n  assertIsUint8Array(a);\n  return stripZeros(a);\n};\n\nexports.unpadUint8Array = unpadUint8Array;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\n\nconst bigIntToHex = num => `0x${num.toString(16)}`;\n\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bigIntToUnpaddedUint8Array(value) {\n  return (0, exports.unpadUint8Array)(bigIntToUint8Array(value));\n}\n\nexports.bigIntToUnpaddedUint8Array = bigIntToUnpaddedUint8Array;\n\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\n\n\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  const senderPubKey = new constants_js_1.secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);\n  return senderPubKey.slice(1);\n};\n\nexports.ecrecover = ecrecover;\n\nfunction toType(input, outputType) {\n  // eslint-disable-next-line no-null/no-null\n  if (input === null) {\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n\n  if (input === undefined) {\n    return undefined;\n  }\n\n  if (typeof input === 'string' && !(0, web3_validator_1.isHexString)(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n\n  const output = (0, exports.toUint8Array)(input);\n\n  switch (outputType) {\n    case types_js_1.TypeOutput.Uint8Array:\n      return output;\n\n    case types_js_1.TypeOutput.BigInt:\n      return uint8ArrayToBigInt(output);\n\n    case types_js_1.TypeOutput.Number:\n      {\n        const bigInt = uint8ArrayToBigInt(output);\n\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n\n        return Number(bigInt);\n      }\n\n    case types_js_1.TypeOutput.PrefixedHexString:\n      return (0, web3_utils_1.bytesToHex)(output);\n\n    default:\n      throw new Error('unknown outputType');\n  }\n}\n\nexports.toType = toType;","map":{"version":3,"mappings":"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","names":["stripHexPrefix","str","Error","slice","exports","formatNonce","nonce","padStart","intToHex","i","Number","isSafeInteger","toString","parseGethParams","json","mergeForkIdPostMerge","name","config","difficulty","mixHash","gasLimit","coinbase","baseFeePerGas","extraData","timestamp","genesisTimestamp","chainId","parseInt","length","eip155Block","eip158Block","params","networkId","genesis","hardfork","undefined","hardforks","bootstrapNodes","consensus","clique","type","algorithm","period","_a","blockperiodseconds","epoch","_b","epochlength","ethash","forkMap","enums_js_1","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","Berlin","London","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","ShardingForkDev","forkMapRev","Object","keys","reduce","acc","elem","configHardforkNames","filter","key","map","nameBlock","block","fork","sort","a","b","Infinity","terminalTotalDifficulty","mergeConfig","Merge","ttd","postMergeIndex","findIndex","hf","splice","push","latestHardfork","unshift","Chainstart","parseGethGenesis","some","field","e","message","padToEven","value","intToUint8Array","hex","toUint8Array","v","Uint8Array","Array","isArray","from","BigInt","n","toArray","uint8ArrayToBigInt","buf","bigIntToUint8Array","num","zeros","bytes","fill","setLength","msg","right","set","subarray","assertIsUint8Array","input","setLengthLeft","stripZeros","first","unpadUint8Array","bigIntToHex","bigIntToUnpaddedUint8Array","calculateSigRecovery","isValidSigRecovery","recovery","ecrecover","msgHash","r","s","senderPubKey","constants_js_1","Signature","addRecoveryBit","recoverPublicKey","toRawBytes","toType","outputType","output","types_js_1","bigInt","MAX_SAFE_INTEGER","PrefixedHexString"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/common/utils.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isHexPrefixed, isHexString } from 'web3-validator';\nimport { bytesToHex, hexToBytes, numberToHex } from 'web3-utils';\nimport { secp256k1 } from '../tx/constants.js';\nimport { Hardfork } from './enums.js';\nimport { ToBytesInputTypes, TypeOutput, TypeOutputReturnType } from './types.js';\n\ntype ConfigHardfork =\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t| { name: string; block: null; timestamp: number }\n\t| { name: string; block: number; timestamp?: number };\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n\tif (typeof str !== 'string')\n\t\tthrow new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n\n\treturn isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n\tif (!nonce || nonce === '0x0') {\n\t\treturn '0x0000000000000000';\n\t}\n\tif (isHexPrefixed(nonce)) {\n\t\treturn `0x${stripHexPrefix(nonce).padStart(16, '0')}`;\n\t}\n\treturn `0x${nonce.padStart(16, '0')}`;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i: number) {\n\tif (!Number.isSafeInteger(i) || i < 0) {\n\t\tthrow new Error(`Received an invalid integer type: ${i}`);\n\t}\n\treturn `0x${i.toString(16)}`;\n};\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json: any, mergeForkIdPostMerge = true) {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst {\n\t\tname,\n\t\tconfig,\n\t\tdifficulty,\n\t\tmixHash,\n\t\tgasLimit,\n\t\tcoinbase,\n\t\tbaseFeePerGas,\n\t}: {\n\t\tname: string;\n\t\tconfig: any;\n\t\tdifficulty: string;\n\t\tmixHash: string;\n\t\tgasLimit: string;\n\t\tcoinbase: string;\n\t\tbaseFeePerGas: string;\n\t} = json;\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tlet { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n\t\tjson;\n\tconst genesisTimestamp = Number(timestamp);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst { chainId }: { chainId: number } = config;\n\n\t// geth is not strictly putting empty fields with a 0x prefix\n\tif (extraData === '') {\n\t\textraData = '0x';\n\t}\n\t// geth may use number for timestamp\n\tif (!isHexPrefixed(timestamp)) {\n\t\t// eslint-disable-next-line radix\n\t\ttimestamp = intToHex(parseInt(timestamp));\n\t}\n\t// geth may not give us a nonce strictly formatted to an 8 byte hex string\n\tif (nonce.length !== 18) {\n\t\tnonce = formatNonce(nonce);\n\t}\n\n\t// EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n\t// but have different configuration parameters in geth genesis parameters\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.eip155Block !== config.eip158Block) {\n\t\tthrow new Error(\n\t\t\t'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork',\n\t\t);\n\t}\n\n\tconst params = {\n\t\tname,\n\t\tchainId,\n\t\tnetworkId: chainId,\n\t\tgenesis: {\n\t\t\ttimestamp,\n\t\t\t// eslint-disable-next-line radix\n\t\t\tgasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\n\t\t\t// eslint-disable-next-line radix\n\t\t\tdifficulty: parseInt(difficulty),\n\t\t\tnonce,\n\t\t\textraData,\n\t\t\tmixHash,\n\t\t\tcoinbase,\n\t\t\tbaseFeePerGas,\n\t\t},\n\t\thardfork: undefined as string | undefined,\n\t\thardforks: [] as ConfigHardfork[],\n\t\tbootstrapNodes: [],\n\t\tconsensus:\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tconfig.clique !== undefined\n\t\t\t\t? {\n\t\t\t\t\t\ttype: 'poa',\n\t\t\t\t\t\talgorithm: 'clique',\n\t\t\t\t\t\tclique: {\n\t\t\t\t\t\t\t// The recent geth genesis seems to be using blockperiodseconds\n\t\t\t\t\t\t\t// and epochlength for clique specification\n\t\t\t\t\t\t\t// see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tperiod: config.clique.period ?? config.clique.blockperiodseconds,\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tepoch: config.clique.epoch ?? config.clique.epochlength,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\ttype: 'pow',\n\t\t\t\t\t\talgorithm: 'ethash',\n\t\t\t\t\t\tethash: {},\n\t\t\t\t  },\n\t};\n\n\tconst forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } =\n\t\t{\n\t\t\t[Hardfork.Homestead]: { name: 'homesteadBlock' },\n\t\t\t[Hardfork.Dao]: { name: 'daoForkBlock' },\n\t\t\t[Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n\t\t\t[Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n\t\t\t[Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n\t\t\t[Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n\t\t\t[Hardfork.Petersburg]: { name: 'petersburgBlock' },\n\t\t\t[Hardfork.Istanbul]: { name: 'istanbulBlock' },\n\t\t\t[Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n\t\t\t[Hardfork.Berlin]: { name: 'berlinBlock' },\n\t\t\t[Hardfork.London]: { name: 'londonBlock' },\n\t\t\t[Hardfork.MergeForkIdTransition]: {\n\t\t\t\tname: 'mergeForkBlock',\n\t\t\t\tpostMerge: mergeForkIdPostMerge,\n\t\t\t},\n\t\t\t[Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n\t\t\t[Hardfork.ShardingForkDev]: {\n\t\t\t\tname: 'shardingForkTime',\n\t\t\t\tpostMerge: true,\n\t\t\t\tisTimestamp: true,\n\t\t\t},\n\t\t};\n\n\t// forkMapRev is the map from config field name to Hardfork\n\tconst forkMapRev = Object.keys(forkMap).reduce<{ [key: string]: string }>((acc, elem) => {\n\t\tacc[forkMap[elem].name] = elem;\n\t\treturn acc;\n\t}, {});\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\tconst configHardforkNames = Object.keys(config).filter(\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n\t\tkey => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null,\n\t);\n\n\tparams.hardforks = configHardforkNames\n\t\t.map(nameBlock => ({\n\t\t\tname: forkMapRev[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tblock:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] !== 'number'\n\t\t\t\t\t? // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\ttimestamp:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] === 'number'\n\t\t\t\t\t? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock]\n\t\t\t\t\t: undefined,\n\t\t}))\n\t\t// eslint-disable-next-line no-null/no-null\n\t\t.filter(fork => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[];\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) => (a.block ?? Infinity) - (b.block ?? Infinity),\n\t);\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) =>\n\t\t\t(a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp),\n\t);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.terminalTotalDifficulty !== undefined) {\n\t\t// Following points need to be considered for placement of merge hf\n\t\t// - Merge hardfork can't be placed at genesis\n\t\t// - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n\t\t// - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n\t\t//   necessary for e.g. withdrawals\n\t\tconst mergeConfig = {\n\t\t\tname: Hardfork.Merge,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\tttd: config.terminalTotalDifficulty,\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblock: null,\n\t\t};\n\n\t\t// Merge hardfork has to be placed before first hardfork that is dependent on merge\n\t\tconst postMergeIndex = params.hardforks.findIndex(\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t(hf: any) => forkMap[hf.name]?.postMerge === true,\n\t\t);\n\t\tif (postMergeIndex !== -1) {\n\t\t\tparams.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork);\n\t\t} else {\n\t\t\tparams.hardforks.push(mergeConfig as unknown as ConfigHardfork);\n\t\t}\n\t}\n\n\tconst latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n\tparams.hardfork = latestHardfork?.name;\n\tparams.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });\n\n\treturn params;\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n\ttry {\n\t\tif (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n\t\t\tthrow new Error('Invalid format, expected geth genesis fields missing');\n\t\t}\n\t\tif (name !== undefined) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n\t\t\tjson.name = name;\n\t\t}\n\t\treturn parseGethParams(json, mergeForkIdPostMerge);\n\t} catch (e: any) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Error parsing parameters file: ${e.message}`);\n\t}\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n\tlet a = value;\n\n\tif (typeof a !== 'string') {\n\t\tthrow new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n\t}\n\n\tif (a.length % 2) a = `0${a}`;\n\n\treturn a;\n}\n\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\nexport const intToUint8Array = function (i: number) {\n\tconst hex = intToHex(i);\n\treturn hexToBytes(`0x${padToEven(hex.slice(2))}`);\n};\n\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\nexport const toUint8Array = function (v: ToBytesInputTypes): Uint8Array {\n\t// eslint-disable-next-line no-null/no-null\n\tif (v === null || v === undefined) {\n\t\treturn new Uint8Array();\n\t}\n\n\tif (v instanceof Uint8Array) {\n\t\treturn v;\n\t}\n\n\tif (Array.isArray(v)) {\n\t\treturn Uint8Array.from(v);\n\t}\n\n\tif (typeof v === 'string') {\n\t\tif (!isHexString(v)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`,\n\t\t\t);\n\t\t}\n\t\treturn hexToBytes(padToEven(stripHexPrefix(v)));\n\t}\n\n\tif (typeof v === 'number') {\n\t\treturn toUint8Array(numberToHex(v));\n\t}\n\n\tif (typeof v === 'bigint') {\n\t\tif (v < BigInt(0)) {\n\t\t\tthrow new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n\t\t}\n\t\tlet n = v.toString(16);\n\t\tif (n.length % 2) n = `0${n}`;\n\t\treturn toUint8Array(`0x${n}`);\n\t}\n\n\tif (v.toArray) {\n\t\t// converts a BN to a Uint8Array\n\t\treturn Uint8Array.from(v.toArray());\n\t}\n\n\tthrow new Error('invalid type');\n};\n\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\nexport function uint8ArrayToBigInt(buf: Uint8Array) {\n\tconst hex = bytesToHex(buf);\n\tif (hex === '0x') {\n\t\treturn BigInt(0);\n\t}\n\treturn BigInt(hex);\n}\n\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\nexport function bigIntToUint8Array(num: bigint) {\n\treturn toUint8Array(`0x${num.toString(16)}`);\n}\n\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\nexport const zeros = function (bytes: number): Uint8Array {\n\treturn new Uint8Array(bytes).fill(0);\n};\n\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\nconst setLength = function (msg: Uint8Array, length: number, right: boolean) {\n\tconst buf = zeros(length);\n\tif (right) {\n\t\tif (msg.length < length) {\n\t\t\tbuf.set(msg);\n\t\t\treturn buf;\n\t\t}\n\t\treturn msg.subarray(0, length);\n\t}\n\tif (msg.length < length) {\n\t\tbuf.set(msg, length - msg.length);\n\t\treturn buf;\n\t}\n\treturn msg.subarray(-length);\n};\n\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\nexport function assertIsUint8Array(input: unknown): asserts input is Uint8Array {\n\tif (!(input instanceof Uint8Array)) {\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tconst msg = `This method only supports Uint8Array but input was: ${input}`;\n\t\tthrow new Error(msg);\n\t}\n}\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\nexport const setLengthLeft = function (msg: Uint8Array, length: number) {\n\tassertIsUint8Array(msg);\n\treturn setLength(msg, length, false);\n};\n\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\nexport function stripZeros<T extends Uint8Array | number[] | string>(a: T): T {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\tlet first = a[0];\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\twhile (a.length > 0 && first.toString() === '0') {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n\t\ta = a.slice(1) as T;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n\t\tfirst = a[0];\n\t}\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\treturn a;\n}\n\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\nexport const unpadUint8Array = function (a: Uint8Array): Uint8Array {\n\tassertIsUint8Array(a);\n\treturn stripZeros(a);\n};\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => `0x${num.toString(16)}`;\n\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedUint8Array(value: bigint): Uint8Array {\n\treturn unpadUint8Array(bigIntToUint8Array(value));\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n\tif (v === BigInt(0) || v === BigInt(1)) return v;\n\n\tif (chainId === undefined) {\n\t\treturn v - BigInt(27);\n\t}\n\treturn v - (chainId * BigInt(2) + BigInt(35));\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n\treturn recovery === BigInt(0) || recovery === BigInt(1);\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n\tmsgHash: Uint8Array,\n\tv: bigint,\n\tr: Uint8Array,\n\ts: Uint8Array,\n\tchainId?: bigint,\n): Uint8Array {\n\tconst recovery = calculateSigRecovery(v, chainId);\n\tif (!isValidSigRecovery(recovery)) {\n\t\tthrow new Error('Invalid signature v value');\n\t}\n\n\tconst senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s))\n\t\t.addRecoveryBit(Number(recovery))\n\t\t.recoverPublicKey(msgHash)\n\t\t.toRawBytes(false);\n\treturn senderPubKey.slice(1);\n};\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined;\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n): TypeOutputReturnType[T];\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n): TypeOutputReturnType[T] | undefined | null {\n\t// eslint-disable-next-line no-null/no-null\n\tif (input === null) {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\tif (input === undefined) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof input === 'string' && !isHexString(input)) {\n\t\tthrow new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n\t} else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n\t\tthrow new Error(\n\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)',\n\t\t);\n\t}\n\n\tconst output = toUint8Array(input);\n\n\tswitch (outputType) {\n\t\tcase TypeOutput.Uint8Array:\n\t\t\treturn output as TypeOutputReturnType[T];\n\t\tcase TypeOutput.BigInt:\n\t\t\treturn uint8ArrayToBigInt(output) as TypeOutputReturnType[T];\n\t\tcase TypeOutput.Number: {\n\t\t\tconst bigInt = uint8ArrayToBigInt(output);\n\t\t\tif (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)',\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn Number(bigInt) as TypeOutputReturnType[T];\n\t\t}\n\t\tcase TypeOutput.PrefixedHexString:\n\t\t\treturn bytesToHex(output) as TypeOutputReturnType[T];\n\t\tdefault:\n\t\t\tthrow new Error('unknown outputType');\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}