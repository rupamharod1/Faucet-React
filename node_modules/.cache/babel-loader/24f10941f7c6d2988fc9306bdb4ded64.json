{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { ContractExecutionError, InvalidResponseError, TransactionRevertedWithoutReasonError, TransactionRevertInstructionError, TransactionRevertWithCustomError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods'; // eslint-disable-next-line import/no-cycle\n\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js'; // eslint-disable-next-line import/no-cycle\n\nimport { trySendTransaction } from './try_send_transaction.js'; // eslint-disable-next-line import/no-cycle\n\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getTransactionError } from './get_transaction_error.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\nexport class SendTxHelper {\n  constructor(_ref) {\n    let {\n      options,\n      web3Context,\n      promiEvent,\n      returnFormat\n    } = _ref;\n    this.options = {\n      checkRevertBeforeSending: true\n    };\n    this.options = options;\n    this.web3Context = web3Context;\n    this.promiEvent = promiEvent;\n    this.returnFormat = returnFormat;\n  }\n\n  getReceiptWithEvents(data) {\n    var _a, _b;\n\n    const result = Object.assign({}, data !== null && data !== void 0 ? data : {});\n\n    if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {\n      result.events = {};\n\n      for (const log of result.logs) {\n        const event = decodeEventABI(ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);\n\n        if (event.event) {\n          result.events[event.event] = event;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  checkRevertBeforeSending(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.options.checkRevertBeforeSending !== false) {\n        const reason = yield getRevertReason(this.web3Context, tx, this.options.contractAbi);\n\n        if (reason !== undefined) {\n          throw yield getTransactionError(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);\n        }\n      }\n    });\n  }\n\n  emitSending(tx) {\n    if (this.promiEvent.listenerCount('sending') > 0) {\n      this.promiEvent.emit('sending', tx);\n    }\n  }\n\n  populateGasPrice(_ref2) {\n    let {\n      transactionFormatted,\n      transaction\n    } = _ref2;\n\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let result = transactionFormatted;\n\n      if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.ignoreGasPricing) && isNullish(transactionFormatted.gasPrice) && (isNullish(transaction.maxPriorityFeePerGas) || isNullish(transaction.maxFeePerGas))) {\n        result = Object.assign(Object.assign({}, transactionFormatted), yield getTransactionGasPricing(transactionFormatted, this.web3Context, ETH_DATA_FORMAT));\n      }\n\n      return result;\n    });\n  }\n\n  signAndSend(_ref3) {\n    let {\n      wallet,\n      tx\n    } = _ref3;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (wallet) {\n        const signedTransaction = yield wallet.signTransaction(tx);\n        return trySendTransaction(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n          return ethRpcMethods.sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);\n        }), signedTransaction.transactionHash);\n      }\n\n      return trySendTransaction(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n        return ethRpcMethods.sendTransaction(this.web3Context.requestManager, tx);\n      }));\n    });\n  }\n\n  emitSent(tx) {\n    if (this.promiEvent.listenerCount('sent') > 0) {\n      this.promiEvent.emit('sent', tx);\n    }\n  }\n\n  emitTransactionHash(hash) {\n    if (this.promiEvent.listenerCount('transactionHash') > 0) {\n      this.promiEvent.emit('transactionHash', hash);\n    }\n  }\n\n  emitReceipt(receipt) {\n    if (this.promiEvent.listenerCount('receipt') > 0) {\n      this.promiEvent.emit('receipt', // @ts-expect-error unknown type fix\n      receipt);\n    }\n  }\n\n  handleError(_ref4) {\n    let {\n      error,\n      tx\n    } = _ref4;\n\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let _error = error;\n\n      if (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {\n        _error = yield getTransactionError(this.web3Context, tx, undefined, undefined, (_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi);\n      }\n\n      if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError) && this.promiEvent.listenerCount('error') > 0) {\n        this.promiEvent.emit('error', _error);\n      }\n\n      return _error;\n    });\n  }\n\n  emitConfirmation(_ref5) {\n    let {\n      receipt,\n      transactionHash\n    } = _ref5;\n\n    if (this.promiEvent.listenerCount('confirmation') > 0) {\n      watchTransactionForConfirmations(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat);\n    }\n  }\n\n  handleResolve(_ref6) {\n    let {\n      receipt,\n      tx\n    } = _ref6;\n\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.transactionResolver) {\n        return (_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver(receipt);\n      }\n\n      if (receipt.status === BigInt(0)) {\n        const error = yield getTransactionError(this.web3Context, tx, // @ts-expect-error unknown type fix\n        receipt, undefined, (_c = this.options) === null || _c === void 0 ? void 0 : _c.contractAbi);\n\n        if (this.promiEvent.listenerCount('error') > 0) {\n          this.promiEvent.emit('error', error);\n        }\n\n        throw error;\n      } else {\n        return receipt;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ETH_DATA_FORMAT","isNullish","ContractExecutionError","InvalidResponseError","TransactionRevertedWithoutReasonError","TransactionRevertInstructionError","TransactionRevertWithCustomError","ethRpcMethods","getTransactionGasPricing","trySendTransaction","watchTransactionForConfirmations","ALL_EVENTS_ABI","getTransactionError","getRevertReason","decodeEventABI","SendTxHelper","constructor","options","web3Context","promiEvent","returnFormat","checkRevertBeforeSending","getReceiptWithEvents","data","result","_a","contractAbi","logs","length","events","log","event","_b","tx","reason","undefined","emitSending","listenerCount","emit","populateGasPrice","transactionFormatted","transaction","ignoreGasPricing","gasPrice","maxPriorityFeePerGas","maxFeePerGas","signAndSend","wallet","signedTransaction","signTransaction","__awaiter","sendRawTransaction","requestManager","rawTransaction","transactionHash","sendTransaction","emitSent","emitTransactionHash","hash","emitReceipt","receipt","handleError","error","_error","handleRevert","emitConfirmation","handleResolve","transactionResolver","status","BigInt","_c"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/send_tx_helper.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tEthExecutionAPI,\n\tTransactionWithSenderAPI,\n\tWeb3BaseWalletAccount,\n\tHexString,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tLogsInput,\n\tTransactionHash,\n\tContractAbiWithSignature,\n} from 'web3-types';\nimport { Web3Context, Web3EventEmitter, Web3PromiEvent } from 'web3-core';\nimport { isNullish } from 'web3-validator';\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport {\n\tSendSignedTransactionEvents,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\n\nexport class SendTxHelper<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n\tTxType =\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n> {\n\tprivate readonly web3Context: Web3Context<EthExecutionAPI>;\n\tprivate readonly promiEvent: Web3PromiEvent<\n\t\tResolveType,\n\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t>;\n\tprivate readonly options: SendTransactionOptions<ResolveType> = {\n\t\tcheckRevertBeforeSending: true,\n\t};\n\tprivate readonly returnFormat: ReturnFormat;\n\tpublic constructor({\n\t\toptions,\n\t\tweb3Context,\n\t\tpromiEvent,\n\t\treturnFormat,\n\t}: {\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\toptions: SendTransactionOptions<ResolveType>;\n\t\tpromiEvent: Web3PromiEvent<\n\t\t\tResolveType,\n\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t\t>;\n\t\treturnFormat: ReturnFormat;\n\t}) {\n\t\tthis.options = options;\n\t\tthis.web3Context = web3Context;\n\t\tthis.promiEvent = promiEvent;\n\t\tthis.returnFormat = returnFormat;\n\t}\n\n\tpublic getReceiptWithEvents(data: TransactionReceipt): ResolveType {\n\t\tconst result = { ...(data ?? {}) };\n\t\tif (this.options?.contractAbi && result.logs && result.logs.length > 0) {\n\t\t\tresult.events = {};\n\t\t\tfor (const log of result.logs) {\n\t\t\t\tconst event = decodeEventABI(\n\t\t\t\t\tALL_EVENTS_ABI,\n\t\t\t\t\tlog as LogsInput,\n\t\t\t\t\tthis.options?.contractAbi as ContractAbiWithSignature,\n\t\t\t\t\tthis.returnFormat,\n\t\t\t\t);\n\t\t\t\tif (event.event) {\n\t\t\t\t\tresult.events[event.event] = event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result as unknown as ResolveType;\n\t}\n\n\tpublic async checkRevertBeforeSending(tx: TransactionCall) {\n\t\tif (this.options.checkRevertBeforeSending !== false) {\n\t\t\tconst reason = await getRevertReason(this.web3Context, tx, this.options.contractAbi);\n\t\t\tif (reason !== undefined) {\n\t\t\t\tthrow await getTransactionError<ReturnFormat>(\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\ttx,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.options.contractAbi,\n\t\t\t\t\treason,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic emitSending(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sending') > 0) {\n\t\t\tthis.promiEvent.emit('sending', tx);\n\t\t}\n\t}\n\n\tpublic async populateGasPrice({\n\t\ttransactionFormatted,\n\t\ttransaction,\n\t}: {\n\t\ttransactionFormatted: TxType;\n\t\ttransaction: TxType;\n\t}): Promise<TxType> {\n\t\tlet result = transactionFormatted;\n\t\tif (\n\t\t\t!this.options?.ignoreGasPricing &&\n\t\t\tisNullish((transactionFormatted as Transaction).gasPrice) &&\n\t\t\t(isNullish((transaction as Transaction).maxPriorityFeePerGas) ||\n\t\t\t\tisNullish((transaction as Transaction).maxFeePerGas))\n\t\t) {\n\t\t\tresult = {\n\t\t\t\t...transactionFormatted,\n\t\t\t\t// TODO gasPrice, maxPriorityFeePerGas, maxFeePerGas\n\t\t\t\t// should not be included if undefined, but currently are\n\t\t\t\t...(await getTransactionGasPricing(\n\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t)),\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async signAndSend({\n\t\twallet,\n\t\ttx,\n\t}: {\n\t\twallet: Web3BaseWalletAccount | undefined;\n\t\ttx: TxType;\n\t}) {\n\t\tif (wallet) {\n\t\t\tconst signedTransaction = await wallet.signTransaction(tx);\n\n\t\t\treturn trySendTransaction(\n\t\t\t\tthis.web3Context,\n\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\t\tsignedTransaction.rawTransaction,\n\t\t\t\t\t),\n\t\t\t\tsignedTransaction.transactionHash,\n\t\t\t);\n\t\t}\n\t\treturn trySendTransaction(\n\t\t\tthis.web3Context,\n\t\t\tasync (): Promise<string> =>\n\t\t\t\tethRpcMethods.sendTransaction(\n\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\ttx as Partial<TransactionWithSenderAPI>,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tpublic emitSent(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sent') > 0) {\n\t\t\tthis.promiEvent.emit('sent', tx);\n\t\t}\n\t}\n\tpublic emitTransactionHash(hash: string & Uint8Array) {\n\t\tif (this.promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\tthis.promiEvent.emit('transactionHash', hash);\n\t\t}\n\t}\n\n\tpublic emitReceipt(receipt: ResolveType) {\n\t\tif (this.promiEvent.listenerCount('receipt') > 0) {\n\t\t\t(\n\t\t\t\tthis.promiEvent as Web3EventEmitter<\n\t\t\t\t\tSendTransactionEvents<ReturnFormat> | SendSignedTransactionEvents<ReturnFormat>\n\t\t\t\t>\n\t\t\t).emit(\n\t\t\t\t'receipt',\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleError({ error, tx }: { error: unknown; tx: TransactionCall }) {\n\t\tlet _error = error;\n\n\t\tif (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {\n\t\t\t_error = await getTransactionError(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t_error instanceof TransactionRevertInstructionError) &&\n\t\t\tthis.promiEvent.listenerCount('error') > 0\n\t\t) {\n\t\t\tthis.promiEvent.emit('error', _error);\n\t\t}\n\n\t\treturn _error;\n\t}\n\n\tpublic emitConfirmation({\n\t\treceipt,\n\t\ttransactionHash,\n\t}: {\n\t\treceipt: ResolveType;\n\t\ttransactionHash: TransactionHash;\n\t}) {\n\t\tif (this.promiEvent.listenerCount('confirmation') > 0) {\n\t\t\twatchTransactionForConfirmations<\n\t\t\t\tReturnFormat,\n\t\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>,\n\t\t\t\tResolveType\n\t\t\t>(\n\t\t\t\tthis.web3Context,\n\t\t\t\tthis.promiEvent,\n\t\t\t\treceipt as unknown as TransactionReceipt,\n\t\t\t\ttransactionHash,\n\t\t\t\tthis.returnFormat,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleResolve({ receipt, tx }: { receipt: ResolveType; tx: TransactionCall }) {\n\t\tif (this.options?.transactionResolver) {\n\t\t\treturn this.options?.transactionResolver(receipt as unknown as TransactionReceipt);\n\t\t}\n\t\tif ((receipt as unknown as TransactionReceipt).status === BigInt(0)) {\n\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t\tif (this.promiEvent.listenerCount('error') > 0) {\n\t\t\t\tthis.promiEvent.emit('error', error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} else {\n\t\t\treturn receipt;\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}