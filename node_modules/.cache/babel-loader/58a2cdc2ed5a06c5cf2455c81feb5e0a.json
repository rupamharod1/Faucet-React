{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport { toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { Common } from '../common/common.js';\nimport { Hardfork, Chain } from '../common/enums.js';\nimport { Capability } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\n\nexport class BaseTransaction {\n  constructor(txData, opts) {\n    var _a, _b;\n\n    this.cache = {\n      hash: undefined,\n      dataFee: undefined\n    };\n    /**\n     * List of tx type defining EIPs,\n     * e.g. 1559 (fee market) and 2930 (access lists)\n     * for FeeMarketEIP1559Transaction objects\n     */\n\n    this.activeCapabilities = [];\n    /**\n     * The default chain the tx falls back to if no Common\n     * is provided and if the chain can't be derived from\n     * a passed in chainId (only EIP-2718 typed txs) or\n     * EIP-155 signature (legacy txs).\n     *\n     * @hidden\n     */\n\n    this.DEFAULT_CHAIN = Chain.Mainnet;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n    this.DEFAULT_HARDFORK = Hardfork.Merge;\n    const {\n      nonce,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s,\n      type\n    } = txData;\n    this._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n    this.txOptions = opts;\n    const toB = toUint8Array(to === '' ? '0x' : to);\n    const vB = toUint8Array(v === '' ? '0x' : v);\n    const rB = toUint8Array(r === '' ? '0x' : r);\n    const sB = toUint8Array(s === '' ? '0x' : s);\n    this.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n    this.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n    this.to = toB.length > 0 ? new Address(toB) : undefined;\n    this.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n    this.data = toUint8Array(data === '' ? '0x' : data);\n    this.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n    this.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n    this.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n\n    this._validateCannotExceedMaxInteger({\n      value: this.value,\n      r: this.r,\n      s: this.s\n    }); // geth limits gasLimit to 2^64-1\n\n\n    this._validateCannotExceedMaxInteger({\n      gasLimit: this.gasLimit\n    }, 64); // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n\n\n    this._validateCannotExceedMaxInteger({\n      nonce: this.nonce\n    }, 64, true); // eslint-disable-next-line no-null/no-null\n\n\n    const createContract = this.to === undefined || this.to === null;\n    const allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;\n    const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();\n\n    if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n      checkMaxInitCodeSize(common, this.data.length);\n    }\n  }\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n\n\n  get type() {\n    return this._type;\n  }\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n\n\n  supports(capability) {\n    return this.activeCapabilities.includes(capability);\n  }\n\n  validate() {\n    let stringError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const errors = [];\n\n    if (this.getBaseFee() > this.gasLimit) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n    }\n\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    return stringError ? errors : errors.length === 0;\n  }\n\n  _validateYParity() {\n    const {\n      v\n    } = this;\n\n    if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\n      throw new Error(msg);\n    }\n  }\n  /**\n   * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n   * Reasoning: https://ethereum.stackexchange.com/a/55728\n   */\n\n\n  _validateHighS() {\n    const {\n      s\n    } = this;\n\n    if (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n      const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n  }\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n\n\n  getBaseFee() {\n    const txFee = this.common.param('gasPrices', 'tx');\n    let fee = this.getDataFee();\n    if (txFee) fee += txFee;\n\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      const txCreationFee = this.common.param('gasPrices', 'txCreation');\n      if (txCreationFee) fee += txCreationFee;\n    }\n\n    return fee;\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  getDataFee() {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero');\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    let cost = BigInt(0); // eslint-disable-next-line @typescript-eslint/prefer-for-of\n\n    for (let i = 0; i < this.data.length; i += 1) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    } // eslint-disable-next-line no-null/no-null\n\n\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = BigInt(Math.ceil(this.data.length / 32));\n      const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n      cost += initCodeCost;\n    }\n\n    return cost;\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   */\n\n\n  toCreationAddress() {\n    return this.to === undefined || this.to.buf.length === 0;\n  }\n\n  isSigned() {\n    const {\n      v,\n      r,\n      s\n    } = this;\n\n    if (v === undefined || r === undefined || s === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Determines if the signature is valid\n   */\n\n\n  verifySignature() {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey();\n      return unpadUint8Array(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * Returns the sender's address\n   */\n\n\n  getSenderAddress() {\n    return new Address(Address.publicToAddress(this.getSenderPublicKey()));\n  }\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n\n\n  sign(privateKey) {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.');\n\n      throw new Error(msg);\n    } // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n\n\n    let hackApplied = false;\n\n    if (this.type === 0 && this.common.gteHardfork('spuriousDragon') && !this.supports(Capability.EIP155ReplayProtection)) {\n      this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n      hackApplied = true;\n    }\n\n    const msgHash = this.getMessageToSign(true);\n\n    const {\n      v,\n      r,\n      s\n    } = this._ecsign(msgHash, privateKey);\n\n    const tx = this._processSignature(v, r, s); // Hack part 2\n\n\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1);\n      }\n    }\n\n    return tx;\n  }\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n\n\n  _getCommon(common, chainId) {\n    var _a; // Chain ID provided\n\n\n    if (chainId !== undefined) {\n      const chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n\n      if (common) {\n        if (common.chainId() !== chainIdBigInt) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n\n          throw new Error(msg);\n        } // Common provided, chain ID does match\n        // -> Return provided Common\n\n\n        return common.copy();\n      }\n\n      if (Common.isSupportedChainId(chainIdBigInt)) {\n        // No Common, chain ID supported by Common\n        // -> Instantiate Common with chain ID\n        return new Common({\n          chain: chainIdBigInt,\n          hardfork: this.DEFAULT_HARDFORK\n        });\n      } // No Common, chain ID not supported by Common\n      // -> Instantiate custom Common derived from DEFAULT_CHAIN\n\n\n      return Common.custom({\n        name: 'custom-chain',\n        networkId: chainIdBigInt,\n        chainId: chainIdBigInt\n      }, {\n        baseChain: this.DEFAULT_CHAIN,\n        hardfork: this.DEFAULT_HARDFORK\n      });\n    } // No chain ID provided\n    // -> return Common provided or create new default Common\n\n\n    return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new Common({\n      chain: this.DEFAULT_CHAIN,\n      hardfork: this.DEFAULT_HARDFORK\n    });\n  }\n  /**\n   * Validates that an object with BigInt values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BigInt values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n\n\n  _validateCannotExceedMaxInteger(values) {\n    let bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;\n    let cannotEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value !== undefined && value >= MAX_UINT64) {\n              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n\n              throw new Error(msg);\n            }\n          } else if (value !== undefined && value > MAX_UINT64) {\n            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n\n            throw new Error(msg);\n          }\n\n          break;\n\n        case 256:\n          if (cannotEqual) {\n            if (value !== undefined && value >= MAX_INTEGER) {\n              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n\n              throw new Error(msg);\n            }\n          } else if (value !== undefined && value > MAX_INTEGER) {\n            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n\n            throw new Error(msg);\n          }\n\n          break;\n\n        default:\n          {\n            const msg = this._errorMsg('unimplemented bits value');\n\n            throw new Error(msg);\n          }\n      }\n    }\n  }\n\n  static _validateNotArray(values) {\n    const txDataKeys = ['nonce', 'gasPrice', 'gasLimit', 'to', 'value', 'data', 'v', 'r', 's', 'type', 'baseFee', 'maxFeePerGas', 'chainId'];\n\n    for (const [key, value] of Object.entries(values)) {\n      if (txDataKeys.includes(key)) {\n        if (Array.isArray(value)) {\n          throw new Error(`${key} cannot be an array`);\n        }\n      }\n    }\n  }\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n\n\n  _getSharedErrorPostfix() {\n    let hash = '';\n\n    try {\n      hash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n    } catch (e) {\n      hash = 'error';\n    }\n\n    let isSigned = '';\n\n    try {\n      isSigned = this.isSigned().toString();\n    } catch (e) {\n      hash = 'error';\n    }\n\n    let hf = '';\n\n    try {\n      hf = this.common.hardfork();\n    } catch (e) {\n      hf = 'error';\n    }\n\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n    postfix += `signed=${isSigned} hf=${hf}`;\n    return postfix;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  _ecsign(msgHash, privateKey, chainId) {\n    const signature = secp256k1.sign(msgHash, privateKey);\n    const signatureBytes = signature.toCompactRawBytes();\n    const r = signatureBytes.subarray(0, 32);\n    const s = signatureBytes.subarray(32, 64);\n    const v = chainId === undefined ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return {\n      r,\n      s,\n      v\n    };\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static fromSerializedTx( // @ts-expect-error unused variable\n  serialized) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static fromTxData( // @ts-expect-error unused variable\n  txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  }\n\n}","map":{"version":3,"mappings":"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","names":["bytesToHex","MAX_INTEGER","MAX_UINT64","SECP256K1_ORDER_DIV_2","secp256k1","toUint8Array","uint8ArrayToBigInt","unpadUint8Array","Common","Hardfork","Chain","Capability","Address","checkMaxInitCodeSize","BaseTransaction","constructor","txData","opts","hash","undefined","dataFee","Mainnet","Merge","nonce","gasLimit","to","value","data","v","r","s","type","_type","Number","txOptions","toB","vB","rB","sB","length","_validateCannotExceedMaxInteger","createContract","allowUnlimitedInitCodeSize","_a","common","_b","_getCommon","isActivatedEIP","supports","capability","activeCapabilities","includes","validate","stringError","errors","getBaseFee","push","isSigned","verifySignature","_validateYParity","BigInt","msg","_errorMsg","Error","_validateHighS","gteHardfork","txFee","param","fee","getDataFee","toCreationAddress","txCreationFee","txDataZero","txDataNonZero","cost","i","dataLength","Math","ceil","initCodeCost","buf","publicKey","getSenderPublicKey","e","getSenderAddress","publicToAddress","sign","privateKey","hackApplied","EIP155ReplayProtection","msgHash","getMessageToSign","_ecsign","tx","_processSignature","index","indexOf","splice","chainId","chainIdBigInt","copy","isSupportedChainId","chain","hardfork","DEFAULT_HARDFORK","custom","name","networkId","baseChain","DEFAULT_CHAIN","values","bits","cannotEqual","key","Object","entries","_validateNotArray","txDataKeys","Array","isArray","_getSharedErrorPostfix","toString","hf","postfix","signature","signatureBytes","toCompactRawBytes","subarray","recovery","fromSerializedTx","serialized","fromTxData"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/tx/baseTransaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Numbers } from 'web3-types';\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport { toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { Common } from '../common/common.js';\nimport { Hardfork, Chain } from '../common/enums.js';\nimport type {\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxData,\n\tTxOptions,\n\tTxValuesArray,\n} from './types.js';\nimport { Capability, ECDSASignature } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n\ninterface TransactionCache {\n\thash: Uint8Array | undefined;\n\tdataFee?: {\n\t\tvalue: bigint;\n\t\thardfork: string | Hardfork;\n\t};\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n\tprivate readonly _type: number;\n\n\tpublic readonly nonce: bigint;\n\tpublic readonly gasLimit: bigint;\n\tpublic readonly to?: Address;\n\tpublic readonly value: bigint;\n\tpublic readonly data: Uint8Array;\n\n\tpublic readonly v?: bigint;\n\tpublic readonly r?: bigint;\n\tpublic readonly s?: bigint;\n\n\tpublic readonly common!: Common;\n\n\tprotected cache: TransactionCache = {\n\t\thash: undefined,\n\t\tdataFee: undefined,\n\t};\n\n\tprotected readonly txOptions: TxOptions;\n\n\t/**\n\t * List of tx type defining EIPs,\n\t * e.g. 1559 (fee market) and 2930 (access lists)\n\t * for FeeMarketEIP1559Transaction objects\n\t */\n\tprotected activeCapabilities: number[] = [];\n\n\t/**\n\t * The default chain the tx falls back to if no Common\n\t * is provided and if the chain can't be derived from\n\t * a passed in chainId (only EIP-2718 typed txs) or\n\t * EIP-155 signature (legacy txs).\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_CHAIN = Chain.Mainnet;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Merge;\n\n\tpublic constructor(\n\t\ttxData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n\t\topts: TxOptions,\n\t) {\n\t\tconst { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n\t\tthis._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n\n\t\tthis.txOptions = opts;\n\n\t\tconst toB = toUint8Array(to === '' ? '0x' : to);\n\t\tconst vB = toUint8Array(v === '' ? '0x' : v);\n\t\tconst rB = toUint8Array(r === '' ? '0x' : r);\n\t\tconst sB = toUint8Array(s === '' ? '0x' : s);\n\n\t\tthis.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n\t\tthis.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n\t\tthis.to = toB.length > 0 ? new Address(toB) : undefined;\n\t\tthis.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n\t\tthis.data = toUint8Array(data === '' ? '0x' : data);\n\n\t\tthis.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n\t\tthis.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n\t\tthis.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n\n\t\tthis._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n\n\t\t// geth limits gasLimit to 2^64-1\n\t\tthis._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n\n\t\t// EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n\t\tthis._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst createContract = this.to === undefined || this.to === null;\n\t\tconst allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n\t\tconst common = opts.common ?? this._getCommon();\n\t\tif (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n\t\t\tcheckMaxInitCodeSize(common, this.data.length);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the transaction type.\n\t *\n\t * Note: legacy txs will return tx type `0`.\n\t */\n\tpublic get type() {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * Checks if a tx type defining capability is active\n\t * on a tx, for example the EIP-1559 fee market mechanism\n\t * or the EIP-2930 access list feature.\n\t *\n\t * Note that this is different from the tx type itself,\n\t * so EIP-2930 access lists can very well be active\n\t * on an EIP-1559 tx for example.\n\t *\n\t * This method can be useful for feature checks if the\n\t * tx type is unknown (e.g. when instantiated with\n\t * the tx factory).\n\t *\n\t * See `Capabilites` in the `types` module for a reference\n\t * on all supported capabilities.\n\t */\n\tpublic supports(capability: Capability) {\n\t\treturn this.activeCapabilities.includes(capability);\n\t}\n\n\t/**\n\t * Checks if the transaction has the minimum amount of gas required\n\t * (DataFee + TxFee + Creation Fee).\n\t */\n\tpublic validate(): boolean;\n\tpublic validate(stringError: false): boolean;\n\tpublic validate(stringError: true): string[];\n\tpublic validate(stringError = false): boolean | string[] {\n\t\tconst errors = [];\n\n\t\tif (this.getBaseFee() > this.gasLimit) {\n\t\t\terrors.push(\n\t\t\t\t`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`,\n\t\t\t);\n\t\t}\n\n\t\tif (this.isSigned() && !this.verifySignature()) {\n\t\t\terrors.push('Invalid Signature');\n\t\t}\n\n\t\treturn stringError ? errors : errors.length === 0;\n\t}\n\n\tprotected _validateYParity() {\n\t\tconst { v } = this;\n\t\tif (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n\t\t\tconst msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n\t * Reasoning: https://ethereum.stackexchange.com/a/55728\n\t */\n\tprotected _validateHighS() {\n\t\tconst { s } = this;\n\t\tif (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n\t */\n\tpublic getBaseFee(): bigint {\n\t\tconst txFee = this.common.param('gasPrices', 'tx');\n\t\tlet fee = this.getDataFee();\n\t\tif (txFee) fee += txFee;\n\t\tif (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n\t\t\tconst txCreationFee = this.common.param('gasPrices', 'txCreation');\n\t\t\tif (txCreationFee) fee += txCreationFee;\n\t\t}\n\t\treturn fee;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tconst txDataZero = this.common.param('gasPrices', 'txDataZero');\n\t\tconst txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n\n\t\tlet cost = BigInt(0);\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < this.data.length; i += 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n\t\t\tthis.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n\t\t\tconst dataLength = BigInt(Math.ceil(this.data.length / 32));\n\t\t\tconst initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n\t\t\tcost += initCodeCost;\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic abstract getUpfrontCost(): bigint;\n\n\t/**\n\t * If the tx's `to` is to the creation address\n\t */\n\tpublic toCreationAddress(): boolean {\n\t\treturn this.to === undefined || this.to.buf.length === 0;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of this transaction, in order.\n\t *\n\t * Use {@link BaseTransaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n\t */\n\tpublic abstract raw():\n\t\t| TxValuesArray\n\t\t| AccessListEIP2930ValuesArray\n\t\t| FeeMarketEIP1559ValuesArray;\n\n\t/**\n\t * Returns the encoding of the transaction.\n\t */\n\tpublic abstract serialize(): Uint8Array;\n\n\t// Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n\t//\n\t// Note: do not use code docs here since VS Studio is then not able to detect the\n\t// comments from the inherited methods\n\tpublic abstract getMessageToSign(hashMessage: false): Uint8Array | Uint8Array[];\n\tpublic abstract getMessageToSign(hashMessage?: true): Uint8Array;\n\n\tpublic abstract hash(): Uint8Array;\n\n\tpublic abstract getMessageToVerifySignature(): Uint8Array;\n\n\tpublic isSigned(): boolean {\n\t\tconst { v, r, s } = this;\n\t\tif (v === undefined || r === undefined || s === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determines if the signature is valid\n\t */\n\tpublic verifySignature(): boolean {\n\t\ttry {\n\t\t\t// Main signature verification is done in `getSenderPublicKey()`\n\t\t\tconst publicKey = this.getSenderPublicKey();\n\t\t\treturn unpadUint8Array(publicKey).length !== 0;\n\t\t} catch (e: any) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the sender's address\n\t */\n\tpublic getSenderAddress(): Address {\n\t\treturn new Address(Address.publicToAddress(this.getSenderPublicKey()));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic abstract getSenderPublicKey(): Uint8Array;\n\n\t/**\n\t * Signs a transaction.\n\t *\n\t * Note that the signed tx is returned as a new object,\n\t * use as follows:\n\t * ```javascript\n\t * const signedTx = tx.sign(privateKey)\n\t * ```\n\t */\n\tpublic sign(privateKey: Uint8Array): TransactionObject {\n\t\tif (privateKey.length !== 32) {\n\t\t\tconst msg = this._errorMsg('Private key must be 32 bytes in length.');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\t// Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n\t\t// and want to recreate a signature (where EIP155 should be applied)\n\t\t// Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n\t\t// 2021-06-23\n\t\tlet hackApplied = false;\n\t\tif (\n\t\t\tthis.type === 0 &&\n\t\t\tthis.common.gteHardfork('spuriousDragon') &&\n\t\t\t!this.supports(Capability.EIP155ReplayProtection)\n\t\t) {\n\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\thackApplied = true;\n\t\t}\n\n\t\tconst msgHash = this.getMessageToSign(true);\n\t\tconst { v, r, s } = this._ecsign(msgHash, privateKey);\n\t\tconst tx = this._processSignature(v, r, s);\n\n\t\t// Hack part 2\n\t\tif (hackApplied) {\n\t\t\tconst index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n\t\t\tif (index > -1) {\n\t\t\t\tthis.activeCapabilities.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic abstract toJSON(): JsonTx;\n\n\t// Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n\tprotected abstract _processSignature(\n\t\tv: bigint,\n\t\tr: Uint8Array,\n\t\ts: Uint8Array,\n\t): TransactionObject;\n\n\t/**\n\t * Does chain ID checks on common and returns a common\n\t * to be used on instantiation\n\t * @hidden\n\t *\n\t * @param common - {@link Common} instance from tx options\n\t * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n\t */\n\tprotected _getCommon(common?: Common, chainId?: Numbers) {\n\t\t// Chain ID provided\n\t\tif (chainId !== undefined) {\n\t\t\tconst chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n\t\t\tif (common) {\n\t\t\t\tif (common.chainId() !== chainIdBigInt) {\n\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t'The chain ID does not match the chain ID of Common',\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\t// Common provided, chain ID does match\n\t\t\t\t// -> Return provided Common\n\t\t\t\treturn common.copy();\n\t\t\t}\n\t\t\tif (Common.isSupportedChainId(chainIdBigInt)) {\n\t\t\t\t// No Common, chain ID supported by Common\n\t\t\t\t// -> Instantiate Common with chain ID\n\t\t\t\treturn new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });\n\t\t\t}\n\t\t\t// No Common, chain ID not supported by Common\n\t\t\t// -> Instantiate custom Common derived from DEFAULT_CHAIN\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-chain',\n\t\t\t\t\tnetworkId: chainIdBigInt,\n\t\t\t\t\tchainId: chainIdBigInt,\n\t\t\t\t},\n\t\t\t\t{ baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK },\n\t\t\t);\n\t\t}\n\t\t// No chain ID provided\n\t\t// -> return Common provided or create new default Common\n\t\treturn (\n\t\t\tcommon?.copy() ??\n\t\t\tnew Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK })\n\t\t);\n\t}\n\n\t/**\n\t * Validates that an object with BigInt values cannot exceed the specified bit limit.\n\t * @param values Object containing string keys and BigInt values\n\t * @param bits Number of bits to check (64 or 256)\n\t * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n\t */\n\tprotected _validateCannotExceedMaxInteger(\n\t\tvalues: { [key: string]: bigint | undefined },\n\t\tbits = 256,\n\t\tcannotEqual = false,\n\t) {\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tswitch (bits) {\n\t\t\t\tcase 64:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_UINT64) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_UINT64) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 256:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_INTEGER) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_INTEGER) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst msg = this._errorMsg('unimplemented bits value');\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected static _validateNotArray(values: { [key: string]: any }) {\n\t\tconst txDataKeys = [\n\t\t\t'nonce',\n\t\t\t'gasPrice',\n\t\t\t'gasLimit',\n\t\t\t'to',\n\t\t\t'value',\n\t\t\t'data',\n\t\t\t'v',\n\t\t\t'r',\n\t\t\t's',\n\t\t\t'type',\n\t\t\t'baseFee',\n\t\t\t'maxFeePerGas',\n\t\t\t'chainId',\n\t\t];\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tif (txDataKeys.includes(key)) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthrow new Error(`${key} cannot be an array`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic abstract errorStr(): string;\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected abstract _errorMsg(msg: string): string;\n\n\t/**\n\t * Returns the shared error postfix part for _error() method\n\t * tx type implementations.\n\t */\n\tprotected _getSharedErrorPostfix() {\n\t\tlet hash = '';\n\t\ttry {\n\t\t\thash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet isSigned = '';\n\t\ttry {\n\t\t\tisSigned = this.isSigned().toString();\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet hf = '';\n\t\ttry {\n\t\t\thf = this.common.hardfork();\n\t\t} catch (e: any) {\n\t\t\thf = 'error';\n\t\t}\n\n\t\tlet postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n\t\tpostfix += `signed=${isSigned} hf=${hf}`;\n\n\t\treturn postfix;\n\t}\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _ecsign(msgHash: Uint8Array, privateKey: Uint8Array, chainId?: bigint): ECDSASignature {\n\t\tconst signature = secp256k1.sign(msgHash, privateKey);\n\t\tconst signatureBytes = signature.toCompactRawBytes();\n\n\t\tconst r = signatureBytes.subarray(0, 32);\n\t\tconst s = signatureBytes.subarray(32, 64);\n\n\t\tconst v =\n\t\t\tchainId === undefined\n\t\t\t\t? BigInt(signature.recovery! + 27)\n\t\t\t\t: BigInt(signature.recovery! + 35) + BigInt(chainId) * BigInt(2);\n\n\t\treturn { r, s, v };\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromSerializedTx(\n\t\t// @ts-expect-error unused variable\n\t\tserialized: Uint8Array,\n\t\t// @ts-expect-error unused variable\n\t\topts: TxOptions = {},\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t): any {}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromTxData(\n\t\t// @ts-expect-error unused variable\n\t\ttxData: any,\n\t\t// @ts-expect-error unused variable\n\t\topts: TxOptions = {},\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t): any {}\n}\n"]},"metadata":{},"sourceType":"module"}