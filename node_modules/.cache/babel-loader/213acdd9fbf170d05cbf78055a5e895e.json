{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { decodeParameter, decodeParametersWith } from './parameters_api.js';\nconst STATIC_TYPES = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];\n\nconst _decodeParameter = (inputType, clonedTopic) => inputType === 'string' ? clonedTopic : decodeParameter(inputType, clonedTopic);\n/**\n * Decodes ABI-encoded log data and indexed topic data.\n * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param data - The ABI byte code in the `data` field of a log.\n * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]\n * @returns - The result object containing the decoded parameters.\n *\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeLog(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *        indexed: true,\n *      },\n *      {\n *        type: \"uint8\",\n *        name: \"mySmallNumber\",\n *        indexed: true,\n *      },\n *    ],\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000\",\n *    [\n *      \"0x000000000000000000000000000000000000000000000000000000000000f310\",\n *      \"0x0000000000000000000000000000000000000000000000000000000000000010\",\n *    ]\n *  );\n * > {\n *  '0': 'Hello%!',\n *  '1': 62224n,\n *  '2': 16n,\n *  __length__: 3,\n *  myString: 'Hello%!',\n *  myNumber: 62224n,\n *  mySmallNumber: 16n\n * }\n * ```\n */\n\n\nexport const decodeLog = (inputs, data, topics) => {\n  const clonedTopics = Array.isArray(topics) ? topics : [topics];\n  const indexedInputs = {};\n  const nonIndexedInputs = {};\n\n  for (const [i, input] of inputs.entries()) {\n    if (input.indexed) {\n      indexedInputs[i] = input;\n    } else {\n      nonIndexedInputs[i] = input;\n    }\n  }\n\n  const decodedNonIndexedInputs = data ? decodeParametersWith(Object.values(nonIndexedInputs), data, true) : {\n    __length__: 0\n  }; // If topics are more than indexed inputs, that means first topic is the event signature\n\n  const offset = clonedTopics.length - Object.keys(indexedInputs).length;\n  const decodedIndexedInputs = Object.values(indexedInputs).map((input, index) => STATIC_TYPES.some(s => input.type.startsWith(s)) ? _decodeParameter(input.type, clonedTopics[index + offset]) : clonedTopics[index + offset]);\n  const returnValues = {\n    __length__: 0\n  };\n  let indexedCounter = 0;\n  let nonIndexedCounter = 0;\n\n  for (const [i, res] of inputs.entries()) {\n    returnValues[i] = res.type === 'string' ? '' : undefined;\n\n    if (indexedInputs[i]) {\n      returnValues[i] = decodedIndexedInputs[indexedCounter];\n      indexedCounter += 1;\n    }\n\n    if (nonIndexedInputs[i]) {\n      returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];\n      nonIndexedCounter += 1;\n    }\n\n    if (res.name) {\n      returnValues[res.name] = returnValues[i];\n    }\n\n    returnValues.__length__ += 1;\n  }\n\n  return returnValues;\n};","map":{"version":3,"mappings":"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","names":["decodeParameter","decodeParametersWith","STATIC_TYPES","_decodeParameter","inputType","clonedTopic","decodeLog","inputs","data","topics","clonedTopics","Array","isArray","indexedInputs","nonIndexedInputs","i","input","entries","indexed","decodedNonIndexedInputs","Object","values","__length__","offset","length","keys","decodedIndexedInputs","map","index","some","s","type","startsWith","returnValues","indexedCounter","nonIndexedCounter","res","undefined","String","name"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/api/logs_api.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { HexString, AbiParameter, DecodedParams } from 'web3-types';\nimport { decodeParameter, decodeParametersWith } from './parameters_api.js';\n\nconst STATIC_TYPES = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];\n\nconst _decodeParameter = (inputType: string, clonedTopic: string) =>\n\tinputType === 'string' ? clonedTopic : decodeParameter(inputType, clonedTopic);\n\n/**\n * Decodes ABI-encoded log data and indexed topic data.\n * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param data - The ABI byte code in the `data` field of a log.\n * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]\n * @returns - The result object containing the decoded parameters.\n *\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeLog(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *        indexed: true,\n *      },\n *      {\n *        type: \"uint8\",\n *        name: \"mySmallNumber\",\n *        indexed: true,\n *      },\n *    ],\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000\",\n *    [\n *      \"0x000000000000000000000000000000000000000000000000000000000000f310\",\n *      \"0x0000000000000000000000000000000000000000000000000000000000000010\",\n *    ]\n *  );\n * > {\n *  '0': 'Hello%!',\n *  '1': 62224n,\n *  '2': 16n,\n *  __length__: 3,\n *  myString: 'Hello%!',\n *  myNumber: 62224n,\n *  mySmallNumber: 16n\n * }\n * ```\n */\nexport const decodeLog = <ReturnType extends DecodedParams>(\n\tinputs: Array<AbiParameter>,\n\tdata: HexString,\n\ttopics: string | string[],\n) => {\n\tconst clonedTopics = Array.isArray(topics) ? topics : [topics];\n\n\tconst indexedInputs: Record<number, AbiParameter> = {};\n\tconst nonIndexedInputs: Record<number, AbiParameter> = {};\n\n\tfor (const [i, input] of inputs.entries()) {\n\t\tif (input.indexed) {\n\t\t\tindexedInputs[i] = input;\n\t\t} else {\n\t\t\tnonIndexedInputs[i] = input;\n\t\t}\n\t}\n\n\tconst decodedNonIndexedInputs: DecodedParams = data\n\t\t? decodeParametersWith(Object.values(nonIndexedInputs), data, true)\n\t\t: { __length__: 0 };\n\n\t// If topics are more than indexed inputs, that means first topic is the event signature\n\tconst offset = clonedTopics.length - Object.keys(indexedInputs).length;\n\n\tconst decodedIndexedInputs = Object.values(indexedInputs).map((input, index) =>\n\t\tSTATIC_TYPES.some(s => input.type.startsWith(s))\n\t\t\t? _decodeParameter(input.type, clonedTopics[index + offset])\n\t\t\t: clonedTopics[index + offset],\n\t);\n\n\tconst returnValues: DecodedParams = { __length__: 0 };\n\n\tlet indexedCounter = 0;\n\tlet nonIndexedCounter = 0;\n\n\tfor (const [i, res] of inputs.entries()) {\n\t\treturnValues[i] = res.type === 'string' ? '' : undefined;\n\n\t\tif (indexedInputs[i]) {\n\t\t\treturnValues[i] = decodedIndexedInputs[indexedCounter];\n\t\t\tindexedCounter += 1;\n\t\t}\n\n\t\tif (nonIndexedInputs[i]) {\n\t\t\treturnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];\n\t\t\tnonIndexedCounter += 1;\n\t\t}\n\n\t\tif (res.name) {\n\t\t\treturnValues[res.name] = returnValues[i];\n\t\t}\n\n\t\treturnValues.__length__ += 1;\n\t}\n\n\treturn returnValues as ReturnType;\n};\n"]},"metadata":{},"sourceType":"module"}