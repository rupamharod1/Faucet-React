{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCurve = exports.getHash = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\nconst hmac_1 = require(\"@noble/hashes/hmac\");\n\nconst utils_1 = require(\"@noble/hashes/utils\");\n\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\"); // connects noble-curves to noble-hashes\n\n\nfunction getHash(hash) {\n  return {\n    hash,\n    hmac: function (key) {\n      for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        msgs[_key - 1] = arguments[_key];\n      }\n\n      return (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs));\n    },\n    randomBytes: utils_1.randomBytes\n  };\n}\n\nexports.getHash = getHash;\n\nfunction createCurve(curveDef, defHash) {\n  const create = hash => (0, weierstrass_js_1.weierstrass)({ ...curveDef,\n    ...getHash(hash)\n  });\n\n  return Object.freeze({ ...create(defHash),\n    create\n  });\n}\n\nexports.createCurve = createCurve;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA,8D,CAGA;;;AACA,SAAgBA,OAAhB,CAAwBC,IAAxB,EAAmC;EACjC,OAAO;IACLA,IADK;IAELC,IAAI,EAAE,UAACC,GAAD;MAAA,kCAAqBC,IAArB;QAAqBA,IAArB;MAAA;;MAAA,OAA4C,iBAAKH,IAAL,EAAWE,GAAX,EAAgB,yBAAY,GAAGC,IAAf,CAAhB,CAA5C;IAAA,CAFD;IAGLC,WAAW,EAAXC;EAHK,CAAP;AAKD;;AANDC;;AASA,SAAgBC,WAAhB,CAA4BC,QAA5B,EAAgDC,OAAhD,EAA8D;EAC5D,MAAMC,MAAM,GAAIV,IAAD,IAAiB,kCAAY,EAAE,GAAGQ,QAAL;IAAe,GAAGT,OAAO,CAACC,IAAD;EAAzB,CAAZ,CAAhC;;EACA,OAAOW,MAAM,CAACC,MAAP,CAAc,EAAE,GAAGF,MAAM,CAACD,OAAD,CAAX;IAAsBC;EAAtB,CAAd,CAAP;AACD;;AAHDJ","names":["getHash","hash","hmac","key","msgs","randomBytes","utils_1","exports","createCurve","curveDef","defHash","create","Object","freeze"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n"]},"metadata":{},"sourceType":"script"}