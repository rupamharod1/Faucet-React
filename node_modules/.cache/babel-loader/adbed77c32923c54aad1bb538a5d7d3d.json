{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Web3EthPluginBase = exports.Web3PluginBase = exports.Web3Context = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst utils_js_1 = require(\"./utils.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst web3_config_js_1 = require(\"./web3_config.js\");\n\nconst web3_request_manager_js_1 = require(\"./web3_request_manager.js\");\n\nconst web3_subscription_manager_js_1 = require(\"./web3_subscription_manager.js\");\n\nconst web3_batch_request_js_1 = require(\"./web3_batch_request.js\");\n\nclass Web3Context extends web3_config_js_1.Web3Config {\n  constructor(providerOrContext) {\n    var _a;\n\n    super();\n    this.providers = web3_request_manager_js_1.Web3RequestManager.providers; // If \"providerOrContext\" is provided as \"string\" or an objects matching \"SupportedProviders\" interface\n\n    if ((0, web3_utils_1.isNullish)(providerOrContext) || typeof providerOrContext === 'string' && providerOrContext.trim() !== '' || (0, utils_js_1.isSupportedProvider)(providerOrContext)) {\n      this._requestManager = new web3_request_manager_js_1.Web3RequestManager(providerOrContext);\n      this._subscriptionManager = new web3_subscription_manager_js_1.Web3SubscriptionManager(this._requestManager, {});\n      return;\n    }\n\n    const {\n      config,\n      provider,\n      requestManager,\n      subscriptionManager,\n      registeredSubscriptions,\n      accountProvider,\n      wallet\n    } = providerOrContext;\n    this.setConfig(config !== null && config !== void 0 ? config : {});\n    this._requestManager = requestManager !== null && requestManager !== void 0 ? requestManager : new web3_request_manager_js_1.Web3RequestManager(provider, (_a = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a === void 0 ? void 0 : _a.useSubscriptionWhenCheckingBlockTimeout);\n\n    if (subscriptionManager) {\n      this._subscriptionManager = subscriptionManager;\n    } else {\n      this._subscriptionManager = new web3_subscription_manager_js_1.Web3SubscriptionManager(this.requestManager, registeredSubscriptions !== null && registeredSubscriptions !== void 0 ? registeredSubscriptions : {});\n    }\n\n    if (accountProvider) {\n      this._accountProvider = accountProvider;\n    }\n\n    if (wallet) {\n      this._wallet = wallet;\n    }\n  }\n\n  get requestManager() {\n    return this._requestManager;\n  }\n  /**\n   * Will return the current subscriptionManager ({@link Web3SubscriptionManager})\n   */\n\n\n  get subscriptionManager() {\n    return this._subscriptionManager;\n  }\n\n  get wallet() {\n    return this._wallet;\n  }\n\n  get accountProvider() {\n    return this._accountProvider;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static fromContextObject() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new this(...args.reverse());\n  }\n\n  getContextObject() {\n    var _a;\n\n    return {\n      config: this.config,\n      provider: this.provider,\n      requestManager: this.requestManager,\n      subscriptionManager: this.subscriptionManager,\n      registeredSubscriptions: (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.registeredSubscriptions,\n      providers: this.providers,\n      wallet: this.wallet,\n      accountProvider: this.accountProvider\n    };\n  }\n  /**\n   * Use to create new object of any type extended by `Web3Context`\n   * and link it to current context. This can be used to initiate a global context object\n   * and then use it to create new objects of any type extended by `Web3Context`.\n   */\n\n\n  use(ContextRef) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    const newContextChild = new ContextRef(...[...args, this.getContextObject()]);\n    this.on(web3_config_js_1.Web3ConfigEvent.CONFIG_CHANGE, event => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      newContextChild.setConfig({\n        [event.name]: event.newValue\n      });\n    });\n    return newContextChild;\n  }\n  /**\n   * Link current context to another context.\n   */\n\n\n  link(parentContext) {\n    this.setConfig(parentContext.config);\n    this._requestManager = parentContext.requestManager;\n    this.provider = parentContext.provider; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this._subscriptionManager = parentContext.subscriptionManager;\n    this._wallet = parentContext.wallet;\n    this._accountProvider = parentContext._accountProvider;\n    parentContext.on(web3_config_js_1.Web3ConfigEvent.CONFIG_CHANGE, event => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      this.setConfig({\n        [event.name]: event.newValue\n      });\n    });\n  } // eslint-disable-next-line no-use-before-define\n\n\n  registerPlugin(plugin) {\n    // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n    if (this[plugin.pluginNamespace] !== undefined) throw new web3_errors_1.ExistingPluginNamespaceError(plugin.pluginNamespace);\n    const _pluginObject = {\n      [plugin.pluginNamespace]: plugin\n    };\n\n    _pluginObject[plugin.pluginNamespace].link(this);\n\n    Object.assign(this, _pluginObject);\n  }\n  /**\n   * Will return the current provider.\n   *\n   * @returns Returns the current provider\n   * @example\n   * ```ts\n   * const web3 = new Web3Context(\"http://localhost:8545\");\n   * console.log(web3.provider);\n   * > HttpProvider {\n   * \tclientUrl: 'http://localhost:8545',\n   * \thttpProviderOptions: undefined\n   *  }\n   * ```\n   */\n\n\n  get provider() {\n    return this.currentProvider;\n  }\n  /**\n   * Will set the current provider.\n   *\n   * @param provider - The provider to set\n   *\n   * Accepted providers are of type {@link SupportedProviders}\n   * @example\n   * ```ts\n   *  const web3Context = new web3ContextContext(\"http://localhost:8545\");\n   * web3Context.provider = \"ws://localhost:8545\";\n   * console.log(web3Context.provider);\n   * > WebSocketProvider {\n   * _eventEmitter: EventEmitter {\n   * _events: [Object: null prototype] {},\n   * _eventsCount: 0,\n   * ...\n   * }\n   * ```\n   */\n\n\n  set provider(provider) {\n    this.requestManager.setProvider(provider);\n  }\n  /**\n   * Will return the current provider. (The same as `provider`)\n   *\n   * @returns Returns the current provider\n   * @example\n   * ```ts\n   * const web3Context = new Web3Context(\"http://localhost:8545\");\n   * console.log(web3Context.provider);\n   * > HttpProvider {\n   * \tclientUrl: 'http://localhost:8545',\n   * \thttpProviderOptions: undefined\n   *  }\n   * ```\n   */\n\n\n  get currentProvider() {\n    return this.requestManager.provider;\n  }\n  /**\n   * Will set the current provider. (The same as `provider`)\n   *\n   * @param provider - {@link SupportedProviders} The provider to set\n   *\n   * @example\n   * ```ts\n   *  const web3Context = new Web3Context(\"http://localhost:8545\");\n   * web3Context.currentProvider = \"ws://localhost:8545\";\n   * console.log(web3Context.provider);\n   * > WebSocketProvider {\n   * _eventEmitter: EventEmitter {\n   * _events: [Object: null prototype] {},\n   * _eventsCount: 0,\n   * ...\n   * }\n   * ```\n   */\n\n\n  set currentProvider(provider) {\n    this.requestManager.setProvider(provider);\n  }\n  /**\n   * Will return the givenProvider if available.\n   *\n   * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  get givenProvider() {\n    return Web3Context.givenProvider;\n  }\n  /**\n   * Will set the provider.\n   *\n   * @param provider - {@link SupportedProviders} The provider to set\n   * @returns Returns true if the provider was set\n   */\n\n\n  setProvider(provider) {\n    this.provider = provider;\n    return true;\n  }\n  /**\n   * Will return the {@link Web3BatchRequest} constructor.\n   */\n\n\n  get BatchRequest() {\n    return web3_batch_request_js_1.Web3BatchRequest.bind(undefined, this._requestManager);\n  }\n  /**\n   * This method allows extending the web3 modules.\n   * Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing some thing new.\n   */\n\n\n  extend(extendObj) {\n    var _this = this;\n\n    var _a; // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n\n\n    if (extendObj.property && !this[extendObj.property]) // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n      this[extendObj.property] = {};\n    (_a = extendObj.methods) === null || _a === void 0 ? void 0 : _a.forEach(element => {\n      const method = function () {\n        for (var _len3 = arguments.length, givenParams = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          givenParams[_key3] = arguments[_key3];\n        }\n\n        return __awaiter(_this, void 0, void 0, function* () {\n          return this.requestManager.send({\n            method: element.call,\n            params: givenParams\n          });\n        });\n      };\n\n      if (extendObj.property) // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        this[extendObj.property][element.name] = method; // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n      else this[element.name] = method;\n    });\n    return this;\n  }\n\n}\n\nexports.Web3Context = Web3Context;\nWeb3Context.providers = web3_request_manager_js_1.Web3RequestManager.providers;\n/**\n * Extend this class when creating a plugin that either doesn't require {@link EthExecutionAPI},\n * or interacts with a RPC node that doesn't fully implement {@link EthExecutionAPI}.\n *\n * To add type support for RPC methods to the {@link Web3RequestManager},\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\n *\n * @example\n * ```ts\n * type CustomRpcApi = {\n *\tcustom_rpc_method: () => string;\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\n * };\n *\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\n * ```\n */\n\nclass Web3PluginBase extends Web3Context {}\n\nexports.Web3PluginBase = Web3PluginBase;\n/**\n * Extend this class when creating a plugin that makes use of {@link EthExecutionAPI},\n * or depends on other Web3 packages (such as `web3-eth-contract`) that depend on {@link EthExecutionAPI}.\n *\n * To add type support for RPC methods to the {@link Web3RequestManager} (in addition to {@link EthExecutionAPI}),\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\n *\n * @example\n * ```ts\n * type CustomRpcApi = {\n *\tcustom_rpc_method: () => string;\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\n * };\n *\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\n * ```\n */\n\nclass Web3EthPluginBase extends Web3PluginBase {}\n\nexports.Web3EthPluginBase = Web3EthPluginBase;","map":{"version":3,"mappings":"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","names":["Web3Context","web3_config_js_1","constructor","providerOrContext","web3_request_manager_js_1","providers","trim","_requestManager","_subscriptionManager","web3_subscription_manager_js_1","config","provider","requestManager","subscriptionManager","registeredSubscriptions","accountProvider","wallet","setConfig","enableExperimentalFeatures","_a","useSubscriptionWhenCheckingBlockTimeout","_accountProvider","_wallet","fromContextObject","args","reverse","getContextObject","use","ContextRef","newContextChild","on","CONFIG_CHANGE","event","name","newValue","link","parentContext","registerPlugin","plugin","pluginNamespace","undefined","web3_errors_1","_pluginObject","Object","assign","currentProvider","setProvider","givenProvider","BatchRequest","web3_batch_request_js_1","bind","extend","extendObj","property","methods","forEach","element","method","givenParams","__awaiter","send","call","params","exports","Web3PluginBase","Web3EthPluginBase"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-core/src/web3_context.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n// eslint-disable-next-line max-classes-per-file\nimport {\n\tWeb3APISpec,\n\tWeb3BaseWallet,\n\tWeb3BaseWalletAccount,\n\tWeb3AccountProvider,\n\tSupportedProviders,\n\tHexString,\n\tEthExecutionAPI,\n\tWeb3BaseProvider,\n\tTransaction,\n} from 'web3-types';\nimport { isNullish } from 'web3-utils';\nimport { ExistingPluginNamespaceError } from 'web3-errors';\n\nimport { isSupportedProvider } from './utils.js';\n// eslint-disable-next-line import/no-cycle\nimport { Web3Config, Web3ConfigEvent, Web3ConfigOptions } from './web3_config.js';\nimport { Web3RequestManager } from './web3_request_manager.js';\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\nimport { Web3SubscriptionManager } from './web3_subscription_manager.js';\nimport { Web3BatchRequest } from './web3_batch_request.js';\nimport { ExtensionObject } from './types.js';\n\n// To avoid circular dependencies, we need to export type from here.\nexport type Web3ContextObject<\n\tAPI extends Web3APISpec = unknown,\n\tRegisteredSubs extends {\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t} = any,\n> = {\n\tconfig: Web3ConfigOptions;\n\tprovider?: SupportedProviders<API> | string;\n\trequestManager: Web3RequestManager<API>;\n\tsubscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs> | undefined;\n\tregisteredSubscriptions?: RegisteredSubs;\n\tproviders: typeof Web3RequestManager.providers;\n\taccountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;\n\twallet?: Web3BaseWallet<Web3BaseWalletAccount>;\n};\n\nexport type Web3ContextInitOptions<\n\tAPI extends Web3APISpec = unknown,\n\tRegisteredSubs extends {\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t} = any,\n> = {\n\tconfig?: Partial<Web3ConfigOptions>;\n\tprovider?: SupportedProviders<API> | string;\n\trequestManager?: Web3RequestManager<API>;\n\tsubscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs> | undefined;\n\tregisteredSubscriptions?: RegisteredSubs;\n\taccountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;\n\twallet?: Web3BaseWallet<Web3BaseWalletAccount>;\n};\n\n// eslint-disable-next-line no-use-before-define\nexport type Web3ContextConstructor<T extends Web3Context, T2 extends unknown[]> = new (\n\t...args: [...extras: T2, context: Web3ContextObject]\n) => T;\n\n// To avoid circular dependencies, we need to export type from here.\nexport type Web3ContextFactory<\n\t// eslint-disable-next-line no-use-before-define\n\tT extends Web3Context,\n\tT2 extends unknown[],\n> = Web3ContextConstructor<T, T2> & {\n\tfromContextObject(this: Web3ContextConstructor<T, T2>, contextObject: Web3ContextObject): T;\n};\n\nexport class Web3Context<\n\tAPI extends Web3APISpec = unknown,\n\tRegisteredSubs extends {\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t} = any,\n> extends Web3Config {\n\tpublic static readonly providers = Web3RequestManager.providers;\n\tpublic static givenProvider?: SupportedProviders<never>;\n\tpublic readonly providers = Web3RequestManager.providers;\n\tprotected _requestManager: Web3RequestManager<API>;\n\tprotected _subscriptionManager: Web3SubscriptionManager<API, RegisteredSubs>;\n\tprotected _accountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;\n\tprotected _wallet?: Web3BaseWallet<Web3BaseWalletAccount>;\n\n\tpublic constructor(\n\t\tproviderOrContext?:\n\t\t\t| string\n\t\t\t| SupportedProviders<API>\n\t\t\t| Web3ContextInitOptions<API, RegisteredSubs>,\n\t) {\n\t\tsuper();\n\n\t\t// If \"providerOrContext\" is provided as \"string\" or an objects matching \"SupportedProviders\" interface\n\t\tif (\n\t\t\tisNullish(providerOrContext) ||\n\t\t\t(typeof providerOrContext === 'string' && providerOrContext.trim() !== '') ||\n\t\t\tisSupportedProvider(providerOrContext as SupportedProviders<API>)\n\t\t) {\n\t\t\tthis._requestManager = new Web3RequestManager<API>(\n\t\t\t\tproviderOrContext as undefined | string | SupportedProviders<API>,\n\t\t\t);\n\t\t\tthis._subscriptionManager = new Web3SubscriptionManager(\n\t\t\t\tthis._requestManager,\n\t\t\t\t{} as RegisteredSubs,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tconfig,\n\t\t\tprovider,\n\t\t\trequestManager,\n\t\t\tsubscriptionManager,\n\t\t\tregisteredSubscriptions,\n\t\t\taccountProvider,\n\t\t\twallet,\n\t\t} = providerOrContext as Web3ContextInitOptions<API, RegisteredSubs>;\n\n\t\tthis.setConfig(config ?? {});\n\n\t\tthis._requestManager =\n\t\t\trequestManager ??\n\t\t\tnew Web3RequestManager<API>(\n\t\t\t\tprovider,\n\t\t\t\tconfig?.enableExperimentalFeatures?.useSubscriptionWhenCheckingBlockTimeout,\n\t\t\t);\n\n\t\tif (subscriptionManager) {\n\t\t\tthis._subscriptionManager = subscriptionManager;\n\t\t} else {\n\t\t\tthis._subscriptionManager = new Web3SubscriptionManager(\n\t\t\t\tthis.requestManager,\n\t\t\t\tregisteredSubscriptions ?? ({} as RegisteredSubs),\n\t\t\t);\n\t\t}\n\n\t\tif (accountProvider) {\n\t\t\tthis._accountProvider = accountProvider;\n\t\t}\n\n\t\tif (wallet) {\n\t\t\tthis._wallet = wallet;\n\t\t}\n\t}\n\n\tpublic get requestManager() {\n\t\treturn this._requestManager;\n\t}\n\n\t/**\n\t * Will return the current subscriptionManager ({@link Web3SubscriptionManager})\n\t */\n\tpublic get subscriptionManager() {\n\t\treturn this._subscriptionManager;\n\t}\n\n\tpublic get wallet() {\n\t\treturn this._wallet;\n\t}\n\n\tpublic get accountProvider() {\n\t\treturn this._accountProvider;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromContextObject<T extends Web3Context, T3 extends unknown[]>(\n\t\tthis: Web3ContextConstructor<T, T3>,\n\t\t...args: [Web3ContextObject, ...T3]\n\t) {\n\t\treturn new this(...(args.reverse() as [...T3, Web3ContextObject]));\n\t}\n\n\tpublic getContextObject(): Web3ContextObject<API, RegisteredSubs> {\n\t\treturn {\n\t\t\tconfig: this.config,\n\t\t\tprovider: this.provider,\n\t\t\trequestManager: this.requestManager,\n\t\t\tsubscriptionManager: this.subscriptionManager,\n\t\t\tregisteredSubscriptions: this.subscriptionManager?.registeredSubscriptions,\n\t\t\tproviders: this.providers,\n\t\t\twallet: this.wallet,\n\t\t\taccountProvider: this.accountProvider,\n\t\t};\n\t}\n\n\t/**\n\t * Use to create new object of any type extended by `Web3Context`\n\t * and link it to current context. This can be used to initiate a global context object\n\t * and then use it to create new objects of any type extended by `Web3Context`.\n\t */\n\tpublic use<T extends Web3Context, T2 extends unknown[]>(\n\t\tContextRef: Web3ContextConstructor<T, T2>,\n\t\t...args: [...T2]\n\t) {\n\t\tconst newContextChild: T = new ContextRef(\n\t\t\t...([...args, this.getContextObject()] as unknown as [...T2, Web3ContextObject]),\n\t\t);\n\n\t\tthis.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tnewContextChild.setConfig({ [event.name]: event.newValue });\n\t\t});\n\n\t\treturn newContextChild;\n\t}\n\n\t/**\n\t * Link current context to another context.\n\t */\n\tpublic link<T extends Web3Context>(parentContext: T) {\n\t\tthis.setConfig(parentContext.config);\n\t\tthis._requestManager = parentContext.requestManager;\n\t\tthis.provider = parentContext.provider;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tthis._subscriptionManager = parentContext.subscriptionManager;\n\t\tthis._wallet = parentContext.wallet;\n\t\tthis._accountProvider = parentContext._accountProvider;\n\n\t\tparentContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tthis.setConfig({ [event.name]: event.newValue });\n\t\t});\n\t}\n\n\t// eslint-disable-next-line no-use-before-define\n\tpublic registerPlugin(plugin: Web3PluginBase) {\n\t\t// @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n\t\tif (this[plugin.pluginNamespace] !== undefined)\n\t\t\tthrow new ExistingPluginNamespaceError(plugin.pluginNamespace);\n\n\t\tconst _pluginObject = {\n\t\t\t[plugin.pluginNamespace]: plugin,\n\t\t};\n\t\t_pluginObject[plugin.pluginNamespace].link(this);\n\t\tObject.assign(this, _pluginObject);\n\t}\n\n\t/**\n\t * Will return the current provider.\n\t *\n\t * @returns Returns the current provider\n\t * @example\n\t * ```ts\n\t * const web3 = new Web3Context(\"http://localhost:8545\");\n\t * console.log(web3.provider);\n\t * > HttpProvider {\n\t * \tclientUrl: 'http://localhost:8545',\n\t * \thttpProviderOptions: undefined\n\t *  }\n\t * ```\n\t */\n\n\tpublic get provider(): Web3BaseProvider<API> | undefined {\n\t\treturn this.currentProvider;\n\t}\n\n\t/**\n\t * Will set the current provider.\n\t *\n\t * @param provider - The provider to set\n\t *\n\t * Accepted providers are of type {@link SupportedProviders}\n\t * @example\n\t * ```ts\n\t *  const web3Context = new web3ContextContext(\"http://localhost:8545\");\n\t * web3Context.provider = \"ws://localhost:8545\";\n\t * console.log(web3Context.provider);\n\t * > WebSocketProvider {\n\t * _eventEmitter: EventEmitter {\n\t * _events: [Object: null prototype] {},\n\t * _eventsCount: 0,\n\t * ...\n\t * }\n\t * ```\n\t */\n\n\tpublic set provider(provider: SupportedProviders<API> | string | undefined) {\n\t\tthis.requestManager.setProvider(provider);\n\t}\n\n\t/**\n\t * Will return the current provider. (The same as `provider`)\n\t *\n\t * @returns Returns the current provider\n\t * @example\n\t * ```ts\n\t * const web3Context = new Web3Context(\"http://localhost:8545\");\n\t * console.log(web3Context.provider);\n\t * > HttpProvider {\n\t * \tclientUrl: 'http://localhost:8545',\n\t * \thttpProviderOptions: undefined\n\t *  }\n\t * ```\n\t */\n\tpublic get currentProvider(): Web3BaseProvider<API> | undefined {\n\t\treturn this.requestManager.provider as Web3BaseProvider<API>;\n\t}\n\n\t/**\n\t * Will set the current provider. (The same as `provider`)\n\t *\n\t * @param provider - {@link SupportedProviders} The provider to set\n\t *\n\t * @example\n\t * ```ts\n\t *  const web3Context = new Web3Context(\"http://localhost:8545\");\n\t * web3Context.currentProvider = \"ws://localhost:8545\";\n\t * console.log(web3Context.provider);\n\t * > WebSocketProvider {\n\t * _eventEmitter: EventEmitter {\n\t * _events: [Object: null prototype] {},\n\t * _eventsCount: 0,\n\t * ...\n\t * }\n\t * ```\n\t */\n\tpublic set currentProvider(provider: SupportedProviders<API> | string | undefined) {\n\t\tthis.requestManager.setProvider(provider);\n\t}\n\n\t/**\n\t * Will return the givenProvider if available.\n\t *\n\t * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic get givenProvider() {\n\t\treturn Web3Context.givenProvider;\n\t}\n\t/**\n\t * Will set the provider.\n\t *\n\t * @param provider - {@link SupportedProviders} The provider to set\n\t * @returns Returns true if the provider was set\n\t */\n\tpublic setProvider(provider?: SupportedProviders<API> | string): boolean {\n\t\tthis.provider = provider;\n\t\treturn true;\n\t}\n\t/**\n\t * Will return the {@link Web3BatchRequest} constructor.\n\t */\n\tpublic get BatchRequest(): new () => Web3BatchRequest {\n\t\treturn Web3BatchRequest.bind(\n\t\t\tundefined,\n\t\t\tthis._requestManager as unknown as Web3RequestManager,\n\t\t);\n\t}\n\n\t/**\n\t * This method allows extending the web3 modules.\n\t * Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing some thing new.\n\t */\n\tpublic extend(extendObj: ExtensionObject) {\n\t\t// @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n\t\tif (extendObj.property && !this[extendObj.property])\n\t\t\t// @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n\t\t\tthis[extendObj.property] = {};\n\n\t\textendObj.methods?.forEach(element => {\n\t\t\tconst method = async (...givenParams: unknown[]) =>\n\t\t\t\tthis.requestManager.send({\n\t\t\t\t\tmethod: element.call,\n\t\t\t\t\tparams: givenParams,\n\t\t\t\t});\n\n\t\t\tif (extendObj.property)\n\t\t\t\t// @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tthis[extendObj.property][element.name] = method;\n\t\t\t// @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n\t\t\telse this[element.name] = method;\n\t\t});\n\t\treturn this;\n\t}\n}\n\n// To avoid cycle dependency declare this type in this file\nexport type TransactionBuilder<API extends Web3APISpec = unknown> = <\n\tReturnType = Transaction,\n>(options: {\n\ttransaction: Transaction;\n\tweb3Context: Web3Context<API>;\n\tprivateKey?: HexString | Uint8Array;\n\tfillGasPrice?: boolean;\n}) => Promise<ReturnType>;\n\n/**\n * Extend this class when creating a plugin that either doesn't require {@link EthExecutionAPI},\n * or interacts with a RPC node that doesn't fully implement {@link EthExecutionAPI}.\n *\n * To add type support for RPC methods to the {@link Web3RequestManager},\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\n *\n * @example\n * ```ts\n * type CustomRpcApi = {\n *\tcustom_rpc_method: () => string;\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\n * };\n *\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\n * ```\n */\nexport abstract class Web3PluginBase<\n\tAPI extends Web3APISpec = Web3APISpec,\n> extends Web3Context<API> {\n\tpublic abstract pluginNamespace: string;\n}\n\n/**\n * Extend this class when creating a plugin that makes use of {@link EthExecutionAPI},\n * or depends on other Web3 packages (such as `web3-eth-contract`) that depend on {@link EthExecutionAPI}.\n *\n * To add type support for RPC methods to the {@link Web3RequestManager} (in addition to {@link EthExecutionAPI}),\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\n *\n * @example\n * ```ts\n * type CustomRpcApi = {\n *\tcustom_rpc_method: () => string;\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\n * };\n *\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\n * ```\n */\nexport abstract class Web3EthPluginBase<API extends Web3APISpec = unknown> extends Web3PluginBase<\n\tAPI & EthExecutionAPI\n> {}\n"]},"metadata":{},"sourceType":"script"}