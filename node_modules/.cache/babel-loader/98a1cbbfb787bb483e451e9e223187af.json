{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3ContractError } from 'web3-errors';\nimport { isNullish, mergeDeep } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\n\nconst dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill) => {\n  var _a, _b;\n\n  const tx = {};\n\n  if (!isNullish(txParams.data) || dataInputFill === 'both') {\n    tx.data = encodeMethodABI(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);\n  }\n\n  if (!isNullish(txParams.input) || dataInputFill === 'both') {\n    tx.input = encodeMethodABI(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);\n  } // if input and data is empty, use web3config default\n\n\n  if (isNullish(tx.input) && isNullish(tx.data)) {\n    tx[dataInputFill] = encodeMethodABI(abi, params);\n  }\n\n  return {\n    data: tx.data,\n    input: tx.input\n  };\n};\n\nexport const getSendTxParams = _ref => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref;\n\n  var _a, _b, _c;\n\n  const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;\n\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const getEthTxCallParams = _ref2 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref2;\n\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const getEstimateGasParams = _ref3 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref3;\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const isContractInitOptions = options => typeof options === 'object' && !isNullish(options) && ['input', 'data', 'from', 'gas', 'gasPrice', 'gasLimit', 'address', 'jsonInterface', 'syncWithContext', 'dataInputFill'].some(key => key in options);\nexport const isWeb3ContractContext = options => typeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\nexport const getCreateAccessListParams = _ref4 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref4;\n\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};","map":{"version":3,"mappings":"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","names":["Web3ContractError","isNullish","mergeDeep","encodeMethodABI","dataInputEncodeMethodHelper","txParams","abi","params","dataInputFill","tx","data","_a","input","_b","getSendTxParams","options","contractOptions","deploymentCall","_c","to","address","from","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","dataInput","getEthTxCallParams","getEstimateGasParams","isContractInitOptions","some","key","isWeb3ContractContext","getCreateAccessListParams"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-contract/src/utils.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContractError } from 'web3-errors';\nimport {\n\tTransactionForAccessList,\n\tAbiFunctionFragment,\n\tTransactionWithSenderAPI,\n\tTransactionCall,\n\tHexString,\n\tAddress,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tContractInitOptions,\n\tContractOptions,\n} from 'web3-types';\nimport { isNullish, mergeDeep } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nimport { Web3ContractContext } from './types.js';\n\nconst dataInputEncodeMethodHelper = (\n\ttxParams: TransactionCall | TransactionForAccessList,\n\tabi: AbiFunctionFragment,\n\tparams: unknown[],\n\tdataInputFill?: 'data' | 'input' | 'both',\n): { data?: HexString; input?: HexString } => {\n\tconst tx: { data?: HexString; input?: HexString } = {};\n\tif (!isNullish(txParams.data) || dataInputFill === 'both') {\n\t\ttx.data = encodeMethodABI(abi, params, (txParams.data ?? txParams.input) as HexString);\n\t}\n\tif (!isNullish(txParams.input) || dataInputFill === 'both') {\n\t\ttx.input = encodeMethodABI(abi, params, (txParams.input ?? txParams.data) as HexString);\n\t}\n\t// if input and data is empty, use web3config default\n\tif (isNullish(tx.input) && isNullish(tx.data)) {\n\t\ttx[dataInputFill as 'data' | 'input'] = encodeMethodABI(abi, params);\n\t}\n\n\treturn { data: tx.data as HexString, input: tx.input as HexString };\n};\n\nexport const getSendTxParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tinput?: HexString;\n\t\tdata?: HexString;\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tconst deploymentCall =\n\t\toptions?.input ?? options?.data ?? contractOptions.input ?? contractOptions.data;\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const getEthTxCallParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const getEstimateGasParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): Partial<TransactionWithSenderAPI> => {\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams as TransactionWithSenderAPI;\n};\n\nexport const isContractInitOptions = (options: unknown): options is ContractInitOptions =>\n\ttypeof options === 'object' &&\n\t!isNullish(options) &&\n\t[\n\t\t'input',\n\t\t'data',\n\t\t'from',\n\t\t'gas',\n\t\t'gasPrice',\n\t\t'gasLimit',\n\t\t'address',\n\t\t'jsonInterface',\n\t\t'syncWithContext',\n\t\t'dataInputFill',\n\t].some(key => key in options);\n\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\n\ttypeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\n\nexport const getCreateAccessListParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionForAccessList => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionForAccessList;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n"]},"metadata":{},"sourceType":"module"}