{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTransaction = void 0;\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst schemas_js_1 = require(\"../schemas.js\");\n\nfunction formatTransaction(transaction) {\n  let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3_types_1.DEFAULT_RETURN_FORMAT;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    transactionSchema: schemas_js_1.transactionInfoSchema,\n    fillInputAndData: false\n  };\n\n  var _a, _b;\n\n  let formattedTransaction = (0, web3_utils_1.mergeDeep)({}, transaction);\n\n  if (!(0, web3_validator_1.isNullish)(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {\n    formattedTransaction.common = Object.assign({}, transaction.common);\n    if (!(0, web3_validator_1.isNullish)((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain)) formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);\n  }\n\n  formattedTransaction = (0, web3_utils_1.format)((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : schemas_js_1.transactionInfoSchema, formattedTransaction, returnFormat);\n  if (!(0, web3_validator_1.isNullish)(formattedTransaction.data) && !(0, web3_validator_1.isNullish)(formattedTransaction.input) && // Converting toHex is accounting for data and input being Uint8Arrays\n  // since comparing Uint8Array is not as straightforward as comparing strings\n  (0, web3_utils_1.toHex)(formattedTransaction.data) !== (0, web3_utils_1.toHex)(formattedTransaction.input)) throw new web3_errors_1.TransactionDataAndInputError({\n    data: (0, web3_utils_1.bytesToHex)(formattedTransaction.data),\n    input: (0, web3_utils_1.bytesToHex)(formattedTransaction.input)\n  });\n\n  if (options.fillInputAndData) {\n    if (!(0, web3_validator_1.isNullish)(formattedTransaction.data)) {\n      formattedTransaction.input = formattedTransaction.data;\n    } else if (!(0, web3_validator_1.isNullish)(formattedTransaction.input)) {\n      formattedTransaction.data = formattedTransaction.input;\n    }\n  }\n\n  if (!(0, web3_validator_1.isNullish)(formattedTransaction.gasLimit)) {\n    formattedTransaction.gas = formattedTransaction.gasLimit;\n    delete formattedTransaction.gasLimit;\n  }\n\n  return formattedTransaction;\n}\n\nexports.formatTransaction = formatTransaction;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AACA;;AACA;;AACA;;AAEA;;AAEA,SAAgBA,iBAAhB,CAICC,WAJD,EAYE;EAAA,IAPDC,YAOC,uEAP4BC,kCAO5B;EAAA,IANDC,OAMC,uEAHG;IACHC,iBAAiB,EAAEC,kCADhB;IAEHC,gBAAgB,EAAE;EAFf,CAGH;;;;EAED,IAAIC,oBAAoB,GAAG,4BAAU,EAAV,EAAcP,WAAd,CAA3B;;EACA,IAAI,CAAC,gCAAUA,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEQ,MAAvB,CAAL,EAAqC;IACpCD,oBAAoB,CAACC,MAArB,GAA2BC,kBAAQT,WAAW,CAACQ,MAApB,CAA3B;IACA,IAAI,CAAC,gCAAU,iBAAW,CAACA,MAAZ,MAAkB,IAAlB,IAAkBE,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEC,WAA9B,CAAL,EACCJ,oBAAoB,CAACC,MAArB,CAA4BG,WAA5B,GAAuCF,kBAAQT,WAAW,CAACQ,MAAZ,CAAmBG,WAA3B,CAAvC;EACD;;EACDJ,oBAAoB,GAAG,yBACtB,aAAO,CAACH,iBAAR,MAAyB,IAAzB,IAAyBQ,aAAzB,GAAyBA,EAAzB,GAA6BP,kCADP,EAEtBE,oBAFsB,EAGtBN,YAHsB,CAAvB;EAKA,IACC,CAAC,gCAAUM,oBAAoB,CAACM,IAA/B,CAAD,IACA,CAAC,gCAAUN,oBAAoB,CAACO,KAA/B,CADD,IAEA;EACA;EACA,wBAAMP,oBAAoB,CAACM,IAA3B,MAAqC,wBAAMN,oBAAoB,CAACO,KAA3B,CALtC,EAOC,MAAM,IAAIC,0CAAJ,CAAiC;IACtCF,IAAI,EAAE,6BAAWN,oBAAoB,CAACM,IAAhC,CADgC;IAEtCC,KAAK,EAAE,6BAAWP,oBAAoB,CAACO,KAAhC;EAF+B,CAAjC,CAAN;;EAKD,IAAIX,OAAO,CAACG,gBAAZ,EAA8B;IAC7B,IAAI,CAAC,gCAAUC,oBAAoB,CAACM,IAA/B,CAAL,EAA2C;MAC1CN,oBAAoB,CAACO,KAArB,GAA6BP,oBAAoB,CAACM,IAAlD;IACA,CAFD,MAEO,IAAI,CAAC,gCAAUN,oBAAoB,CAACO,KAA/B,CAAL,EAA4C;MAClDP,oBAAoB,CAACM,IAArB,GAA4BN,oBAAoB,CAACO,KAAjD;IACA;EACD;;EAED,IAAI,CAAC,gCAAUP,oBAAoB,CAACS,QAA/B,CAAL,EAA+C;IAC9CT,oBAAoB,CAACU,GAArB,GAA2BV,oBAAoB,CAACS,QAAhD;IACA,OAAOT,oBAAoB,CAACS,QAA5B;EACA;;EAED,OAAOT,oBAAP;AACA;;AAnDDW","names":["formatTransaction","transaction","returnFormat","web3_types_1","options","transactionSchema","schemas_js_1","fillInputAndData","formattedTransaction","common","Object","_a","customChain","_b","data","input","web3_errors_1","gasLimit","gas","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/format_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Transaction, DataFormat, DEFAULT_RETURN_FORMAT, FormatType } from 'web3-types';\nimport { isNullish, ValidationSchemaInput } from 'web3-validator';\nimport { mergeDeep, format, bytesToHex, toHex } from 'web3-utils';\nimport { TransactionDataAndInputError } from 'web3-errors';\n\nimport { transactionInfoSchema, transactionSchema } from '../schemas.js';\n\nexport function formatTransaction<\n\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\tTransactionType extends Transaction = Transaction,\n>(\n\ttransaction: TransactionType,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\toptions: {\n\t\ttransactionSchema?: ValidationSchemaInput | typeof transactionSchema;\n\t\tfillInputAndData?: boolean;\n\t} = {\n\t\ttransactionSchema: transactionInfoSchema,\n\t\tfillInputAndData: false,\n\t},\n): FormatType<TransactionType, ReturnFormat> {\n\tlet formattedTransaction = mergeDeep({}, transaction as Record<string, unknown>) as Transaction;\n\tif (!isNullish(transaction?.common)) {\n\t\tformattedTransaction.common = { ...transaction.common };\n\t\tif (!isNullish(transaction.common?.customChain))\n\t\t\tformattedTransaction.common.customChain = { ...transaction.common.customChain };\n\t}\n\tformattedTransaction = format(\n\t\toptions.transactionSchema ?? transactionInfoSchema,\n\t\tformattedTransaction,\n\t\treturnFormat,\n\t);\n\tif (\n\t\t!isNullish(formattedTransaction.data) &&\n\t\t!isNullish(formattedTransaction.input) &&\n\t\t// Converting toHex is accounting for data and input being Uint8Arrays\n\t\t// since comparing Uint8Array is not as straightforward as comparing strings\n\t\ttoHex(formattedTransaction.data) !== toHex(formattedTransaction.input)\n\t)\n\t\tthrow new TransactionDataAndInputError({\n\t\t\tdata: bytesToHex(formattedTransaction.data),\n\t\t\tinput: bytesToHex(formattedTransaction.input),\n\t\t});\n\n\tif (options.fillInputAndData) {\n\t\tif (!isNullish(formattedTransaction.data)) {\n\t\t\tformattedTransaction.input = formattedTransaction.data;\n\t\t} else if (!isNullish(formattedTransaction.input)) {\n\t\t\tformattedTransaction.data = formattedTransaction.input;\n\t\t}\n\t}\n\n\tif (!isNullish(formattedTransaction.gasLimit)) {\n\t\tformattedTransaction.gas = formattedTransaction.gasLimit;\n\t\tdelete formattedTransaction.gasLimit;\n\t}\n\n\treturn formattedTransaction as FormatType<TransactionType, ReturnFormat>;\n}\n"]},"metadata":{},"sourceType":"script"}