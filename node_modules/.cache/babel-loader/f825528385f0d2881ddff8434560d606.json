{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNodeInfo = exports.getProof = exports.getChainId = exports.requestAccounts = exports.getPendingTransactions = exports.getFeeHistory = exports.submitHashrate = exports.submitWork = exports.getWork = exports.getLogs = exports.getFilterLogs = exports.getFilterChanges = exports.uninstallFilter = exports.newPendingTransactionFilter = exports.newBlockFilter = exports.newFilter = exports.compileSerpent = exports.compileLLL = exports.compileSolidity = exports.getCompilers = exports.getUncleByBlockNumberAndIndex = exports.getUncleByBlockHashAndIndex = exports.getTransactionReceipt = exports.getTransactionByBlockNumberAndIndex = exports.getTransactionByBlockHashAndIndex = exports.getTransactionByHash = exports.getBlockByNumber = exports.getBlockByHash = exports.estimateGas = exports.call = exports.sendRawTransaction = exports.sendTransaction = exports.signTransaction = exports.sign = exports.getCode = exports.getUncleCountByBlockNumber = exports.getUncleCountByBlockHash = exports.getBlockTransactionCountByNumber = exports.getBlockTransactionCountByHash = exports.getTransactionCount = exports.getStorageAt = exports.getBalance = exports.getBlockNumber = exports.getAccounts = exports.getGasPrice = exports.getHashRate = exports.getMining = exports.getCoinbase = exports.getSyncing = exports.getProtocolVersion = void 0;\nexports.signTypedData = exports.createAccessList = void 0;\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nfunction getProtocolVersion(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_protocolVersion',\n      params: []\n    });\n  });\n}\n\nexports.getProtocolVersion = getProtocolVersion;\n\nfunction getSyncing(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_syncing',\n      params: []\n    });\n  });\n}\n\nexports.getSyncing = getSyncing;\n\nfunction getCoinbase(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_coinbase',\n      params: []\n    });\n  });\n}\n\nexports.getCoinbase = getCoinbase;\n\nfunction getMining(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_mining',\n      params: []\n    });\n  });\n}\n\nexports.getMining = getMining;\n\nfunction getHashRate(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_hashrate',\n      params: []\n    });\n  });\n}\n\nexports.getHashRate = getHashRate;\n\nfunction getGasPrice(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_gasPrice',\n      params: []\n    });\n  });\n}\n\nexports.getGasPrice = getGasPrice;\n\nfunction getAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_accounts',\n      params: []\n    });\n  });\n}\n\nexports.getAccounts = getAccounts;\n\nfunction getBlockNumber(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_blockNumber',\n      params: []\n    });\n  });\n}\n\nexports.getBlockNumber = getBlockNumber;\n\nfunction getBalance(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getBalance',\n      params: [address, blockNumber]\n    });\n  });\n}\n\nexports.getBalance = getBalance;\n\nfunction getStorageAt(requestManager, address, storageSlot, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getStorageAt',\n      params: [address, storageSlot, blockNumber]\n    });\n  });\n}\n\nexports.getStorageAt = getStorageAt;\n\nfunction getTransactionCount(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getTransactionCount',\n      params: [address, blockNumber]\n    });\n  });\n}\n\nexports.getTransactionCount = getTransactionCount;\n\nfunction getBlockTransactionCountByHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [blockHash]);\n    return requestManager.send({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash]\n    });\n  });\n}\n\nexports.getBlockTransactionCountByHash = getBlockTransactionCountByHash;\n\nfunction getBlockTransactionCountByNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumber]\n    });\n  });\n}\n\nexports.getBlockTransactionCountByNumber = getBlockTransactionCountByNumber;\n\nfunction getUncleCountByBlockHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [blockHash]);\n    return requestManager.send({\n      method: 'eth_getUncleCountByBlockHash',\n      params: [blockHash]\n    });\n  });\n}\n\nexports.getUncleCountByBlockHash = getUncleCountByBlockHash;\n\nfunction getUncleCountByBlockNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_getUncleCountByBlockNumber',\n      params: [blockNumber]\n    });\n  });\n}\n\nexports.getUncleCountByBlockNumber = getUncleCountByBlockNumber;\n\nfunction getCode(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getCode',\n      params: [address, blockNumber]\n    });\n  });\n}\n\nexports.getCode = getCode;\n\nfunction sign(requestManager, address, message) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'hex'], [address, message]);\n    return requestManager.send({\n      method: 'eth_sign',\n      params: [address, message]\n    });\n  });\n}\n\nexports.sign = sign; // TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\n\nfunction signTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_signTransaction',\n      params: [transaction]\n    });\n  });\n}\n\nexports.signTransaction = signTransaction; // TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\n\nfunction sendTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_sendTransaction',\n      params: [transaction]\n    });\n  });\n}\n\nexports.sendTransaction = sendTransaction;\n\nfunction sendRawTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [transaction]);\n    return requestManager.send({\n      method: 'eth_sendRawTransaction',\n      params: [transaction]\n    });\n  });\n}\n\nexports.sendRawTransaction = sendRawTransaction; // TODO - validate transaction\n\nfunction call(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // validateTransactionCall(transaction);\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_call',\n      params: [transaction, blockNumber]\n    });\n  });\n}\n\nexports.call = call; // TODO Not sure how to best validate Partial<TransactionWithSender>\n\nfunction estimateGas(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_estimateGas',\n      params: [transaction, blockNumber]\n    });\n  });\n}\n\nexports.estimateGas = estimateGas;\n\nfunction getBlockByHash(requestManager, blockHash, hydrated) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n    return requestManager.send({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, hydrated]\n    });\n  });\n}\n\nexports.getBlockByHash = getBlockByHash;\n\nfunction getBlockByNumber(requestManager, blockNumber, hydrated) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n    return requestManager.send({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumber, hydrated]\n    });\n  });\n}\n\nexports.getBlockByNumber = getBlockByNumber;\n\nfunction getTransactionByHash(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [transactionHash]);\n    return requestManager.send({\n      method: 'eth_getTransactionByHash',\n      params: [transactionHash]\n    });\n  });\n}\n\nexports.getTransactionByHash = getTransactionByHash;\n\nfunction getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n    return requestManager.send({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, transactionIndex]\n    });\n  });\n}\n\nexports.getTransactionByBlockHashAndIndex = getTransactionByBlockHashAndIndex;\n\nfunction getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n    return requestManager.send({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumber, transactionIndex]\n    });\n  });\n}\n\nexports.getTransactionByBlockNumberAndIndex = getTransactionByBlockNumberAndIndex;\n\nfunction getTransactionReceipt(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [transactionHash]);\n    return requestManager.send({\n      method: 'eth_getTransactionReceipt',\n      params: [transactionHash]\n    });\n  });\n}\n\nexports.getTransactionReceipt = getTransactionReceipt;\n\nfunction getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n    return requestManager.send({\n      method: 'eth_getUncleByBlockHashAndIndex',\n      params: [blockHash, uncleIndex]\n    });\n  });\n}\n\nexports.getUncleByBlockHashAndIndex = getUncleByBlockHashAndIndex;\n\nfunction getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n    return requestManager.send({\n      method: 'eth_getUncleByBlockNumberAndIndex',\n      params: [blockNumber, uncleIndex]\n    });\n  });\n}\n\nexports.getUncleByBlockNumberAndIndex = getUncleByBlockNumberAndIndex;\n\nfunction getCompilers(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_getCompilers',\n      params: []\n    });\n  });\n}\n\nexports.getCompilers = getCompilers;\n\nfunction compileSolidity(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileSolidity',\n      params: [code]\n    });\n  });\n}\n\nexports.compileSolidity = compileSolidity;\n\nfunction compileLLL(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileLLL',\n      params: [code]\n    });\n  });\n}\n\nexports.compileLLL = compileLLL;\n\nfunction compileSerpent(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileSerpent',\n      params: [code]\n    });\n  });\n}\n\nexports.compileSerpent = compileSerpent;\n\nfunction newFilter(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['filter'], [filter]);\n    return requestManager.send({\n      method: 'eth_newFilter',\n      params: [filter]\n    });\n  });\n}\n\nexports.newFilter = newFilter;\n\nfunction newBlockFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_newBlockFilter',\n      params: []\n    });\n  });\n}\n\nexports.newBlockFilter = newBlockFilter;\n\nfunction newPendingTransactionFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_newPendingTransactionFilter',\n      params: []\n    });\n  });\n}\n\nexports.newPendingTransactionFilter = newPendingTransactionFilter;\n\nfunction uninstallFilter(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_uninstallFilter',\n      params: [filterIdentifier]\n    });\n  });\n}\n\nexports.uninstallFilter = uninstallFilter;\n\nfunction getFilterChanges(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_getFilterChanges',\n      params: [filterIdentifier]\n    });\n  });\n}\n\nexports.getFilterChanges = getFilterChanges;\n\nfunction getFilterLogs(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_getFilterLogs',\n      params: [filterIdentifier]\n    });\n  });\n}\n\nexports.getFilterLogs = getFilterLogs;\n\nfunction getLogs(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['filter'], [filter]);\n    return requestManager.send({\n      method: 'eth_getLogs',\n      params: [filter]\n    });\n  });\n}\n\nexports.getLogs = getLogs;\n\nfunction getWork(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_getWork',\n      params: []\n    });\n  });\n}\n\nexports.getWork = getWork;\n\nfunction submitWork(requestManager, nonce, hash, digest) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n    return requestManager.send({\n      method: 'eth_submitWork',\n      params: [nonce, hash, digest]\n    });\n  });\n}\n\nexports.submitWork = submitWork;\n\nfunction submitHashrate(requestManager, hashRate, id) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n    return requestManager.send({\n      method: 'eth_submitHashrate',\n      params: [hashRate, id]\n    });\n  });\n}\n\nexports.submitHashrate = submitHashrate;\n\nfunction getFeeHistory(requestManager, blockCount, newestBlock, rewardPercentiles) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n\n    for (const rewardPercentile of rewardPercentiles) {\n      web3_validator_1.validator.validate(['number'], [rewardPercentile]);\n    }\n\n    return requestManager.send({\n      method: 'eth_feeHistory',\n      params: [blockCount, newestBlock, rewardPercentiles]\n    });\n  });\n}\n\nexports.getFeeHistory = getFeeHistory;\n\nfunction getPendingTransactions(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_pendingTransactions',\n      params: []\n    });\n  });\n}\n\nexports.getPendingTransactions = getPendingTransactions;\n\nfunction requestAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_requestAccounts',\n      params: []\n    });\n  });\n}\n\nexports.requestAccounts = requestAccounts;\n\nfunction getChainId(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_chainId',\n      params: []\n    });\n  });\n}\n\nexports.getChainId = getChainId;\n\nfunction getProof(requestManager, address, storageKeys, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'bytes32[]', 'blockNumberOrTag'], [address, storageKeys, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getProof',\n      params: [address, storageKeys, blockNumber]\n    });\n  });\n}\n\nexports.getProof = getProof;\n\nfunction getNodeInfo(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'web3_clientVersion',\n      params: []\n    });\n  });\n}\n\nexports.getNodeInfo = getNodeInfo;\n\nfunction createAccessList(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_createAccessList',\n      params: [transaction, blockNumber]\n    });\n  });\n}\n\nexports.createAccessList = createAccessList;\n\nfunction signTypedData(requestManager, address, typedData) {\n  let useLegacy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return __awaiter(this, void 0, void 0, function* () {\n    // TODO Add validation for typedData\n    web3_validator_1.validator.validate(['address'], [address]);\n    return requestManager.send({\n      method: `eth_signTypedData${useLegacy ? '' : '_v4'}`,\n      params: [address, typedData]\n    });\n  });\n}\n\nexports.signTypedData = signTypedData;","map":{"version":3,"mappings":"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","names":["getProtocolVersion","requestManager","send","method","params","exports","getSyncing","getCoinbase","getMining","getHashRate","getGasPrice","getAccounts","getBlockNumber","getBalance","address","blockNumber","web3_validator_1","validate","getStorageAt","storageSlot","getTransactionCount","getBlockTransactionCountByHash","blockHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","getCode","sign","message","signTransaction","transaction","sendTransaction","sendRawTransaction","call","estimateGas","getBlockByHash","hydrated","getBlockByNumber","getTransactionByHash","transactionHash","getTransactionByBlockHashAndIndex","transactionIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getUncleByBlockHashAndIndex","uncleIndex","getUncleByBlockNumberAndIndex","getCompilers","compileSolidity","code","compileLLL","compileSerpent","newFilter","filter","newBlockFilter","newPendingTransactionFilter","uninstallFilter","filterIdentifier","getFilterChanges","getFilterLogs","getLogs","getWork","submitWork","nonce","hash","digest","submitHashrate","hashRate","id","getFeeHistory","blockCount","newestBlock","rewardPercentiles","rewardPercentile","getPendingTransactions","requestAccounts","getChainId","getProof","storageKeys","getNodeInfo","createAccessList","signTypedData","typedData","useLegacy"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-rpc-methods/src/eth_rpc_methods.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport {\n\tAddress,\n\tBlockNumberOrTag,\n\tFilter,\n\tHexString32Bytes,\n\tHexString8Bytes,\n\tHexStringBytes,\n\tTransactionCallAPI,\n\tTransactionWithSenderAPI,\n\tUint,\n\tUint256,\n\tWeb3EthExecutionAPI,\n} from 'web3-types';\nimport { Eip712TypedData } from 'web3-types/src/eth_types';\nimport { validator } from 'web3-validator';\n\nexport async function getProtocolVersion(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_protocolVersion',\n\t\tparams: [],\n\t});\n}\n\nexport async function getSyncing(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_syncing',\n\t\tparams: [],\n\t});\n}\n\nexport async function getCoinbase(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_coinbase',\n\t\tparams: [],\n\t});\n}\n\nexport async function getMining(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_mining',\n\t\tparams: [],\n\t});\n}\n\nexport async function getHashRate(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_hashrate',\n\t\tparams: [],\n\t});\n}\n\nexport async function getGasPrice(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_gasPrice',\n\t\tparams: [],\n\t});\n}\n\nexport async function getAccounts(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_accounts',\n\t\tparams: [],\n\t});\n}\n\nexport async function getBlockNumber(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_blockNumber',\n\t\tparams: [],\n\t});\n}\n\nexport async function getBalance(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBalance',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function getStorageAt(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tstorageSlot: Uint256,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getStorageAt',\n\t\tparams: [address, storageSlot, blockNumber],\n\t});\n}\n\nexport async function getTransactionCount(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionCount',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function getBlockTransactionCountByHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [blockHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockTransactionCountByHash',\n\t\tparams: [blockHash],\n\t});\n}\n\nexport async function getBlockTransactionCountByNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockTransactionCountByNumber',\n\t\tparams: [blockNumber],\n\t});\n}\n\nexport async function getUncleCountByBlockHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [blockHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleCountByBlockHash',\n\t\tparams: [blockHash],\n\t});\n}\n\nexport async function getUncleCountByBlockNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleCountByBlockNumber',\n\t\tparams: [blockNumber],\n\t});\n}\n\nexport async function getCode(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getCode',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function sign(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tmessage: HexStringBytes,\n) {\n\tvalidator.validate(['address', 'hex'], [address, message]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_sign',\n\t\tparams: [address, message],\n\t});\n}\n\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport async function signTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_signTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport async function sendTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_sendTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\nexport async function sendRawTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: HexStringBytes,\n) {\n\tvalidator.validate(['hex'], [transaction]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_sendRawTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\n// TODO - validate transaction\nexport async function call(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionCallAPI,\n\tblockNumber: BlockNumberOrTag,\n) {\n\t// validateTransactionCall(transaction);\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_call',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\n// TODO Not sure how to best validate Partial<TransactionWithSender>\nexport async function estimateGas(\n\trequestManager: Web3RequestManager,\n\ttransaction: Partial<TransactionWithSenderAPI>,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_estimateGas',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\nexport async function getBlockByHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\thydrated: boolean,\n) {\n\tvalidator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockByHash',\n\t\tparams: [blockHash, hydrated],\n\t});\n}\n\nexport async function getBlockByNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\thydrated: boolean,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockByNumber',\n\t\tparams: [blockNumber, hydrated],\n\t});\n}\n\nexport async function getTransactionByHash(\n\trequestManager: Web3RequestManager,\n\ttransactionHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [transactionHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByHash',\n\t\tparams: [transactionHash],\n\t});\n}\n\nexport async function getTransactionByBlockHashAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\ttransactionIndex: Uint,\n) {\n\tvalidator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByBlockHashAndIndex',\n\t\tparams: [blockHash, transactionIndex],\n\t});\n}\n\nexport async function getTransactionByBlockNumberAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\ttransactionIndex: Uint,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByBlockNumberAndIndex',\n\t\tparams: [blockNumber, transactionIndex],\n\t});\n}\n\nexport async function getTransactionReceipt(\n\trequestManager: Web3RequestManager,\n\ttransactionHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [transactionHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionReceipt',\n\t\tparams: [transactionHash],\n\t});\n}\n\nexport async function getUncleByBlockHashAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\tuncleIndex: Uint,\n) {\n\tvalidator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleByBlockHashAndIndex',\n\t\tparams: [blockHash, uncleIndex],\n\t});\n}\n\nexport async function getUncleByBlockNumberAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\tuncleIndex: Uint,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleByBlockNumberAndIndex',\n\t\tparams: [blockNumber, uncleIndex],\n\t});\n}\n\nexport async function getCompilers(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_getCompilers',\n\t\tparams: [],\n\t});\n}\n\nexport async function compileSolidity(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileSolidity',\n\t\tparams: [code],\n\t});\n}\n\nexport async function compileLLL(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileLLL',\n\t\tparams: [code],\n\t});\n}\n\nexport async function compileSerpent(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileSerpent',\n\t\tparams: [code],\n\t});\n}\n\nexport async function newFilter(requestManager: Web3RequestManager, filter: Filter) {\n\tvalidator.validate(['filter'], [filter]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_newFilter',\n\t\tparams: [filter],\n\t});\n}\n\nexport async function newBlockFilter(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_newBlockFilter',\n\t\tparams: [],\n\t});\n}\n\nexport async function newPendingTransactionFilter(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_newPendingTransactionFilter',\n\t\tparams: [],\n\t});\n}\n\nexport async function uninstallFilter(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_uninstallFilter',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getFilterChanges(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getFilterChanges',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getFilterLogs(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getFilterLogs',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getLogs(requestManager: Web3RequestManager, filter: Filter) {\n\tvalidator.validate(['filter'], [filter]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getLogs',\n\t\tparams: [filter],\n\t});\n}\n\nexport async function getWork(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_getWork',\n\t\tparams: [],\n\t});\n}\n\nexport async function submitWork(\n\trequestManager: Web3RequestManager,\n\tnonce: HexString8Bytes,\n\thash: HexString32Bytes,\n\tdigest: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_submitWork',\n\t\tparams: [nonce, hash, digest],\n\t});\n}\n\nexport async function submitHashrate(\n\trequestManager: Web3RequestManager,\n\thashRate: HexString32Bytes,\n\tid: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_submitHashrate',\n\t\tparams: [hashRate, id],\n\t});\n}\n\nexport async function getFeeHistory(\n\trequestManager: Web3RequestManager,\n\tblockCount: Uint,\n\tnewestBlock: BlockNumberOrTag,\n\trewardPercentiles: number[],\n) {\n\tvalidator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n\n\tfor (const rewardPercentile of rewardPercentiles) {\n\t\tvalidator.validate(['number'], [rewardPercentile]);\n\t}\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_feeHistory',\n\t\tparams: [blockCount, newestBlock, rewardPercentiles],\n\t});\n}\n\nexport async function getPendingTransactions(\n\trequestManager: Web3RequestManager<Web3EthExecutionAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_pendingTransactions',\n\t\tparams: [],\n\t});\n}\n\nexport async function requestAccounts(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_requestAccounts',\n\t\tparams: [],\n\t});\n}\n\nexport async function getChainId(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_chainId',\n\t\tparams: [],\n\t});\n}\n\nexport async function getProof(\n\trequestManager: Web3RequestManager<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: HexString32Bytes[],\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(\n\t\t['address', 'bytes32[]', 'blockNumberOrTag'],\n\t\t[address, storageKeys, blockNumber],\n\t);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getProof',\n\t\tparams: [address, storageKeys, blockNumber],\n\t});\n}\n\nexport async function getNodeInfo(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'web3_clientVersion',\n\t\tparams: [],\n\t});\n}\n\nexport async function createAccessList(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_createAccessList',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\nexport async function signTypedData(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy = false,\n): Promise<string> {\n\t// TODO Add validation for typedData\n\tvalidator.validate(['address'], [address]);\n\n\treturn requestManager.send({\n\t\tmethod: `eth_signTypedData${useLegacy ? '' : '_v4'}`,\n\t\tparams: [address, typedData],\n\t});\n}\n"]},"metadata":{},"sourceType":"script"}