{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ecRecover = exports.sign = exports.signTransaction = exports.sendTransaction = exports.importRawKey = exports.lockAccount = exports.unlockAccount = exports.newAccount = exports.getAccounts = void 0;\n\nconst getAccounts = requestManager => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_listAccounts',\n    params: []\n  });\n});\n\nexports.getAccounts = getAccounts;\n\nconst newAccount = (requestManager, password) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_newAccount',\n    params: [password]\n  });\n});\n\nexports.newAccount = newAccount;\n\nconst unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_unlockAccount',\n    params: [address, password, unlockDuration]\n  });\n});\n\nexports.unlockAccount = unlockAccount;\n\nconst lockAccount = (requestManager, address) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_lockAccount',\n    params: [address]\n  });\n});\n\nexports.lockAccount = lockAccount;\n\nconst importRawKey = (requestManager, keyData, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_importRawKey',\n    params: [keyData, passphrase]\n  });\n});\n\nexports.importRawKey = importRawKey;\n\nconst sendTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_sendTransaction',\n    params: [tx, passphrase]\n  });\n});\n\nexports.sendTransaction = sendTransaction;\n\nconst signTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_signTransaction',\n    params: [tx, passphrase]\n  });\n});\n\nexports.signTransaction = signTransaction;\n\nconst sign = (requestManager, data, address, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_sign',\n    params: [data, address, passphrase]\n  });\n});\n\nexports.sign = sign;\n\nconst ecRecover = (requestManager, signedData, signature) => __awaiter(void 0, void 0, void 0, function* () {\n  return requestManager.send({\n    method: 'personal_ecRecover',\n    params: [signedData, signature]\n  });\n});\n\nexports.ecRecover = ecRecover;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBO,MAAMA,WAAW,GAAUC,cAAP,IAA6DC;EACvF,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,uBADW;IAEnBC,MAAM,EAAE;EAFW,CAApB;CADuF,CAAjF;;AAAMC,sBAAWN,WAAX;;AAMN,MAAMO,UAAU,GAAG,CACzBN,cADyB,EAEzBO,QAFyB,KAGtBN;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,qBADW;IAEnBC,MAAM,EAAE,CAACG,QAAD;EAFW,CAApB;CADG,CAHG;;AAAMF,qBAAUC,UAAV;;AASN,MAAME,aAAa,GAAG,CAC5BR,cAD4B,EAE5BS,OAF4B,EAG5BF,QAH4B,EAI5BG,cAJ4B,KAKzBT;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,wBADW;IAEnBC,MAAM,EAAE,CAACK,OAAD,EAAUF,QAAV,EAAoBG,cAApB;EAFW,CAApB;CADG,CALG;;AAAML,wBAAaG,aAAb;;AAWN,MAAMG,WAAW,GAAG,CAC1BX,cAD0B,EAE1BS,OAF0B,KAGvBR;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,sBADW;IAEnBC,MAAM,EAAE,CAACK,OAAD;EAFW,CAApB;CADG,CAHG;;AAAMJ,sBAAWM,WAAX;;AASN,MAAMC,YAAY,GAAG,CAC3BZ,cAD2B,EAE3Ba,OAF2B,EAG3BC,UAH2B,KAIxBb;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,uBADW;IAEnBC,MAAM,EAAE,CAACS,OAAD,EAAUC,UAAV;EAFW,CAApB;CADG,CAJG;;AAAMT,uBAAYO,YAAZ;;AAUN,MAAMG,eAAe,GAAG,CAC9Bf,cAD8B,EAE9BgB,EAF8B,EAG9BF,UAH8B,KAI3Bb;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,0BADW;IAEnBC,MAAM,EAAE,CAACY,EAAD,EAAKF,UAAL;EAFW,CAApB;CADG,CAJG;;AAAMT,0BAAeU,eAAf;;AAUN,MAAME,eAAe,GAAG,CAC9BjB,cAD8B,EAE9BgB,EAF8B,EAG9BF,UAH8B,KAI3Bb;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,0BADW;IAEnBC,MAAM,EAAE,CAACY,EAAD,EAAKF,UAAL;EAFW,CAApB;CADG,CAJG;;AAAMT,0BAAeY,eAAf;;AAUN,MAAMC,IAAI,GAAG,CACnBlB,cADmB,EAEnBmB,IAFmB,EAGnBV,OAHmB,EAInBK,UAJmB,KAKhBb;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,eADW;IAEnBC,MAAM,EAAE,CAACe,IAAD,EAAOV,OAAP,EAAgBK,UAAhB;EAFW,CAApB;CADG,CALG;;AAAMT,eAAIa,IAAJ;;AAWN,MAAME,SAAS,GAAG,CACxBpB,cADwB,EAExBqB,UAFwB,EAGxBC,SAHwB,KAIrBrB;EACH,qBAAc,CAACC,IAAf,CAAoB;IACnBC,MAAM,EAAE,oBADW;IAEnBC,MAAM,EAAE,CAACiB,UAAD,EAAaC,SAAb;EAFW,CAApB;CADG,CAJG;;AAAMjB,oBAASe,SAAT","names":["getAccounts","requestManager","__awaiter","send","method","params","exports","newAccount","password","unlockAccount","address","unlockDuration","lockAccount","importRawKey","keyData","passphrase","sendTransaction","tx","signTransaction","sign","data","ecRecover","signedData","signature"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-rpc-methods/src/personal_rpc_methods.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport { Address, EthPersonalAPI, HexString, Transaction } from 'web3-types';\n\nexport const getAccounts = async (requestManager: Web3RequestManager<EthPersonalAPI>) =>\n\trequestManager.send({\n\t\tmethod: 'personal_listAccounts',\n\t\tparams: [],\n\t});\n\nexport const newAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tpassword: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_newAccount',\n\t\tparams: [password],\n\t});\n\nexport const unlockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n\tpassword: string,\n\tunlockDuration: number,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_unlockAccount',\n\t\tparams: [address, password, unlockDuration],\n\t});\n\nexport const lockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_lockAccount',\n\t\tparams: [address],\n\t});\n\nexport const importRawKey = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tkeyData: HexString,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_importRawKey',\n\t\tparams: [keyData, passphrase],\n\t});\n\nexport const sendTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_sendTransaction',\n\t\tparams: [tx, passphrase],\n\t});\n\nexport const signTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_signTransaction',\n\t\tparams: [tx, passphrase],\n\t});\n\nexport const sign = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tdata: HexString,\n\taddress: Address,\n\tpassphrase: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_sign',\n\t\tparams: [data, address, passphrase],\n\t});\n\nexport const ecRecover = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tsignedData: HexString,\n\tsignature: string,\n) =>\n\trequestManager.send({\n\t\tmethod: 'personal_ecRecover',\n\t\tparams: [signedData, signature],\n\t});\n"]},"metadata":{},"sourceType":"script"}