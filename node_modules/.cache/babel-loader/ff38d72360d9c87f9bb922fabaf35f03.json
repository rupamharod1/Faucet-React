{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isNullish } from 'web3-validator';\nimport { Eip1559NotSupportedError, UnsupportedTransactionTypeError } from 'web3-errors';\nimport { format } from 'web3-utils'; // eslint-disable-next-line import/no-cycle\n\nimport { getBlock, getGasPrice } from '../rpc_method_wrappers.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getTransactionType } from './transaction_builder.js';\n\nfunction getEip1559GasPricing(transaction, web3Context, returnFormat) {\n  var _a, _b, _c;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const block = yield getBlock(web3Context, web3Context.defaultBlock, false, returnFormat);\n    if (isNullish(block.baseFeePerGas)) throw new Eip1559NotSupportedError();\n\n    if (!isNullish(transaction.gasPrice)) {\n      const convertedTransactionGasPrice = format({\n        format: 'uint'\n      }, transaction.gasPrice, returnFormat);\n      return {\n        maxPriorityFeePerGas: convertedTransactionGasPrice,\n        maxFeePerGas: convertedTransactionGasPrice\n      };\n    }\n\n    return {\n      maxPriorityFeePerGas: format({\n        format: 'uint'\n      }, (_a = transaction.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : web3Context.defaultMaxPriorityFeePerGas, returnFormat),\n      maxFeePerGas: format({\n        format: 'uint'\n      }, (_b = transaction.maxFeePerGas) !== null && _b !== void 0 ? _b : BigInt(block.baseFeePerGas) * BigInt(2) + BigInt((_c = transaction.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : web3Context.defaultMaxPriorityFeePerGas), returnFormat)\n    };\n  });\n}\n\nexport function getTransactionGasPricing(transaction, web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionType = getTransactionType(transaction, web3Context);\n\n    if (!isNullish(transactionType)) {\n      if (transactionType.startsWith('-')) throw new UnsupportedTransactionTypeError(transactionType); // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n\n      if (Number(transactionType) < 0 || Number(transactionType) > 127) throw new UnsupportedTransactionTypeError(transactionType);\n      if (isNullish(transaction.gasPrice) && (transactionType === '0x0' || transactionType === '0x1')) return {\n        gasPrice: yield getGasPrice(web3Context, returnFormat),\n        maxPriorityFeePerGas: undefined,\n        maxFeePerGas: undefined\n      };\n\n      if (transactionType === '0x2') {\n        return Object.assign({\n          gasPrice: undefined\n        }, yield getEip1559GasPricing(transaction, web3Context, returnFormat));\n      }\n    }\n\n    return undefined;\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASA,SAAT,QAA0B,gBAA1B;AACA,SAASC,wBAAT,EAAmCC,+BAAnC,QAA0E,aAA1E;AACA,SAASC,MAAT,QAAuB,YAAvB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,2BAAtC,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,0BAAnC;;AAEA,SAAeC,oBAAf,CACCC,WADD,EAECC,WAFD,EAGCC,YAHD,EAG2B;;;;IAE1B,MAAMC,KAAK,GAAG,MAAMP,QAAQ,CAACK,WAAD,EAAcA,WAAW,CAACG,YAA1B,EAAwC,KAAxC,EAA+CF,YAA/C,CAA5B;IAEA,IAAIV,SAAS,CAACW,KAAK,CAACE,aAAP,CAAb,EAAoC,MAAM,IAAIZ,wBAAJ,EAAN;;IAEpC,IAAI,CAACD,SAAS,CAACQ,WAAW,CAACM,QAAb,CAAd,EAAsC;MACrC,MAAMC,4BAA4B,GAAGZ,MAAM,CAC1C;QAAEA,MAAM,EAAE;MAAV,CAD0C,EAE1CK,WAAW,CAACM,QAF8B,EAG1CJ,YAH0C,CAA3C;MAMA,OAAO;QACNM,oBAAoB,EAAED,4BADhB;QAENE,YAAY,EAAEF;MAFR,CAAP;IAIA;;IACD,OAAO;MACNC,oBAAoB,EAAEb,MAAM,CAC3B;QAAEA,MAAM,EAAE;MAAV,CAD2B,EAE3B,iBAAW,CAACa,oBAAZ,MAAgC,IAAhC,IAAgCE,aAAhC,GAAgCA,EAAhC,GAAoCT,WAAW,CAACU,2BAFrB,EAG3BT,YAH2B,CADtB;MAMNO,YAAY,EAAEd,MAAM,CACnB;QAAEA,MAAM,EAAE;MAAV,CADmB,EAElB,iBAAW,CAACc,YAAZ,MAAwB,IAAxB,IAAwBG,aAAxB,GAAwBA,EAAxB,GACAC,MAAM,CAACV,KAAK,CAACE,aAAP,CAAN,GAA8BQ,MAAM,CAAC,CAAD,CAApC,GACCA,MAAM,CACL,iBAAW,CAACL,oBAAZ,MAAgC,IAAhC,IAAgCM,aAAhC,GAAgCA,EAAhC,GAAoCb,WAAW,CAACU,2BAD3C,CAJW,EAOnBT,YAPmB;IANd,CAAP;;AAgBA;;AAED,OAAM,SAAgBa,wBAAhB,CACLf,WADK,EAELC,WAFK,EAGLC,YAHK,EAGqB;;IAQ1B,MAAMc,eAAe,GAAGlB,kBAAkB,CAACE,WAAD,EAAcC,WAAd,CAA1C;;IACA,IAAI,CAACT,SAAS,CAACwB,eAAD,CAAd,EAAiC;MAChC,IAAIA,eAAe,CAACC,UAAhB,CAA2B,GAA3B,CAAJ,EACC,MAAM,IAAIvB,+BAAJ,CAAoCsB,eAApC,CAAN,CAF+B,CAIhC;;MACA,IAAIE,MAAM,CAACF,eAAD,CAAN,GAA0B,CAA1B,IAA+BE,MAAM,CAACF,eAAD,CAAN,GAA0B,GAA7D,EACC,MAAM,IAAItB,+BAAJ,CAAoCsB,eAApC,CAAN;MAED,IACCxB,SAAS,CAACQ,WAAW,CAACM,QAAb,CAAT,KACCU,eAAe,KAAK,KAApB,IAA6BA,eAAe,KAAK,KADlD,CADD,EAIC,OAAO;QACNV,QAAQ,EAAE,MAAMT,WAAW,CAACI,WAAD,EAAcC,YAAd,CADrB;QAENM,oBAAoB,EAAEW,SAFhB;QAGNV,YAAY,EAAEU;MAHR,CAAP;;MAMD,IAAIH,eAAe,KAAK,KAAxB,EAA+B;QAC9B;UACCV,QAAQ,EAAEa;QADX,GAEK,MAAMpB,oBAAoB,CAACC,WAAD,EAAcC,WAAd,EAA2BC,YAA3B,CAF/B;MAIA;IACD;;IAED,OAAOiB,SAAP;EACA;AAAA","names":["isNullish","Eip1559NotSupportedError","UnsupportedTransactionTypeError","format","getBlock","getGasPrice","getTransactionType","getEip1559GasPricing","transaction","web3Context","returnFormat","block","defaultBlock","baseFeePerGas","gasPrice","convertedTransactionGasPrice","maxPriorityFeePerGas","maxFeePerGas","_a","defaultMaxPriorityFeePerGas","_b","BigInt","_c","getTransactionGasPricing","transactionType","startsWith","Number","undefined"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/get_transaction_gas_pricing.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport {\n\tEthExecutionAPI,\n\tNumbers,\n\tTransaction,\n\tDataFormat,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { Eip1559NotSupportedError, UnsupportedTransactionTypeError } from 'web3-errors';\nimport { format } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { getBlock, getGasPrice } from '../rpc_method_wrappers.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionType } from './transaction_builder.js';\n\nasync function getEip1559GasPricing<ReturnFormat extends DataFormat>(\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n): Promise<FormatType<{ maxPriorityFeePerGas?: Numbers; maxFeePerGas?: Numbers }, ReturnFormat>> {\n\tconst block = await getBlock(web3Context, web3Context.defaultBlock, false, returnFormat);\n\n\tif (isNullish(block.baseFeePerGas)) throw new Eip1559NotSupportedError();\n\n\tif (!isNullish(transaction.gasPrice)) {\n\t\tconst convertedTransactionGasPrice = format(\n\t\t\t{ format: 'uint' },\n\t\t\ttransaction.gasPrice as Numbers,\n\t\t\treturnFormat,\n\t\t);\n\n\t\treturn {\n\t\t\tmaxPriorityFeePerGas: convertedTransactionGasPrice,\n\t\t\tmaxFeePerGas: convertedTransactionGasPrice,\n\t\t};\n\t}\n\treturn {\n\t\tmaxPriorityFeePerGas: format(\n\t\t\t{ format: 'uint' },\n\t\t\ttransaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas,\n\t\t\treturnFormat,\n\t\t),\n\t\tmaxFeePerGas: format(\n\t\t\t{ format: 'uint' },\n\t\t\t(transaction.maxFeePerGas ??\n\t\t\t\tBigInt(block.baseFeePerGas) * BigInt(2) +\n\t\t\t\t\tBigInt(\n\t\t\t\t\t\ttransaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas,\n\t\t\t\t\t)) as Numbers,\n\t\t\treturnFormat,\n\t\t),\n\t};\n}\n\nexport async function getTransactionGasPricing<ReturnFormat extends DataFormat>(\n\ttransaction: InternalTransaction,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n): Promise<\n\t| FormatType<\n\t\t\t{ gasPrice?: Numbers; maxPriorityFeePerGas?: Numbers; maxFeePerGas?: Numbers },\n\t\t\tReturnFormat\n\t  >\n\t| undefined\n> {\n\tconst transactionType = getTransactionType(transaction, web3Context);\n\tif (!isNullish(transactionType)) {\n\t\tif (transactionType.startsWith('-'))\n\t\t\tthrow new UnsupportedTransactionTypeError(transactionType);\n\n\t\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n\t\tif (Number(transactionType) < 0 || Number(transactionType) > 127)\n\t\t\tthrow new UnsupportedTransactionTypeError(transactionType);\n\n\t\tif (\n\t\t\tisNullish(transaction.gasPrice) &&\n\t\t\t(transactionType === '0x0' || transactionType === '0x1')\n\t\t)\n\t\t\treturn {\n\t\t\t\tgasPrice: await getGasPrice(web3Context, returnFormat),\n\t\t\t\tmaxPriorityFeePerGas: undefined,\n\t\t\t\tmaxFeePerGas: undefined,\n\t\t\t};\n\n\t\tif (transactionType === '0x2') {\n\t\t\treturn {\n\t\t\t\tgasPrice: undefined,\n\t\t\t\t...(await getEip1559GasPricing(transaction, web3Context, returnFormat)),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"]},"metadata":{},"sourceType":"module"}