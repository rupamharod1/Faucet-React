{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport WebSocket from 'isomorphic-ws';\nimport { isNullish, SocketProvider } from 'web3-utils';\nimport { ConnectionNotOpenError } from 'web3-errors';\n/**\n * Use WebSocketProvider to connect to a Node using a WebSocket connection, i.e. over the `ws` or `wss` protocol.\n *\n * @example\n * ```ts\n * const provider = new WebSocketProvider(\n * \t\t`ws://localhost:8545`,\n * \t\t{\n * \t\t\theaders: {\n * \t\t\t\t// to provide the API key if the Node requires the key to be inside the `headers` for example:\n * \t\t\t\t'x-api-key': '<Api key>',\n * \t\t\t},\n * \t\t},\n * \t\t{\n * \t\t\tdelay: 500,\n * \t\t\tautoReconnect: true,\n * \t\t\tmaxAttempts: 10,\n * \t\t},\n * \t);\n * ```\n *\n * The second and the third parameters are both optional. And you can for example, the second parameter could be an empty object or undefined.\n *  * @example\n * ```ts\n * const provider = new WebSocketProvider(\n * \t\t`ws://localhost:8545`,\n * \t\t{},\n * \t\t{\n * \t\t\tdelay: 500,\n * \t\t\tautoReconnect: true,\n * \t\t\tmaxAttempts: 10,\n * \t\t},\n * \t);\n * ```\n */\n\nexport default class WebSocketProvider extends SocketProvider {\n  /**\n   * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.\n   * @param socketPath - The path to the Web Socket.\n   * @param socketOptions - The options for the Web Socket client.\n   * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n   */\n  // this constructor is to specify the type for `socketOptions` for a better intellisense.\n  // eslint-disable-next-line no-useless-constructor\n  constructor(socketPath, socketOptions, reconnectOptions) {\n    super(socketPath, socketOptions, reconnectOptions);\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  _validateProviderPath(providerUrl) {\n    return typeof providerUrl === 'string' ? /^ws(s)?:\\/\\//i.test(providerUrl) : false;\n  }\n\n  getStatus() {\n    if (this._socketConnection && !isNullish(this._socketConnection)) {\n      switch (this._socketConnection.readyState) {\n        case this._socketConnection.CONNECTING:\n          {\n            return 'connecting';\n          }\n\n        case this._socketConnection.OPEN:\n          {\n            return 'connected';\n          }\n\n        default:\n          {\n            return 'disconnected';\n          }\n      }\n    }\n\n    return 'disconnected';\n  }\n\n  _openSocketConnection() {\n    this._socketConnection = new WebSocket(this._socketPath, undefined, this._socketOptions && Object.keys(this._socketOptions).length === 0 ? undefined : this._socketOptions);\n  }\n\n  _closeSocketConnection(code, data) {\n    var _a;\n\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.close(code, data);\n  }\n\n  _sendToSocket(payload) {\n    var _a;\n\n    if (this.getStatus() === 'disconnected') {\n      throw new ConnectionNotOpenError();\n    }\n\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(payload));\n  }\n\n  _parseResponses(event) {\n    return this.chunkResponseParser.parseResponse(event.data);\n  }\n\n  _addSocketListeners() {\n    var _a, _b, _c, _d;\n\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.addEventListener('open', this._onOpenHandler);\n    (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.addEventListener('message', this._onMessageHandler);\n    (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.addEventListener('close', e => this._onCloseHandler(e));\n    (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.addEventListener('error', this._onErrorHandler);\n  }\n\n  _removeSocketListeners() {\n    var _a, _b, _c;\n\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this._onMessageHandler);\n    (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.removeEventListener('open', this._onOpenHandler);\n    (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.removeEventListener('close', this._onCloseHandler); // note: we intentionally keep the error event listener to be able to emit it in case an error happens when closing the connection\n  }\n\n  _onCloseEvent(event) {\n    var _a;\n\n    if (this._reconnectOptions.autoReconnect && (![1000, 1001].includes(event.code) || !event.wasClean)) {\n      this._reconnect();\n\n      return;\n    }\n\n    this._clearQueues(event);\n\n    this._removeSocketListeners();\n\n    this._onDisconnect(event.code, event.reason); // disconnect was successful and can safely remove error listener\n\n\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('error', this._onErrorHandler);\n  }\n\n}\nexport { WebSocketProvider };","map":{"version":3,"mappings":"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","names":["WebSocket","isNullish","SocketProvider","ConnectionNotOpenError","WebSocketProvider","constructor","socketPath","socketOptions","reconnectOptions","_validateProviderPath","providerUrl","test","getStatus","_socketConnection","readyState","CONNECTING","OPEN","_openSocketConnection","_socketPath","undefined","_socketOptions","Object","keys","length","_closeSocketConnection","code","data","_a","close","_sendToSocket","payload","send","JSON","stringify","_parseResponses","event","chunkResponseParser","parseResponse","_addSocketListeners","addEventListener","_onOpenHandler","_b","_onMessageHandler","_c","e","_onCloseHandler","_d","_onErrorHandler","_removeSocketListeners","removeEventListener","_onCloseEvent","_reconnectOptions","autoReconnect","includes","wasClean","_reconnect","_clearQueues","_onDisconnect","reason"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-providers-ws/src/index.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ClientRequestArgs } from 'http';\nimport WebSocket, { ClientOptions, CloseEvent } from 'isomorphic-ws';\nimport {\n\tEthExecutionAPI,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APISpec,\n\tWeb3ProviderStatus,\n} from 'web3-types';\nimport { isNullish, ReconnectOptions, SocketProvider } from 'web3-utils';\nimport { ConnectionNotOpenError } from 'web3-errors';\n\nexport { ClientRequestArgs } from 'http';\n\nexport { ClientOptions } from 'isomorphic-ws';\n\n/**\n * Use WebSocketProvider to connect to a Node using a WebSocket connection, i.e. over the `ws` or `wss` protocol.\n *\n * @example\n * ```ts\n * const provider = new WebSocketProvider(\n * \t\t`ws://localhost:8545`,\n * \t\t{\n * \t\t\theaders: {\n * \t\t\t\t// to provide the API key if the Node requires the key to be inside the `headers` for example:\n * \t\t\t\t'x-api-key': '<Api key>',\n * \t\t\t},\n * \t\t},\n * \t\t{\n * \t\t\tdelay: 500,\n * \t\t\tautoReconnect: true,\n * \t\t\tmaxAttempts: 10,\n * \t\t},\n * \t);\n * ```\n *\n * The second and the third parameters are both optional. And you can for example, the second parameter could be an empty object or undefined.\n *  * @example\n * ```ts\n * const provider = new WebSocketProvider(\n * \t\t`ws://localhost:8545`,\n * \t\t{},\n * \t\t{\n * \t\t\tdelay: 500,\n * \t\t\tautoReconnect: true,\n * \t\t\tmaxAttempts: 10,\n * \t\t},\n * \t);\n * ```\n */\nexport default class WebSocketProvider<\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends SocketProvider<WebSocket.MessageEvent, WebSocket.CloseEvent, WebSocket.ErrorEvent, API> {\n\tprotected readonly _socketOptions?: ClientOptions | ClientRequestArgs;\n\n\tprotected _socketConnection?: WebSocket;\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected _validateProviderPath(providerUrl: string): boolean {\n\t\treturn typeof providerUrl === 'string' ? /^ws(s)?:\\/\\//i.test(providerUrl) : false;\n\t}\n\n\t/**\n\t * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.\n\t * @param socketPath - The path to the Web Socket.\n\t * @param socketOptions - The options for the Web Socket client.\n\t * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n\t */\n\t// this constructor is to specify the type for `socketOptions` for a better intellisense.\n\t// eslint-disable-next-line no-useless-constructor\n\tpublic constructor(\n\t\tsocketPath: string,\n\t\tsocketOptions?: ClientOptions | ClientRequestArgs,\n\t\treconnectOptions?: Partial<ReconnectOptions>,\n\t) {\n\t\tsuper(socketPath, socketOptions, reconnectOptions);\n\t}\n\n\tpublic getStatus(): Web3ProviderStatus {\n\t\tif (this._socketConnection && !isNullish(this._socketConnection)) {\n\t\t\tswitch (this._socketConnection.readyState) {\n\t\t\t\tcase this._socketConnection.CONNECTING: {\n\t\t\t\t\treturn 'connecting';\n\t\t\t\t}\n\t\t\t\tcase this._socketConnection.OPEN: {\n\t\t\t\t\treturn 'connected';\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn 'disconnected';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 'disconnected';\n\t}\n\n\tprotected _openSocketConnection() {\n\t\tthis._socketConnection = new WebSocket(\n\t\t\tthis._socketPath,\n\t\t\tundefined,\n\t\t\tthis._socketOptions && Object.keys(this._socketOptions).length === 0\n\t\t\t\t? undefined\n\t\t\t\t: this._socketOptions,\n\t\t);\n\t}\n\n\tprotected _closeSocketConnection(code?: number, data?: string) {\n\t\tthis._socketConnection?.close(code, data);\n\t}\n\n\tprotected _sendToSocket<Method extends Web3APIMethod<API>>(\n\t\tpayload: Web3APIPayload<API, Method>,\n\t): void {\n\t\tif (this.getStatus() === 'disconnected') {\n\t\t\tthrow new ConnectionNotOpenError();\n\t\t}\n\t\tthis._socketConnection?.send(JSON.stringify(payload));\n\t}\n\n\tprotected _parseResponses(event: WebSocket.MessageEvent) {\n\t\treturn this.chunkResponseParser.parseResponse(event.data as string);\n\t}\n\n\tprotected _addSocketListeners(): void {\n\t\tthis._socketConnection?.addEventListener('open', this._onOpenHandler);\n\t\tthis._socketConnection?.addEventListener('message', this._onMessageHandler);\n\t\tthis._socketConnection?.addEventListener('close', e => this._onCloseHandler(e));\n\t\tthis._socketConnection?.addEventListener('error', this._onErrorHandler);\n\t}\n\n\tprotected _removeSocketListeners(): void {\n\t\tthis._socketConnection?.removeEventListener('message', this._onMessageHandler);\n\t\tthis._socketConnection?.removeEventListener('open', this._onOpenHandler);\n\t\tthis._socketConnection?.removeEventListener('close', this._onCloseHandler);\n\t\t// note: we intentionally keep the error event listener to be able to emit it in case an error happens when closing the connection\n\t}\n\n\tprotected _onCloseEvent(event: CloseEvent): void {\n\t\tif (\n\t\t\tthis._reconnectOptions.autoReconnect &&\n\t\t\t(![1000, 1001].includes(event.code) || !event.wasClean)\n\t\t) {\n\t\t\tthis._reconnect();\n\t\t\treturn;\n\t\t}\n\t\tthis._clearQueues(event);\n\t\tthis._removeSocketListeners();\n\t\tthis._onDisconnect(event.code, event.reason);\n\t\t// disconnect was successful and can safely remove error listener\n\t\tthis._socketConnection?.removeEventListener('error', this._onErrorHandler);\n\t}\n}\n\nexport { WebSocketProvider };\n"]},"metadata":{},"sourceType":"module"}