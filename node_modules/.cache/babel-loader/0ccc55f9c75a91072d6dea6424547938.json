{"ast":null,"code":"const U32_MASK64 = BigInt(2 ** 32 - 1);\n\nconst _32n = BigInt(32); // We are not using BigUint64Array, because they are extremely slow as per 2022\n\n\nexport function fromBig(n) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexport function split(lst) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n\n  return [Ah, Al];\n}\nexport const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0); // for Shift in [0, 32)\n\nconst shrSH = (h, l, s) => h >>> s;\n\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s; // Right rotate for Shift in [1, 32)\n\n\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\n\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s; // Right rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\n\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s; // Right rotate for shift===32 (just swaps l&h)\n\n\nconst rotr32H = (h, l) => l;\n\nconst rotr32L = (h, l) => h; // Left rotate for Shift in [1, 32)\n\n\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\n\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s; // Left rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\n\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s; // JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\n\n\nexport function add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n} // Addition with more than 2 elements\n\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\n\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\n\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0; // prettier-ignore\n\n\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexport default u64;","map":{"version":3,"mappings":"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","names":["U32_MASK64","BigInt","_32n","fromBig","n","le","h","Number","l","split","lst","Ah","Uint32Array","length","Al","i","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/hashes/src/_u64.ts"],"sourcesContent":["const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n"]},"metadata":{},"sourceType":"module"}