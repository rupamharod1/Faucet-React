{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js'; // connects noble-curves to noble-hashes\n\nexport function getHash(hash) {\n  return {\n    hash,\n    hmac: function (key) {\n      for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        msgs[_key - 1] = arguments[_key];\n      }\n\n      return hmac(hash, key, concatBytes(...msgs));\n    },\n    randomBytes\n  };\n}\nexport function createCurve(curveDef, defHash) {\n  const create = hash => weierstrass({ ...curveDef,\n    ...getHash(hash)\n  });\n\n  return Object.freeze({ ...create(defHash),\n    create\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,IAAT,QAAqB,oBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,qBAAzC;AACA,SAASC,WAAT,QAAuC,2BAAvC,C,CAGA;;AACA,OAAM,SAAUC,OAAV,CAAkBC,IAAlB,EAA6B;EACjC,OAAO;IACLA,IADK;IAELL,IAAI,EAAE,UAACM,GAAD;MAAA,kCAAqBC,IAArB;QAAqBA,IAArB;MAAA;;MAAA,OAA4CP,IAAI,CAACK,IAAD,EAAOC,GAAP,EAAYL,WAAW,CAAC,GAAGM,IAAJ,CAAvB,CAAhD;IAAA,CAFD;IAGLL;EAHK,CAAP;AAKD;AAGD,OAAM,SAAUM,WAAV,CAAsBC,QAAtB,EAA0CC,OAA1C,EAAwD;EAC5D,MAAMC,MAAM,GAAIN,IAAD,IAAiBF,WAAW,CAAC,EAAE,GAAGM,QAAL;IAAe,GAAGL,OAAO,CAACC,IAAD;EAAzB,CAAD,CAA3C;;EACA,OAAOO,MAAM,CAACC,MAAP,CAAc,EAAE,GAAGF,MAAM,CAACD,OAAD,CAAX;IAAsBC;EAAtB,CAAd,CAAP;AACD","names":["hmac","concatBytes","randomBytes","weierstrass","getHash","hash","key","msgs","createCurve","curveDef","defHash","create","Object","freeze"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n"]},"metadata":{},"sourceType":"module"}