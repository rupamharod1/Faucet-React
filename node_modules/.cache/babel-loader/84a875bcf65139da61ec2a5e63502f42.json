{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManagerEvent } from './web3_request_manager.js';\nexport class Web3SubscriptionManager {\n  constructor(requestManager, registeredSubscriptions) {\n    let tolerateUnlinkedSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.requestManager = requestManager;\n    this.registeredSubscriptions = registeredSubscriptions;\n    this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;\n    this._subscriptions = new Map();\n    this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter(this, void 0, void 0, function* () {\n      yield this.unsubscribe();\n    }));\n    this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n      this.clear();\n      this.listenToProviderEvents();\n    });\n    this.listenToProviderEvents();\n  }\n\n  listenToProviderEvents() {\n    const providerAsWebProvider = this.requestManager.provider;\n\n    if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === 'function' && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) {\n      return;\n    }\n\n    if (typeof this.requestManager.provider.on === 'function') {\n      if (typeof this.requestManager.provider.request === 'function') {\n        // Listen to provider messages and data\n        this.requestManager.provider.on('message', // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        message => this.messageListener(message));\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        providerAsWebProvider.on('data', data => this.messageListener(data));\n      }\n    }\n  }\n\n  messageListener(data) {\n    var _a, _b, _c;\n\n    if (!data) {\n      throw new SubscriptionError('Should not call messageListener with no data. Type was');\n    }\n\n    const subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16)); // Process if the received data is related to a subscription\n\n    if (subscriptionId) {\n      const sub = this._subscriptions.get(subscriptionId);\n\n      sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);\n    }\n  }\n  /**\n   * Will create a new subscription\n   *\n   * @param name - The subscription you want to subscribe to\n   * @param args - Optional additional parameters, depending on the subscription type\n   * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   *\n   * Will subscribe to a specific topic (note: name)\n   * @returns The subscription object\n   */\n\n\n  subscribe(name, args) {\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      const Klass = this.registeredSubscriptions[name];\n\n      if (!Klass) {\n        throw new SubscriptionError('Invalid subscription type');\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n\n      const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {\n        subscriptionManager: this,\n        returnFormat\n      });\n      yield this.addSubscription(subscription);\n      return subscription;\n    });\n  }\n  /**\n   * Will returns all subscriptions.\n   */\n\n\n  get subscriptions() {\n    return this._subscriptions;\n  }\n  /**\n   *\n   * Adds an instance of {@link Web3Subscription} and subscribes to it\n   *\n   * @param sub - A {@link Web3Subscription} object\n   */\n\n\n  addSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.requestManager.provider) {\n        throw new ProviderError('Provider not available');\n      }\n\n      if (!this.supportsSubscriptions()) {\n        throw new SubscriptionError('The current provider does not support subscriptions');\n      }\n\n      if (sub.id && this._subscriptions.has(sub.id)) {\n        throw new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n      }\n\n      yield sub.sendSubscriptionRequest();\n\n      if (isNullish(sub.id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet.');\n      }\n\n      this._subscriptions.set(sub.id, sub);\n\n      return sub.id;\n    });\n  }\n  /**\n   * Will clear a subscription\n   *\n   * @param id - The subscription of type {@link Web3Subscription}  to remove\n   */\n\n\n  removeSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        id\n      } = sub;\n\n      if (isNullish(id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');\n      }\n\n      if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\n        throw new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\n      }\n\n      yield sub.sendUnsubscribeRequest();\n\n      this._subscriptions.delete(id);\n\n      return id;\n    });\n  }\n  /**\n   * Will unsubscribe all subscriptions that fulfill the condition\n   *\n   * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n   * @returns An array of all the un-subscribed subscriptions\n   */\n\n\n  unsubscribe(condition) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = [];\n\n      for (const [id, sub] of this.subscriptions.entries()) {\n        if (!condition || typeof condition === 'function' && condition({\n          id,\n          sub\n        })) {\n          result.push(this.removeSubscription(sub));\n        }\n      }\n\n      return Promise.all(result);\n    });\n  }\n  /**\n   * Clears all subscriptions\n   */\n\n\n  clear() {\n    this._subscriptions.clear();\n  }\n  /**\n   * Check whether the current provider supports subscriptions.\n   *\n   * @returns `true` or `false` depending on if the current provider supports subscriptions\n   */\n\n\n  supportsSubscriptions() {\n    return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_RETURN_FORMAT","ProviderError","SubscriptionError","isNullish","isSupportSubscriptions","Web3RequestManagerEvent","Web3SubscriptionManager","constructor","requestManager","registeredSubscriptions","tolerateUnlinkedSubscription","Map","on","BEFORE_PROVIDER_CHANGE","__awaiter","unsubscribe","PROVIDER_CHANGED","clear","listenToProviderEvents","providerAsWebProvider","provider","supportsSubscriptions","request","message","messageListener","data","subscriptionId","params","_a","subscription","_b","id","_c","toString","sub","_subscriptions","get","processSubscriptionData","subscribe","name","args","returnFormat","Klass","undefined","subscriptionManager","addSubscription","subscriptions","has","sendSubscriptionRequest","set","removeSubscription","sendUnsubscribeRequest","delete","condition","result","entries","push","Promise","all"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-core/src/web3_subscription_manager.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEIP1193Provider,\n\tJsonRpcNotification,\n\tJsonRpcSubscriptionResult,\n\tJsonRpcSubscriptionResultOld,\n\tLog,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n} from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManager, Web3RequestManagerEvent } from './web3_request_manager.js';\n// eslint-disable-next-line import/no-cycle\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\n\ntype ShouldUnsubscribeCondition = ({\n\tid,\n\tsub,\n}: {\n\tid: string;\n\tsub: unknown;\n}) => boolean | undefined;\n\nexport class Web3SubscriptionManager<\n\tAPI extends Web3APISpec = Web3APISpec,\n\tRegisteredSubs extends { [key: string]: Web3SubscriptionConstructor<API> } = {\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\n\t},\n> {\n\tprivate readonly _subscriptions: Map<\n\t\tstring,\n\t\tInstanceType<RegisteredSubs[keyof RegisteredSubs]>\n\t> = new Map();\n\n\t/**\n\t *\n\t * @param - requestManager\n\t * @param - registeredSubscriptions\n\t *\n\t * @example\n\t * ```ts\n\t * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\n\t * const subscriptionManager = new Web3SubscriptionManager(requestManager, {});\n\t * ```\n\t */\n\tpublic constructor(\n\t\trequestManager: Web3RequestManager<API>,\n\t\tregisteredSubscriptions: RegisteredSubs,\n\t);\n\t/**\n\t * @deprecated This constructor overloading should not be used\n\t */\n\tpublic constructor(\n\t\trequestManager: Web3RequestManager<API>,\n\t\tregisteredSubscriptions: RegisteredSubs,\n\t\ttolerateUnlinkedSubscription: boolean,\n\t);\n\tpublic constructor(\n\t\tpublic readonly requestManager: Web3RequestManager<API>,\n\t\tpublic readonly registeredSubscriptions: RegisteredSubs,\n\t\tprivate readonly tolerateUnlinkedSubscription: boolean = false,\n\t) {\n\t\tthis.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, async () => {\n\t\t\tawait this.unsubscribe();\n\t\t});\n\n\t\tthis.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n\t\t\tthis.clear();\n\t\t\tthis.listenToProviderEvents();\n\t\t});\n\n\t\tthis.listenToProviderEvents();\n\t}\n\n\tprivate listenToProviderEvents() {\n\t\tconst providerAsWebProvider = this.requestManager.provider as Web3BaseProvider;\n\t\tif (\n\t\t\t!this.requestManager.provider ||\n\t\t\t(typeof providerAsWebProvider?.supportsSubscriptions === 'function' &&\n\t\t\t\t!providerAsWebProvider?.supportsSubscriptions())\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof (this.requestManager.provider as EIP1193Provider<API>).on === 'function') {\n\t\t\tif (\n\t\t\t\ttypeof (this.requestManager.provider as EIP1193Provider<API>).request === 'function'\n\t\t\t) {\n\t\t\t\t// Listen to provider messages and data\n\t\t\t\t(this.requestManager.provider as EIP1193Provider<API>).on(\n\t\t\t\t\t'message',\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t(message: any) => this.messageListener(message),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n\t\t\t\tproviderAsWebProvider.on<Log>('data', (data: any) => this.messageListener(data));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected messageListener(\n\t\tdata?:\n\t\t\t| JsonRpcSubscriptionResult\n\t\t\t| JsonRpcSubscriptionResultOld<Log>\n\t\t\t| JsonRpcNotification<Log>,\n\t) {\n\t\tif (!data) {\n\t\t\tthrow new SubscriptionError('Should not call messageListener with no data. Type was');\n\t\t}\n\t\tconst subscriptionId =\n\t\t\t(data as JsonRpcNotification).params?.subscription ||\n\t\t\t(data as JsonRpcSubscriptionResultOld).data?.subscription ||\n\t\t\t(data as JsonRpcSubscriptionResult).id?.toString(16);\n\n\t\t// Process if the received data is related to a subscription\n\t\tif (subscriptionId) {\n\t\t\tconst sub = this._subscriptions.get(subscriptionId);\n\t\t\tsub?.processSubscriptionData(data);\n\t\t}\n\t}\n\t/**\n\t * Will create a new subscription\n\t *\n\t * @param name - The subscription you want to subscribe to\n\t * @param args - Optional additional parameters, depending on the subscription type\n\t * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t *\n\t * Will subscribe to a specific topic (note: name)\n\t * @returns The subscription object\n\t */\n\tpublic async subscribe<T extends keyof RegisteredSubs>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubs[T]>[0],\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t): Promise<InstanceType<RegisteredSubs[T]>> {\n\t\tconst Klass: RegisteredSubs[T] = this.registeredSubscriptions[name];\n\t\tif (!Klass) {\n\t\t\tthrow new SubscriptionError('Invalid subscription type');\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\tconst subscription = new Klass(args ?? undefined, {\n\t\t\tsubscriptionManager: this as Web3SubscriptionManager<API, RegisteredSubs>,\n\t\t\treturnFormat,\n\t\t} as any) as InstanceType<RegisteredSubs[T]>;\n\n\t\tawait this.addSubscription(subscription);\n\n\t\treturn subscription;\n\t}\n\n\t/**\n\t * Will returns all subscriptions.\n\t */\n\tpublic get subscriptions() {\n\t\treturn this._subscriptions;\n\t}\n\n\t/**\n\t *\n\t * Adds an instance of {@link Web3Subscription} and subscribes to it\n\t *\n\t * @param sub - A {@link Web3Subscription} object\n\t */\n\tpublic async addSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tif (!this.requestManager.provider) {\n\t\t\tthrow new ProviderError('Provider not available');\n\t\t}\n\n\t\tif (!this.supportsSubscriptions()) {\n\t\t\tthrow new SubscriptionError('The current provider does not support subscriptions');\n\t\t}\n\n\t\tif (sub.id && this._subscriptions.has(sub.id)) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n\t\t}\n\n\t\tawait sub.sendSubscriptionRequest();\n\n\t\tif (isNullish(sub.id)) {\n\t\t\tthrow new SubscriptionError('Subscription is not subscribed yet.');\n\t\t}\n\n\t\tthis._subscriptions.set(sub.id, sub);\n\n\t\treturn sub.id;\n\t}\n\n\t/**\n\t * Will clear a subscription\n\t *\n\t * @param id - The subscription of type {@link Web3Subscription}  to remove\n\t */\n\tpublic async removeSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tconst { id } = sub;\n\n\t\tif (isNullish(id)) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t'Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\n\t\t}\n\n\t\tawait sub.sendUnsubscribeRequest();\n\t\tthis._subscriptions.delete(id);\n\t\treturn id;\n\t}\n\t/**\n\t * Will unsubscribe all subscriptions that fulfill the condition\n\t *\n\t * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n\t * @returns An array of all the un-subscribed subscriptions\n\t */\n\tpublic async unsubscribe(condition?: ShouldUnsubscribeCondition) {\n\t\tconst result = [];\n\t\tfor (const [id, sub] of this.subscriptions.entries()) {\n\t\t\tif (!condition || (typeof condition === 'function' && condition({ id, sub }))) {\n\t\t\t\tresult.push(this.removeSubscription(sub));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(result);\n\t}\n\n\t/**\n\t * Clears all subscriptions\n\t */\n\tpublic clear() {\n\t\tthis._subscriptions.clear();\n\t}\n\n\t/**\n\t * Check whether the current provider supports subscriptions.\n\t *\n\t * @returns `true` or `false` depending on if the current provider supports subscriptions\n\t */\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn isNullish(this.requestManager.provider)\n\t\t\t? false\n\t\t\t: isSupportSubscriptions(this.requestManager.provider);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}