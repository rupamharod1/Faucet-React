{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst hmac_js_1 = require(\"./hmac.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Common prologue and epilogue for sync/async functions\n\n\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n  _assert_js_1.default.hash(hash);\n\n  const opts = (0, utils_js_1.checkOpts)({\n    dkLen: 32,\n    asyncTick: 10\n  }, _opts);\n  const {\n    c,\n    dkLen,\n    asyncTick\n  } = opts;\n\n  _assert_js_1.default.number(c);\n\n  _assert_js_1.default.number(dkLen);\n\n  _assert_js_1.default.number(asyncTick);\n\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = (0, utils_js_1.toBytes)(_password);\n  const salt = (0, utils_js_1.toBytes)(_salt); // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n\n  const DK = new Uint8Array(dkLen); // U1 = PRF(Password, Salt + INT_32_BE(i))\n\n  const PRF = hmac_js_1.hmac.create(hash, password);\n\n  const PRFSalt = PRF._cloneInto().update(salt);\n\n  return {\n    c,\n    dkLen,\n    asyncTick,\n    DK,\n    PRF,\n    PRFSalt\n  };\n}\n\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\n\n\nfunction pbkdf2(hash, password, salt, opts) {\n  const {\n    c,\n    dkLen,\n    DK,\n    PRF,\n    PRFSalt\n  } = pbkdf2Init(hash, password, salt, opts);\n  let prfW; // Working copy\n\n  const arr = new Uint8Array(4);\n  const view = (0, utils_js_1.createView)(arr);\n  const u = new Uint8Array(PRF.outputLen); // DK = T1 + T2 + ⋯ + Tdklen/hlen\n\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false); // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n\n    Ti.set(u.subarray(0, Ti.length));\n\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexports.pbkdf2 = pbkdf2;\n\nasync function pbkdf2Async(hash, password, salt, opts) {\n  const {\n    c,\n    dkLen,\n    asyncTick,\n    DK,\n    PRF,\n    PRFSalt\n  } = pbkdf2Init(hash, password, salt, opts);\n  let prfW; // Working copy\n\n  const arr = new Uint8Array(4);\n  const view = (0, utils_js_1.createView)(arr);\n  const u = new Uint8Array(PRF.outputLen); // DK = T1 + T2 + ⋯ + Tdklen/hlen\n\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false); // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n\n    Ti.set(u.subarray(0, Ti.length));\n    await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, i => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexports.pbkdf2Async = pbkdf2Async;","map":{"version":3,"mappings":"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","names":["pbkdf2Init","hash","_password","_salt","_opts","_assert_js_1","opts","dkLen","asyncTick","c","number","Error","password","salt","DK","Uint8Array","PRF","hmac_js_1","create","PRFSalt","_cloneInto","update","pbkdf2Output","prfW","u","destroy","fill","pbkdf2","arr","view","outputLen","ti","pos","Ti","subarray","setInt32","digestInto","set","length","ui","i","exports","pbkdf2Async"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/hashes/src/pbkdf2.ts"],"sourcesContent":["import assert from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assert.hash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assert.number(c);\n  assert.number(dkLen);\n  assert.number(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, (i) => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n"]},"metadata":{},"sourceType":"script"}