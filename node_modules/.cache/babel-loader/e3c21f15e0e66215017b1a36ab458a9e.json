{"ast":null,"code":"import assert from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, u32 } from './utils.js'; // RFC 7914 Scrypt KDF\n// Left rotate for uint32\n\nconst rotl = (a, b) => a << b | a >>> 32 - b; // The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\n\n\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++],\n      y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++],\n      y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++],\n      y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++],\n      y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++],\n      y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++],\n      y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++],\n      y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++],\n      y15 = prev[pi++] ^ input[ii++]; // Save state to temporary variables (salsa)\n\n  let x00 = y00,\n      x01 = y01,\n      x02 = y02,\n      x03 = y03,\n      x04 = y04,\n      x05 = y05,\n      x06 = y06,\n      x07 = y07,\n      x08 = y08,\n      x09 = y09,\n      x10 = y10,\n      x11 = y11,\n      x12 = y12,\n      x13 = y13,\n      x14 = y14,\n      x15 = y15; // Main loop (salsa)\n\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0, 7);\n    x08 ^= rotl(x04 + x00 | 0, 9);\n    x12 ^= rotl(x08 + x04 | 0, 13);\n    x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0, 7);\n    x13 ^= rotl(x09 + x05 | 0, 9);\n    x01 ^= rotl(x13 + x09 | 0, 13);\n    x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0, 7);\n    x02 ^= rotl(x14 + x10 | 0, 9);\n    x06 ^= rotl(x02 + x14 | 0, 13);\n    x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0, 7);\n    x07 ^= rotl(x03 + x15 | 0, 9);\n    x11 ^= rotl(x07 + x03 | 0, 13);\n    x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0, 7);\n    x02 ^= rotl(x01 + x00 | 0, 9);\n    x03 ^= rotl(x02 + x01 | 0, 13);\n    x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0, 7);\n    x07 ^= rotl(x06 + x05 | 0, 9);\n    x04 ^= rotl(x07 + x06 | 0, 13);\n    x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0, 7);\n    x08 ^= rotl(x11 + x10 | 0, 9);\n    x09 ^= rotl(x08 + x11 | 0, 13);\n    x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0, 7);\n    x13 ^= rotl(x12 + x15 | 0, 9);\n    x14 ^= rotl(x13 + x12 | 0, 13);\n    x15 ^= rotl(x14 + x13 | 0, 18);\n  } // Write output (salsa)\n\n\n  out[oi++] = y00 + x00 | 0;\n  out[oi++] = y01 + x01 | 0;\n  out[oi++] = y02 + x02 | 0;\n  out[oi++] = y03 + x03 | 0;\n  out[oi++] = y04 + x04 | 0;\n  out[oi++] = y05 + x05 | 0;\n  out[oi++] = y06 + x06 | 0;\n  out[oi++] = y07 + x07 | 0;\n  out[oi++] = y08 + x08 | 0;\n  out[oi++] = y09 + x09 | 0;\n  out[oi++] = y10 + x10 | 0;\n  out[oi++] = y11 + x11 | 0;\n  out[oi++] = y12 + x12 | 0;\n  out[oi++] = y13 + x13 | 0;\n  out[oi++] = y14 + x14 | 0;\n  out[oi++] = y15 + x15 | 0;\n}\n\nfunction BlockMix(input, ii, out, oi, r) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n\n\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n\n    XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n} // Common prologue and epilogue for sync/async functions\n\n\nfunction scryptInit(password, salt, _opts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts({\n    dkLen: 32,\n    asyncTick: 10,\n    maxmem: 1024 ** 3 + 1024\n  }, _opts);\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    asyncTick,\n    maxmem,\n    onProgress\n  } = opts;\n  assert.number(N);\n  assert.number(r);\n  assert.number(p);\n  assert.number(dkLen);\n  assert.number(asyncTick);\n  assert.number(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function') throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n\n  if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n  }\n\n  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {\n    throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n  }\n\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n  }\n\n  const memUsed = blockSize * (N + p);\n\n  if (memUsed > maxmem) {\n    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n  } // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n\n\n  const B = pbkdf2(sha256, password, salt, {\n    c: 1,\n    dkLen: blockSize * p\n  });\n  const B32 = u32(B); // Re-used between parallel iterations. Array(iterations) of B\n\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n\n  let blockMixCb = () => {};\n\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p; // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n\n  return {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb,\n    asyncTick\n  };\n}\n\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n  const res = pbkdf2(sha256, password, B, {\n    c: 1,\n    dkLen\n  });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\n\n\nexport function scrypt(password, salt, opts) {\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb\n  } = scryptInit(password, salt, opts);\n\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n\n\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n\n      blockMixCb();\n    }\n\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n\n    blockMixCb();\n\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n\n\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n\n      blockMixCb();\n    }\n  }\n\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n/**\n * Scrypt KDF from RFC 7914.\n */\n\nexport async function scryptAsync(password, salt, opts) {\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb,\n    asyncTick\n  } = scryptInit(password, salt, opts);\n\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n\n\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, i => {\n      BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n\n    blockMixCb();\n    await asyncLoop(N, asyncTick, i => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n\n\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n\n      blockMixCb();\n    });\n  }\n\n  return scryptOutput(password, dkLen, B, V, tmp);\n}","map":{"version":3,"mappings":"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","names":["assert","sha256","pbkdf2","asyncLoop","checkOpts","u32","rotl","a","b","XorAndSalsa","prev","pi","input","ii","out","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","i","BlockMix","r","head","tail","scryptInit","password","salt","_opts","opts","dkLen","asyncTick","maxmem","N","p","onProgress","number","undefined","Error","blockSize","blockSize32","memUsed","B","c","B32","V","Uint8Array","tmp","blockMixCb","totalBlockMix","callbackPer","Math","max","floor","blockMixCnt","scryptOutput","res","fill","scrypt","Pi","pos","j","k","scryptAsync"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/hashes/src/scrypt.ts"],"sourcesContent":["import assert from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, Input, u32 } from './utils.js';\n\n// RFC 7914 Scrypt KDF\n\n// Left rotate for uint32\nconst rotl = (a: number, b: number) => (a << b) | (a >>> (32 - b));\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: Input, salt: Input, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  assert.number(N);\n  assert.number(r);\n  assert.number(p);\n  assert.number(dkLen);\n  assert.number(asyncTick);\n  assert.number(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n  if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error(\n      'Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32'\n    );\n  }\n  if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      `Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: Input,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, (i) => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, (i) => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n"]},"metadata":{},"sourceType":"module"}