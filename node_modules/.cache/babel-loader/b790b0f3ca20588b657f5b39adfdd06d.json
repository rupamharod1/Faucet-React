{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { padLeft, toBigInt } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { WORD_SIZE } from '../utils.js';\nimport { numberLimits } from './numbersLimits.js'; // eslint-disable-next-line no-bitwise\n\nconst mask = BigInt(1) << BigInt(256);\n\nfunction bigIntToUint8Array(value) {\n  let byteLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WORD_SIZE;\n  let hexValue;\n\n  if (value < 0) {\n    hexValue = (mask + value).toString(16);\n  } else {\n    hexValue = value.toString(16);\n  }\n\n  hexValue = padLeft(hexValue, byteLength * 2);\n  return utils.hexToUint8Array(hexValue);\n}\n\nfunction uint8ArrayToBigInt(value, max) {\n  const hexValue = utils.uint8ArrayToHexString(value);\n  const result = BigInt(hexValue);\n  if (result <= max) return result;\n  return result - mask;\n}\n\nexport function encodeNumber(param, input) {\n  let value;\n\n  try {\n    value = toBigInt(input);\n  } catch (e) {\n    throw new AbiError('provided input is not number value', {\n      type: param.type,\n      value: input,\n      name: param.name\n    });\n  }\n\n  const limit = numberLimits.get(param.type);\n\n  if (!limit) {\n    throw new AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n\n  if (value < limit.min) {\n    throw new AbiError('provided input is less then minimum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n\n  if (value > limit.max) {\n    throw new AbiError('provided input is greater then maximum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n\n  return {\n    dynamic: false,\n    encoded: bigIntToUint8Array(value)\n  };\n}\nexport function decodeNumber(param, bytes) {\n  if (bytes.length < WORD_SIZE) {\n    throw new AbiError('Not enough bytes left to decode', {\n      param,\n      bytesLeft: bytes.length\n    });\n  }\n\n  const boolBytes = bytes.subarray(0, WORD_SIZE);\n  const limit = numberLimits.get(param.type);\n\n  if (!limit) {\n    throw new AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n\n  const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n\n  if (numberResult < limit.min) {\n    throw new AbiError('decoded value is less then minimum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n\n  if (numberResult > limit.max) {\n    throw new AbiError('decoded value is greater then maximum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n\n  return {\n    result: numberResult,\n    encoded: bytes.subarray(WORD_SIZE),\n    consumed: WORD_SIZE\n  };\n}","map":{"version":3,"mappings":"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","names":["AbiError","padLeft","toBigInt","utils","WORD_SIZE","numberLimits","mask","BigInt","bigIntToUint8Array","value","byteLength","hexValue","toString","hexToUint8Array","uint8ArrayToBigInt","max","uint8ArrayToHexString","result","encodeNumber","param","input","e","type","name","limit","get","min","minimum","maximum","dynamic","encoded","decodeNumber","bytes","length","bytesLeft","boolBytes","subarray","numberResult","consumed"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/coders/base/number.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiError } from 'web3-errors';\nimport type { AbiParameter } from 'web3-types';\nimport { padLeft, toBigInt } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { numberLimits } from './numbersLimits.js';\n\n// eslint-disable-next-line no-bitwise\nconst mask = BigInt(1) << BigInt(256);\n\nfunction bigIntToUint8Array(value: bigint, byteLength = WORD_SIZE): Uint8Array {\n\tlet hexValue;\n\tif (value < 0) {\n\t\thexValue = (mask + value).toString(16);\n\t} else {\n\t\thexValue = value.toString(16);\n\t}\n\thexValue = padLeft(hexValue, byteLength * 2);\n\treturn utils.hexToUint8Array(hexValue);\n}\n\nfunction uint8ArrayToBigInt(value: Uint8Array, max: bigint): bigint {\n\tconst hexValue = utils.uint8ArrayToHexString(value);\n\tconst result = BigInt(hexValue);\n\tif (result <= max) return result;\n\treturn result - mask;\n}\n\nexport function encodeNumber(param: AbiParameter, input: unknown): EncoderResult {\n\tlet value;\n\ttry {\n\t\tvalue = toBigInt(input);\n\t} catch (e) {\n\t\tthrow new AbiError('provided input is not number value', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t});\n\t}\n\tconst limit = numberLimits.get(param.type);\n\tif (!limit) {\n\t\tthrow new AbiError('provided abi contains invalid number datatype', { type: param.type });\n\t}\n\tif (value < limit.min) {\n\t\tthrow new AbiError('provided input is less then minimum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t\tminimum: limit.min.toString(),\n\t\t});\n\t}\n\tif (value > limit.max) {\n\t\tthrow new AbiError('provided input is greater then maximum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t\tmaximum: limit.max.toString(),\n\t\t});\n\t}\n\treturn {\n\t\tdynamic: false,\n\t\tencoded: bigIntToUint8Array(value),\n\t};\n}\n\nexport function decodeNumber(param: AbiParameter, bytes: Uint8Array): DecoderResult<bigint> {\n\tif (bytes.length < WORD_SIZE) {\n\t\tthrow new AbiError('Not enough bytes left to decode', { param, bytesLeft: bytes.length });\n\t}\n\tconst boolBytes = bytes.subarray(0, WORD_SIZE);\n\tconst limit = numberLimits.get(param.type);\n\tif (!limit) {\n\t\tthrow new AbiError('provided abi contains invalid number datatype', { type: param.type });\n\t}\n\tconst numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n\n\tif (numberResult < limit.min) {\n\t\tthrow new AbiError('decoded value is less then minimum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: numberResult,\n\t\t\tname: param.name,\n\t\t\tminimum: limit.min.toString(),\n\t\t});\n\t}\n\tif (numberResult > limit.max) {\n\t\tthrow new AbiError('decoded value is greater then maximum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: numberResult,\n\t\t\tname: param.name,\n\t\t\tmaximum: limit.max.toString(),\n\t\t});\n\t}\n\treturn {\n\t\tresult: numberResult,\n\t\tencoded: bytes.subarray(WORD_SIZE),\n\t\tconsumed: WORD_SIZE,\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}