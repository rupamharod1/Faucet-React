{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isNullish, keccak256 } from 'web3-utils';\nimport { encodeParameters } from './coders/encode.js';\nconst TYPE_REGEX = /^\\w+/;\nconst ARRAY_REGEX = /^(.*)\\[([0-9]*?)]$/;\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n */\n\nconst getDependencies = function (typedData, type) {\n  let dependencies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const match = type.match(TYPE_REGEX);\n  const actualType = match[0];\n\n  if (dependencies.includes(actualType)) {\n    return dependencies;\n  }\n\n  if (!typedData.types[actualType]) {\n    return dependencies;\n  }\n\n  return [actualType, ...typedData.types[actualType].reduce((previous, _type) => [...previous, ...getDependencies(typedData, _type.type, previous).filter(dependency => !previous.includes(dependency))], [])];\n};\n/**\n * Encode a type to a string. All dependant types are alphabetically sorted.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {Options} [options]\n * @return {string}\n */\n\n\nconst encodeType = (typedData, type) => {\n  const [primary, ...dependencies] = getDependencies(typedData, type); // eslint-disable-next-line @typescript-eslint/require-array-sort-compare\n\n  const types = [primary, ...dependencies.sort()];\n  return types.map(dependency => // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  `${dependency}(${typedData.types[dependency].map(_type => `${_type.type} ${_type.name}`)})`).join('');\n};\n/**\n * Get a type string as hash.\n */\n\n\nconst getTypeHash = (typedData, type) => keccak256(encodeType(typedData, type));\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant\n * types are automatically encoded.\n */\n\n\nconst getStructHash = (typedData, type, data) => keccak256(encodeData(typedData, type, data));\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object. If `hash` is enabled, the message will be hashed\n * with Keccak256.\n */\n\n\nexport const getMessage = (typedData, hash) => {\n  const EIP_191_PREFIX = '1901';\n  const message = `0x${EIP_191_PREFIX}${getStructHash(typedData, 'EIP712Domain', typedData.domain).substring(2)}${getStructHash(typedData, typedData.primaryType, typedData.message).substring(2)}`;\n\n  if (hash) {\n    return keccak256(message);\n  }\n\n  return message;\n};\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\n\nconst encodeValue = (typedData, type, data) => {\n  const match = type.match(ARRAY_REGEX); // Checks for array types\n\n  if (match) {\n    const arrayType = match[1];\n    const length = Number(match[2]) || undefined;\n\n    if (!Array.isArray(data)) {\n      throw new Error('Cannot encode data: value is not of array type');\n    }\n\n    if (length && data.length !== length) {\n      throw new Error(`Cannot encode data: expected length of ${length}, but got ${data.length}`);\n    }\n\n    const encodedData = data.map(item => encodeValue(typedData, arrayType, item));\n    const types = encodedData.map(item => item[0]);\n    const values = encodedData.map(item => item[1]);\n    return ['bytes32', keccak256(encodeParameters(types, values))];\n  }\n\n  if (typedData.types[type]) {\n    return ['bytes32', getStructHash(typedData, type, data)];\n  } // Strings and arbitrary byte arrays are hashed to bytes32\n\n\n  if (type === 'string') {\n    return ['bytes32', keccak256(data)];\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', keccak256(data)];\n  }\n\n  return [type, data];\n};\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All\n * dependant types are automatically encoded.\n */\n\n\nconst encodeData = (typedData, type, data) => {\n  const [types, values] = typedData.types[type].reduce((_ref, field) => {\n    let [_types, _values] = _ref;\n\n    if (isNullish(data[field.name]) || isNullish(data[field.name])) {\n      throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n    }\n\n    const value = data[field.name];\n    const [_type, encodedValue] = encodeValue(typedData, field.type, value);\n    return [[..._types, _type], [..._values, encodedValue]];\n  }, [['bytes32'], [getTypeHash(typedData, type)]]);\n  return encodeParameters(types, values);\n};","map":{"version":3,"mappings":"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","names":["isNullish","keccak256","encodeParameters","TYPE_REGEX","ARRAY_REGEX","getDependencies","typedData","type","dependencies","match","actualType","includes","types","reduce","previous","_type","filter","dependency","encodeType","primary","sort","map","name","join","getTypeHash","getStructHash","data","encodeData","getMessage","hash","EIP_191_PREFIX","message","domain","substring","primaryType","encodeValue","arrayType","length","Number","undefined","Array","isArray","Error","encodedData","item","values","field","_types","_values","value","encodedValue"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/eip_712.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @note This code was taken from: https://github.com/Mrtenz/eip-712/tree/master\n */\n\nimport { Eip712TypedData } from 'web3-types';\nimport { isNullish, keccak256 } from 'web3-utils';\nimport { encodeParameters } from './coders/encode.js';\n\nconst TYPE_REGEX = /^\\w+/;\nconst ARRAY_REGEX = /^(.*)\\[([0-9]*?)]$/;\n\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n */\nconst getDependencies = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdependencies: string[] = [],\n): string[] => {\n\tconst match = type.match(TYPE_REGEX)!;\n\tconst actualType = match[0];\n\tif (dependencies.includes(actualType)) {\n\t\treturn dependencies;\n\t}\n\n\tif (!typedData.types[actualType]) {\n\t\treturn dependencies;\n\t}\n\n\treturn [\n\t\tactualType,\n\t\t...typedData.types[actualType].reduce<string[]>(\n\t\t\t(previous, _type) => [\n\t\t\t\t...previous,\n\t\t\t\t...getDependencies(typedData, _type.type, previous).filter(\n\t\t\t\t\tdependency => !previous.includes(dependency),\n\t\t\t\t),\n\t\t\t],\n\t\t\t[],\n\t\t),\n\t];\n};\n\n/**\n * Encode a type to a string. All dependant types are alphabetically sorted.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {Options} [options]\n * @return {string}\n */\nconst encodeType = (typedData: Eip712TypedData, type: string): string => {\n\tconst [primary, ...dependencies] = getDependencies(typedData, type);\n\t// eslint-disable-next-line @typescript-eslint/require-array-sort-compare\n\tconst types = [primary, ...dependencies.sort()];\n\n\treturn types\n\t\t.map(\n\t\t\tdependency =>\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t`${dependency}(${typedData.types[dependency].map(\n\t\t\t\t\t_type => `${_type.type} ${_type.name}`,\n\t\t\t\t)})`,\n\t\t)\n\t\t.join('');\n};\n\n/**\n * Get a type string as hash.\n */\nconst getTypeHash = (typedData: Eip712TypedData, type: string) =>\n\tkeccak256(encodeType(typedData, type));\n\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant\n * types are automatically encoded.\n */\nconst getStructHash = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: Record<string, unknown>,\n\t// eslint-disable-next-line  no-use-before-define\n): string => keccak256(encodeData(typedData, type, data));\n\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object. If `hash` is enabled, the message will be hashed\n * with Keccak256.\n */\nexport const getMessage = (typedData: Eip712TypedData, hash?: boolean): string => {\n\tconst EIP_191_PREFIX = '1901';\n\tconst message = `0x${EIP_191_PREFIX}${getStructHash(\n\t\ttypedData,\n\t\t'EIP712Domain',\n\t\ttypedData.domain as Record<string, unknown>,\n\t).substring(2)}${getStructHash(typedData, typedData.primaryType, typedData.message).substring(\n\t\t2,\n\t)}`;\n\n\tif (hash) {\n\t\treturn keccak256(message);\n\t}\n\n\treturn message;\n};\n\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\nconst encodeValue = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: unknown,\n): [string, string | Uint8Array | number] => {\n\tconst match = type.match(ARRAY_REGEX);\n\n\t// Checks for array types\n\tif (match) {\n\t\tconst arrayType = match[1];\n\t\tconst length = Number(match[2]) || undefined;\n\n\t\tif (!Array.isArray(data)) {\n\t\t\tthrow new Error('Cannot encode data: value is not of array type');\n\t\t}\n\n\t\tif (length && data.length !== length) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot encode data: expected length of ${length}, but got ${data.length}`,\n\t\t\t);\n\t\t}\n\n\t\tconst encodedData = data.map(item => encodeValue(typedData, arrayType, item));\n\t\tconst types = encodedData.map(item => item[0]);\n\t\tconst values = encodedData.map(item => item[1]);\n\n\t\treturn ['bytes32', keccak256(encodeParameters(types, values))];\n\t}\n\n\tif (typedData.types[type]) {\n\t\treturn ['bytes32', getStructHash(typedData, type, data as Record<string, unknown>)];\n\t}\n\n\t// Strings and arbitrary byte arrays are hashed to bytes32\n\tif (type === 'string') {\n\t\treturn ['bytes32', keccak256(data as string)];\n\t}\n\n\tif (type === 'bytes') {\n\t\treturn ['bytes32', keccak256(data as string)];\n\t}\n\n\treturn [type, data as string];\n};\n\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All\n * dependant types are automatically encoded.\n */\nconst encodeData = (\n\ttypedData: Eip712TypedData,\n\ttype: string,\n\tdata: Record<string, unknown>,\n): string => {\n\tconst [types, values] = typedData.types[type].reduce<[string[], unknown[]]>(\n\t\t([_types, _values], field) => {\n\t\t\tif (isNullish(data[field.name]) || isNullish(data[field.name])) {\n\t\t\t\tthrow new Error(`Cannot encode data: missing data for '${field.name}'`);\n\t\t\t}\n\n\t\t\tconst value = data[field.name];\n\t\t\tconst [_type, encodedValue] = encodeValue(typedData, field.type, value);\n\n\t\t\treturn [\n\t\t\t\t[..._types, _type],\n\t\t\t\t[..._values, encodedValue],\n\t\t\t];\n\t\t},\n\t\t[['bytes32'], [getTypeHash(typedData, type)]],\n\t);\n\n\treturn encodeParameters(types, values);\n};\n"]},"metadata":{},"sourceType":"module"}