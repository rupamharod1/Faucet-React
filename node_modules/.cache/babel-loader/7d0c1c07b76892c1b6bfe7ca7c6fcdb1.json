{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { uint8ArrayConcat } from 'web3-utils';\nimport { WORD_SIZE } from '../utils.js';\nimport { encodeNumber } from './number.js';\nexport function encodeDynamicParams(encodedParams) {\n  let staticSize = 0;\n  let dynamicSize = 0;\n  const staticParams = [];\n  const dynamicParams = []; // figure out static size\n\n  for (const encodedParam of encodedParams) {\n    if (encodedParam.dynamic) {\n      staticSize += WORD_SIZE;\n    } else {\n      staticSize += encodedParam.encoded.length;\n    }\n  }\n\n  for (const encodedParam of encodedParams) {\n    if (encodedParam.dynamic) {\n      staticParams.push(encodeNumber({\n        type: 'uint256',\n        name: ''\n      }, staticSize + dynamicSize));\n      dynamicParams.push(encodedParam);\n      dynamicSize += encodedParam.encoded.length;\n    } else {\n      staticParams.push(encodedParam);\n    }\n  }\n\n  return uint8ArrayConcat(...staticParams.map(p => p.encoded), ...dynamicParams.map(p => p.encoded));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,gBAAT,QAAiC,YAAjC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,OAAM,SAAUC,mBAAV,CAA8BC,aAA9B,EAAyE;EAC9E,IAAIC,UAAU,GAAG,CAAjB;EACA,IAAIC,WAAW,GAAG,CAAlB;EACA,MAAMC,YAAY,GAAoB,EAAtC;EACA,MAAMC,aAAa,GAAoB,EAAvC,CAJ8E,CAK9E;;EACA,KAAK,MAAMC,YAAX,IAA2BL,aAA3B,EAA0C;IACzC,IAAIK,YAAY,CAACC,OAAjB,EAA0B;MACzBL,UAAU,IAAIJ,SAAd;IACA,CAFD,MAEO;MACNI,UAAU,IAAII,YAAY,CAACE,OAAb,CAAqBC,MAAnC;IACA;EACD;;EAED,KAAK,MAAMH,YAAX,IAA2BL,aAA3B,EAA0C;IACzC,IAAIK,YAAY,CAACC,OAAjB,EAA0B;MACzBH,YAAY,CAACM,IAAb,CACCX,YAAY,CAAC;QAAEY,IAAI,EAAE,SAAR;QAAmBC,IAAI,EAAE;MAAzB,CAAD,EAAgCV,UAAU,GAAGC,WAA7C,CADb;MAGAE,aAAa,CAACK,IAAd,CAAmBJ,YAAnB;MACAH,WAAW,IAAIG,YAAY,CAACE,OAAb,CAAqBC,MAApC;IACA,CAND,MAMO;MACNL,YAAY,CAACM,IAAb,CAAkBJ,YAAlB;IACA;EACD;;EACD,OAAOT,gBAAgB,CACtB,GAAGO,YAAY,CAACS,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAACN,OAAxB,CADmB,EAEtB,GAAGH,aAAa,CAACQ,GAAd,CAAkBC,CAAC,IAAIA,CAAC,CAACN,OAAzB,CAFmB,CAAvB;AAIA","names":["uint8ArrayConcat","WORD_SIZE","encodeNumber","encodeDynamicParams","encodedParams","staticSize","dynamicSize","staticParams","dynamicParams","encodedParam","dynamic","encoded","length","push","type","name","map","p"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/coders/base/utils.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { uint8ArrayConcat } from 'web3-utils';\nimport { EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { encodeNumber } from './number.js';\n\nexport function encodeDynamicParams(encodedParams: ReadonlyArray<EncoderResult>): Uint8Array {\n\tlet staticSize = 0;\n\tlet dynamicSize = 0;\n\tconst staticParams: EncoderResult[] = [];\n\tconst dynamicParams: EncoderResult[] = [];\n\t// figure out static size\n\tfor (const encodedParam of encodedParams) {\n\t\tif (encodedParam.dynamic) {\n\t\t\tstaticSize += WORD_SIZE;\n\t\t} else {\n\t\t\tstaticSize += encodedParam.encoded.length;\n\t\t}\n\t}\n\n\tfor (const encodedParam of encodedParams) {\n\t\tif (encodedParam.dynamic) {\n\t\t\tstaticParams.push(\n\t\t\t\tencodeNumber({ type: 'uint256', name: '' }, staticSize + dynamicSize),\n\t\t\t);\n\t\t\tdynamicParams.push(encodedParam);\n\t\t\tdynamicSize += encodedParam.encoded.length;\n\t\t} else {\n\t\t\tstaticParams.push(encodedParam);\n\t\t}\n\t}\n\treturn uint8ArrayConcat(\n\t\t...staticParams.map(p => p.encoded),\n\t\t...dynamicParams.map(p => p.encoded),\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}