{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Web3EventEmitter = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nclass Web3EventEmitter {\n  constructor() {\n    this._emitter = new web3_utils_1.EventEmitter();\n  }\n\n  on(eventName, fn) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this._emitter.on(eventName, fn);\n  }\n\n  once(eventName, fn) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this._emitter.once(eventName, fn);\n  }\n\n  off(eventName, fn) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this._emitter.off(eventName, fn);\n  }\n\n  emit(eventName, params) {\n    this._emitter.emit(eventName, params);\n  }\n\n  listenerCount(eventName) {\n    return this._emitter.listenerCount(eventName);\n  }\n\n  listeners(eventName) {\n    return this._emitter.listeners(eventName);\n  }\n\n  eventNames() {\n    return this._emitter.eventNames();\n  }\n\n  removeAllListeners() {\n    return this._emitter.removeAllListeners();\n  }\n\n  setMaxListenerWarningThreshold(maxListenersWarningThreshold) {\n    this._emitter.setMaxListeners(maxListenersWarningThreshold);\n  }\n\n  getMaxListeners() {\n    return this._emitter.getMaxListeners();\n  }\n\n}\n\nexports.Web3EventEmitter = Web3EventEmitter;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAYA,MAAaA,gBAAb,CAA6B;EAA7BC;IACkB,gBAAW,IAAIC,yBAAJ,EAAX;EA0CjB;;EAxCOC,EAAE,CAA4BC,SAA5B,EAA0CC,EAA1C,EAAqE;IAC7E;IACA,KAAKC,QAAL,CAAcH,EAAd,CAAiBC,SAAjB,EAA4BC,EAA5B;EACA;;EAEME,IAAI,CAA4BH,SAA5B,EAA0CC,EAA1C,EAAqE;IAC/E;IACA,KAAKC,QAAL,CAAcC,IAAd,CAAmBH,SAAnB,EAA8BC,EAA9B;EACA;;EAEMG,GAAG,CAA4BJ,SAA5B,EAA0CC,EAA1C,EAAqE;IAC9E;IACA,KAAKC,QAAL,CAAcE,GAAd,CAAkBJ,SAAlB,EAA6BC,EAA7B;EACA;;EAEMI,IAAI,CAA4BL,SAA5B,EAA0CM,MAA1C,EAAsD;IAChE,KAAKJ,QAAL,CAAcG,IAAd,CAAmBL,SAAnB,EAA8BM,MAA9B;EACA;;EAEMC,aAAa,CAA4BP,SAA5B,EAAwC;IAC3D,OAAO,KAAKE,QAAL,CAAcK,aAAd,CAA4BP,SAA5B,CAAP;EACA;;EAEMQ,SAAS,CAA4BR,SAA5B,EAAwC;IACvD,OAAO,KAAKE,QAAL,CAAcM,SAAd,CAAwBR,SAAxB,CAAP;EACA;;EAEMS,UAAU;IAChB,OAAO,KAAKP,QAAL,CAAcO,UAAd,EAAP;EACA;;EAEMC,kBAAkB;IACxB,OAAO,KAAKR,QAAL,CAAcQ,kBAAd,EAAP;EACA;;EACMC,8BAA8B,CAACC,4BAAD,EAAqC;IACzE,KAAKV,QAAL,CAAcW,eAAd,CAA8BD,4BAA9B;EACA;;EACME,eAAe;IACrB,OAAO,KAAKZ,QAAL,CAAcY,eAAd,EAAP;EACA;;AA1C2B;;AAA7BC","names":["Web3EventEmitter","constructor","web3_utils_1","on","eventName","fn","_emitter","once","off","emit","params","listenerCount","listeners","eventNames","removeAllListeners","setMaxListenerWarningThreshold","maxListenersWarningThreshold","setMaxListeners","getMaxListeners","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-core/src/web3_event_emitter.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EventEmitter } from 'web3-utils';\n\nexport type Web3EventMap = Record<string, unknown>;\nexport type Web3EventKey<T extends Web3EventMap> = string & keyof T;\nexport type Web3EventCallback<T> = (params: T) => void | Promise<void>;\nexport interface Web3Emitter<T extends Web3EventMap> {\n\ton<K extends Web3EventKey<T>>(eventName: K, fn: Web3EventCallback<T[K]>): void;\n\tonce<K extends Web3EventKey<T>>(eventName: K, fn: Web3EventCallback<T[K]>): void;\n\toff<K extends Web3EventKey<T>>(eventName: K, fn: Web3EventCallback<T[K]>): void;\n\temit<K extends Web3EventKey<T>>(eventName: K, params: T[K]): void;\n}\n\nexport class Web3EventEmitter<T extends Web3EventMap> implements Web3Emitter<T> {\n\tprivate readonly _emitter = new EventEmitter();\n\n\tpublic on<K extends Web3EventKey<T>>(eventName: K, fn: Web3EventCallback<T[K]>) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\tthis._emitter.on(eventName, fn);\n\t}\n\n\tpublic once<K extends Web3EventKey<T>>(eventName: K, fn: Web3EventCallback<T[K]>) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\tthis._emitter.once(eventName, fn);\n\t}\n\n\tpublic off<K extends Web3EventKey<T>>(eventName: K, fn: Web3EventCallback<T[K]>) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\tthis._emitter.off(eventName, fn);\n\t}\n\n\tpublic emit<K extends Web3EventKey<T>>(eventName: K, params: T[K]) {\n\t\tthis._emitter.emit(eventName, params);\n\t}\n\n\tpublic listenerCount<K extends Web3EventKey<T>>(eventName: K) {\n\t\treturn this._emitter.listenerCount(eventName);\n\t}\n\n\tpublic listeners<K extends Web3EventKey<T>>(eventName: K) {\n\t\treturn this._emitter.listeners(eventName);\n\t}\n\n\tpublic eventNames() {\n\t\treturn this._emitter.eventNames();\n\t}\n\n\tpublic removeAllListeners() {\n\t\treturn this._emitter.removeAllListeners();\n\t}\n\tpublic setMaxListenerWarningThreshold(maxListenersWarningThreshold: number) {\n\t\tthis._emitter.setMaxListeners(maxListenersWarningThreshold);\n\t}\n\tpublic getMaxListeners() {\n\t\treturn this._emitter.getMaxListeners();\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}