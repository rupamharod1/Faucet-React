{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToUtf8, utf8ToBytes as ecUtf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { isAddress, isHex, isHexStrict, isInt, isNullish, utils, utils as validatorUtils, validator } from 'web3-validator';\nimport { HexProcessingError, InvalidAddressError, InvalidBooleanError, InvalidBytesError, InvalidNumberError, InvalidUnitError } from 'web3-errors'; // Ref: https://ethdocs.org/en/latest/ether.html\n// Note: this could be simplified using ** operator, but babel does not handle it well (https://github.com/babel/babel/issues/13109)\n\n/** @internal */\n\nexport const ethUnitMap = {\n  noether: BigInt(0),\n  wei: BigInt(1),\n  kwei: BigInt(1000),\n  Kwei: BigInt(1000),\n  babbage: BigInt(1000),\n  femtoether: BigInt(1000),\n  mwei: BigInt(1000000),\n  Mwei: BigInt(1000000),\n  lovelace: BigInt(1000000),\n  picoether: BigInt(1000000),\n  gwei: BigInt(1000000000),\n  Gwei: BigInt(1000000000),\n  shannon: BigInt(1000000000),\n  nanoether: BigInt(1000000000),\n  nano: BigInt(1000000000),\n  szabo: BigInt(1000000000000),\n  microether: BigInt(1000000000000),\n  micro: BigInt(1000000000000),\n  finney: BigInt(1000000000000000),\n  milliether: BigInt(1000000000000000),\n  milli: BigInt(1000000000000000),\n  ether: BigInt('1000000000000000000'),\n  kether: BigInt('1000000000000000000000'),\n  grand: BigInt('1000000000000000000000'),\n  mether: BigInt('1000000000000000000000000'),\n  gether: BigInt('1000000000000000000000000000'),\n  tether: BigInt('1000000000000000000000000000000')\n};\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\n\nexport const bytesToUint8Array = data => {\n  validator.validate(['bytes'], [data]);\n\n  if (data instanceof Uint8Array) {\n    return data;\n  }\n\n  if (Array.isArray(data)) {\n    return new Uint8Array(data);\n  }\n\n  if (typeof data === 'string') {\n    return validatorUtils.hexToUint8Array(data);\n  }\n\n  throw new InvalidBytesError(data);\n};\n/**\n * @internal\n */\n\nconst {\n  uint8ArrayToHexString\n} = validatorUtils;\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\n\nexport const bytesToHex = bytes => uint8ArrayToHexString(bytesToUint8Array(bytes));\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\n\nexport const hexToBytes = bytes => {\n  if (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n    return bytesToUint8Array(`0x${bytes}`);\n  }\n\n  return bytesToUint8Array(bytes);\n};\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\n\nexport const hexToNumber = value => {\n  validator.validate(['hex'], [value]); // To avoid duplicate code and circular dependency we will\n  // use `hexToNumber` implementation from `web3-validator`\n\n  return validatorUtils.hexToNumber(value);\n};\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\n\nexport const toDecimal = hexToNumber;\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\n\nexport const numberToHex = (value, hexstrict) => {\n  if (typeof value !== 'bigint') validator.validate(['int'], [value]); // To avoid duplicate code and circular dependency we will\n  // use `numberToHex` implementation from `web3-validator`\n\n  let updatedValue = validatorUtils.numberToHex(value);\n\n  if (hexstrict) {\n    if (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n      // To avoid duplicate a circular dependancy we will not be using the padLeft method\n      updatedValue = '0x0'.concat(updatedValue.slice(2));\n    } else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-')) updatedValue = '-0x0'.concat(updatedValue.slice(3));\n  }\n\n  return updatedValue;\n};\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\n\nexport const fromDecimal = numberToHex;\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\n\nexport const hexToNumberString = data => hexToNumber(data).toString();\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n *\n */\n\nexport const utf8ToHex = str => {\n  validator.validate(['string'], [str]); // To be compatible with 1.x trim null character\n  // eslint-disable-next-line no-control-regex\n\n  let strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, ''); // eslint-disable-next-line no-control-regex\n\n  strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n  return bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));\n};\n/**\n * @alias utf8ToHex\n */\n\nexport const fromUtf8 = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\n\nexport const stringToHex = utf8ToHex;\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\n\nexport const hexToUtf8 = str => bytesToUtf8(hexToBytes(str));\n/**\n * @alias hexToUtf8\n */\n\nexport const toUtf8 = input => {\n  if (typeof input === 'string') {\n    return hexToUtf8(input);\n  }\n\n  validator.validate(['bytes'], [input]);\n  return bytesToUtf8(input);\n};\nexport const utf8ToBytes = ecUtf8ToBytes;\n/**\n * @alias hexToUtf8\n */\n\nexport const hexToString = hexToUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\n\nexport const asciiToHex = str => {\n  validator.validate(['string'], [str]);\n  let hexString = '';\n\n  for (let i = 0; i < str.length; i += 1) {\n    const hexCharCode = str.charCodeAt(i).toString(16); // might need a leading 0\n\n    hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n  }\n\n  return `0x${hexString}`;\n};\n/**\n * @alias asciiToHex\n */\n\nexport const fromAscii = asciiToHex;\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\n\nexport const hexToAscii = str => {\n  const decoder = new TextDecoder('ascii');\n  return decoder.decode(hexToBytes(str));\n};\n/**\n * @alias hexToAscii\n */\n\nexport const toAscii = hexToAscii;\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\n\nexport const toHex = (value, returnType) => {\n  if (typeof value === 'string' && isAddress(value)) {\n    return returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n  }\n\n  if (typeof value === 'boolean') {\n    // eslint-disable-next-line no-nested-ternary\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n\n  if (typeof value === 'number') {\n    // eslint-disable-next-line no-nested-ternary\n    return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n  }\n\n  if (typeof value === 'bigint') {\n    return returnType ? 'bigint' : numberToHex(value);\n  }\n\n  if (typeof value === 'object' && !!value) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  }\n\n  if (typeof value === 'string') {\n    if (value.startsWith('-0x') || value.startsWith('-0X')) {\n      return returnType ? 'int256' : numberToHex(value);\n    }\n\n    if (isHexStrict(value)) {\n      return returnType ? 'bytes' : value;\n    }\n\n    if (isHex(value) && !isInt(value)) {\n      return returnType ? 'bytes' : `0x${value}`;\n    }\n\n    if (!Number.isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n\n  throw new HexProcessingError(value);\n};\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\n\nexport const toNumber = value => {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'bigint') {\n    return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER ? Number(value) : value;\n  }\n\n  if (typeof value === 'string' && isHexStrict(value)) {\n    return hexToNumber(value);\n  }\n\n  try {\n    return toNumber(BigInt(value));\n  } catch (_a) {\n    throw new InvalidNumberError(value);\n  }\n};\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\n\nexport const toBigInt = value => {\n  if (typeof value === 'number') {\n    return BigInt(value);\n  }\n\n  if (typeof value === 'bigint') {\n    return value;\n  } // isHex passes for dec, too\n\n\n  if (typeof value === 'string' && isHex(value)) {\n    if (value.startsWith('-')) {\n      return -BigInt(value.substring(1));\n    }\n\n    return BigInt(value);\n  }\n\n  throw new InvalidNumberError(value);\n};\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\n\nexport const fromWei = (number, unit) => {\n  const denomination = ethUnitMap[unit];\n\n  if (!denomination) {\n    throw new InvalidUnitError(unit);\n  } // value in wei would always be integer\n  // 13456789, 1234\n\n\n  const value = String(toNumber(number)); // count number of zeros in denomination\n  // 1000000 -> 6\n\n  const numberOfZerosInDenomination = denomination.toString().length - 1;\n\n  if (numberOfZerosInDenomination <= 0) {\n    return value.toString();\n  } // pad the value with required zeros\n  // 13456789 -> 13456789, 1234 -> 001234\n\n\n  const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0'); // get the integer part of value by counting number of zeros from start\n  // 13456789 -> '13'\n  // 001234 -> ''\n\n  const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination); // get the fraction part of value by counting number of zeros backward\n  // 13456789 -> '456789'\n  // 001234 -> '001234'\n\n  const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n\n  if (integer === '') {\n    return `0.${fraction}`;\n  }\n\n  if (fraction === '') {\n    return integer;\n  }\n\n  return `${integer}.${fraction}`;\n};\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\n\nexport const toWei = (number, unit) => {\n  validator.validate(['number'], [number]);\n  const denomination = ethUnitMap[unit];\n\n  if (!denomination) {\n    throw new InvalidUnitError(unit);\n  } // if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n  // to avoid `fraction` to be null use `concat` with empty string\n\n\n  const [integer, fraction] = String(typeof number === 'string' && !isHexStrict(number) ? number : toNumber(number)).split('.').concat(''); // join the value removing `.` from\n  // 24.56 -> 2456\n\n  const value = BigInt(`${integer}${fraction}`); // multiply value with denomination\n  // 2456 * 1000000 -> 2456000000\n\n  const updatedValue = value * denomination; // count number of zeros in denomination\n\n  const numberOfZerosInDenomination = denomination.toString().length - 1; // check which either `fraction` or `denomination` have lower number of zeros\n\n  const decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n\n  if (decimals === 0) {\n    return updatedValue.toString();\n  } // Add zeros to make length equal to required decimal points\n  // If string is larger than decimal points required then remove last zeros\n\n\n  return updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\n\nexport const toChecksumAddress = address => {\n  if (!isAddress(address, false)) {\n    throw new InvalidAddressError(address);\n  }\n\n  const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n  const hash = utils.uint8ArrayToHexString(keccak256(utf8ToBytes(lowerCaseAddress)));\n  if (isNullish(hash) || hash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470') return ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\n  let checksumAddress = '0x';\n  const addressHash = hash.replace(/^0x/i, '');\n\n  for (let i = 0; i < lowerCaseAddress.length; i += 1) {\n    // If ith character is 8 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += lowerCaseAddress[i].toUpperCase();\n    } else {\n      checksumAddress += lowerCaseAddress[i];\n    }\n  }\n\n  return checksumAddress;\n};\nexport const toBool = value => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (typeof value === 'number' && (value === 0 || value === 1)) {\n    return Boolean(value);\n  }\n\n  if (typeof value === 'bigint' && (value === BigInt(0) || value === BigInt(1))) {\n    return Boolean(value);\n  }\n\n  if (typeof value === 'string' && !isHexStrict(value) && (value === '1' || value === '0' || value === 'false' || value === 'true')) {\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    return Boolean(Number(value));\n  }\n\n  if (typeof value === 'string' && isHexStrict(value) && (value === '0x1' || value === '0x0')) {\n    return Boolean(toNumber(value));\n  }\n\n  throw new InvalidBooleanError(value);\n};","map":{"version":3,"mappings":"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","names":["keccak256","bytesToUtf8","utf8ToBytes","ecUtf8ToBytes","isAddress","isHex","isHexStrict","isInt","isNullish","utils","validatorUtils","validator","HexProcessingError","InvalidAddressError","InvalidBooleanError","InvalidBytesError","InvalidNumberError","InvalidUnitError","ethUnitMap","noether","BigInt","wei","kwei","Kwei","babbage","femtoether","mwei","Mwei","lovelace","picoether","gwei","Gwei","shannon","nanoether","nano","szabo","microether","micro","finney","milliether","milli","ether","kether","grand","mether","gether","tether","bytesToUint8Array","data","validate","Uint8Array","Array","isArray","hexToUint8Array","uint8ArrayToHexString","bytesToHex","bytes","hexToBytes","slice","toLowerCase","hexToNumber","value","toDecimal","numberToHex","hexstrict","updatedValue","startsWith","length","concat","fromDecimal","hexToNumberString","toString","utf8ToHex","str","strWithoutNullCharacter","replace","TextEncoder","encode","fromUtf8","stringToHex","hexToUtf8","toUtf8","input","hexToString","asciiToHex","hexString","i","hexCharCode","charCodeAt","fromAscii","hexToAscii","decoder","TextDecoder","decode","toAscii","toHex","returnType","JSON","stringify","Number","isFinite","toNumber","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","toBigInt","substring","fromWei","number","unit","denomination","String","numberOfZerosInDenomination","zeroPaddedValue","padStart","integer","fraction","toWei","split","decimals","Math","min","toChecksumAddress","address","lowerCaseAddress","hash","checksumAddress","addressHash","parseInt","toUpperCase","toBool","Boolean"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/converters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToUtf8, utf8ToBytes as ecUtf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { Address, Bytes, HexString, Numbers, ValueTypes } from 'web3-types';\nimport {\n\tisAddress,\n\tisHex,\n\tisHexStrict,\n\tisInt,\n\tisNullish,\n\tutils,\n\tutils as validatorUtils,\n\tvalidator,\n} from 'web3-validator';\n\nimport {\n\tHexProcessingError,\n\tInvalidAddressError,\n\tInvalidBooleanError,\n\tInvalidBytesError,\n\tInvalidNumberError,\n\tInvalidUnitError,\n} from 'web3-errors';\n\n// Ref: https://ethdocs.org/en/latest/ether.html\n// Note: this could be simplified using ** operator, but babel does not handle it well (https://github.com/babel/babel/issues/13109)\n/** @internal */\nexport const ethUnitMap = {\n\tnoether: BigInt(0),\n\twei: BigInt(1),\n\tkwei: BigInt(1000),\n\tKwei: BigInt(1000),\n\tbabbage: BigInt(1000),\n\tfemtoether: BigInt(1000),\n\tmwei: BigInt(1000000),\n\tMwei: BigInt(1000000),\n\tlovelace: BigInt(1000000),\n\tpicoether: BigInt(1000000),\n\tgwei: BigInt(1000000000),\n\tGwei: BigInt(1000000000),\n\tshannon: BigInt(1000000000),\n\tnanoether: BigInt(1000000000),\n\tnano: BigInt(1000000000),\n\tszabo: BigInt(1000000000000),\n\tmicroether: BigInt(1000000000000),\n\tmicro: BigInt(1000000000000),\n\tfinney: BigInt(1000000000000000),\n\tmilliether: BigInt(1000000000000000),\n\tmilli: BigInt(1000000000000000),\n\tether: BigInt('1000000000000000000'),\n\tkether: BigInt('1000000000000000000000'),\n\tgrand: BigInt('1000000000000000000000'),\n\tmether: BigInt('1000000000000000000000000'),\n\tgether: BigInt('1000000000000000000000000000'),\n\ttether: BigInt('1000000000000000000000000000000'),\n};\n\nexport type EtherUnits = keyof typeof ethUnitMap;\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\nexport const bytesToUint8Array = (data: Bytes): Uint8Array | never => {\n\tvalidator.validate(['bytes'], [data]);\n\n\tif (data instanceof Uint8Array) {\n\t\treturn data;\n\t}\n\n\tif (Array.isArray(data)) {\n\t\treturn new Uint8Array(data);\n\t}\n\n\tif (typeof data === 'string') {\n\t\treturn validatorUtils.hexToUint8Array(data);\n\t}\n\n\tthrow new InvalidBytesError(data);\n};\n\n/**\n * @internal\n */\nconst { uint8ArrayToHexString } = validatorUtils;\n\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\nexport const bytesToHex = (bytes: Bytes): HexString =>\n\tuint8ArrayToHexString(bytesToUint8Array(bytes));\n\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\nexport const hexToBytes = (bytes: HexString): Uint8Array => {\n\tif (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n\t\treturn bytesToUint8Array(`0x${bytes}`);\n\t}\n\treturn bytesToUint8Array(bytes);\n};\n\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\nexport const hexToNumber = (value: HexString): bigint | number => {\n\tvalidator.validate(['hex'], [value]);\n\n\t// To avoid duplicate code and circular dependency we will\n\t// use `hexToNumber` implementation from `web3-validator`\n\treturn validatorUtils.hexToNumber(value);\n};\n\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\nexport const toDecimal = hexToNumber;\n\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\nexport const numberToHex = (value: Numbers, hexstrict?: boolean): HexString => {\n\tif (typeof value !== 'bigint') validator.validate(['int'], [value]);\n\t// To avoid duplicate code and circular dependency we will\n\t// use `numberToHex` implementation from `web3-validator`\n\tlet updatedValue = validatorUtils.numberToHex(value);\n\tif (hexstrict) {\n\t\tif (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n\t\t\t// To avoid duplicate a circular dependancy we will not be using the padLeft method\n\t\t\tupdatedValue = '0x0'.concat(updatedValue.slice(2));\n\t\t} else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-'))\n\t\t\tupdatedValue = '-0x0'.concat(updatedValue.slice(3));\n\t}\n\treturn updatedValue;\n};\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\nexport const fromDecimal = numberToHex;\n\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\nexport const hexToNumberString = (data: HexString): string => hexToNumber(data).toString();\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n *\n */\nexport const utf8ToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\n\t// To be compatible with 1.x trim null character\n\t// eslint-disable-next-line no-control-regex\n\tlet strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, '');\n\t// eslint-disable-next-line no-control-regex\n\tstrWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n\n\treturn bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));\n};\n\n/**\n * @alias utf8ToHex\n */\n\nexport const fromUtf8 = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexport const stringToHex = utf8ToHex;\n\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToUtf8 = (str: HexString): string => bytesToUtf8(hexToBytes(str));\n\n/**\n * @alias hexToUtf8\n */\nexport const toUtf8 = (input: HexString | Uint8Array) => {\n\tif (typeof input === 'string') {\n\t\treturn hexToUtf8(input);\n\t}\n\tvalidator.validate(['bytes'], [input]);\n\treturn bytesToUtf8(input);\n};\n\nexport const utf8ToBytes = ecUtf8ToBytes;\n\n/**\n * @alias hexToUtf8\n */\nexport const hexToString = hexToUtf8;\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\nexport const asciiToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\tlet hexString = '';\n\tfor (let i = 0; i < str.length; i += 1) {\n\t\tconst hexCharCode = str.charCodeAt(i).toString(16);\n\t\t// might need a leading 0\n\t\thexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n\t}\n\treturn `0x${hexString}`;\n};\n\n/**\n * @alias asciiToHex\n */\nexport const fromAscii = asciiToHex;\n\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToAscii = (str: HexString): string => {\n\tconst decoder = new TextDecoder('ascii');\n\treturn decoder.decode(hexToBytes(str));\n};\n\n/**\n * @alias hexToAscii\n */\nexport const toAscii = hexToAscii;\n\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\nexport const toHex = (\n\tvalue: Numbers | Bytes | Address | boolean | object,\n\treturnType?: boolean,\n): HexString | ValueTypes => {\n\tif (typeof value === 'string' && isAddress(value)) {\n\t\treturn returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n\t}\n\n\tif (typeof value === 'boolean') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? 'bool' : value ? '0x01' : '0x00';\n\t}\n\n\tif (typeof value === 'number') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn returnType ? 'bigint' : numberToHex(value);\n\t}\n\n\tif (typeof value === 'object' && !!value) {\n\t\treturn returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n\t}\n\n\tif (typeof value === 'string') {\n\t\tif (value.startsWith('-0x') || value.startsWith('-0X')) {\n\t\t\treturn returnType ? 'int256' : numberToHex(value);\n\t\t}\n\n\t\tif (isHexStrict(value)) {\n\t\t\treturn returnType ? 'bytes' : value;\n\t\t}\n\t\tif (isHex(value) && !isInt(value)) {\n\t\t\treturn returnType ? 'bytes' : `0x${value}`;\n\t\t}\n\n\t\tif (!Number.isFinite(value)) {\n\t\t\treturn returnType ? 'string' : utf8ToHex(value);\n\t\t}\n\t}\n\n\tthrow new HexProcessingError(value);\n};\n\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\nexport const toNumber = (value: Numbers): number | bigint => {\n\tif (typeof value === 'number') {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER\n\t\t\t? Number(value)\n\t\t\t: value;\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value)) {\n\t\treturn hexToNumber(value);\n\t}\n\n\ttry {\n\t\treturn toNumber(BigInt(value));\n\t} catch {\n\t\tthrow new InvalidNumberError(value);\n\t}\n};\n\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\nexport const toBigInt = (value: unknown): bigint => {\n\tif (typeof value === 'number') {\n\t\treturn BigInt(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value;\n\t}\n\n\t// isHex passes for dec, too\n\tif (typeof value === 'string' && isHex(value)) {\n\t\tif (value.startsWith('-')) {\n\t\t\treturn -BigInt(value.substring(1));\n\t\t}\n\t\treturn BigInt(value);\n\t}\n\n\tthrow new InvalidNumberError(value);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\nexport const fromWei = (number: Numbers, unit: EtherUnits): string => {\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// value in wei would always be integer\n\t// 13456789, 1234\n\tconst value = String(toNumber(number));\n\n\t// count number of zeros in denomination\n\t// 1000000 -> 6\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\tif (numberOfZerosInDenomination <= 0) {\n\t\treturn value.toString();\n\t}\n\n\t// pad the value with required zeros\n\t// 13456789 -> 13456789, 1234 -> 001234\n\tconst zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');\n\n\t// get the integer part of value by counting number of zeros from start\n\t// 13456789 -> '13'\n\t// 001234 -> ''\n\tconst integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);\n\n\t// get the fraction part of value by counting number of zeros backward\n\t// 13456789 -> '456789'\n\t// 001234 -> '001234'\n\tconst fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n\n\tif (integer === '') {\n\t\treturn `0.${fraction}`;\n\t}\n\n\tif (fraction === '') {\n\t\treturn integer;\n\t}\n\n\treturn `${integer}.${fraction}`;\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\nexport const toWei = (number: Numbers, unit: EtherUnits): string => {\n\tvalidator.validate(['number'], [number]);\n\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n\t// to avoid `fraction` to be null use `concat` with empty string\n\tconst [integer, fraction] = String(\n\t\ttypeof number === 'string' && !isHexStrict(number) ? number : toNumber(number),\n\t)\n\t\t.split('.')\n\t\t.concat('');\n\n\t// join the value removing `.` from\n\t// 24.56 -> 2456\n\tconst value = BigInt(`${integer}${fraction}`);\n\n\t// multiply value with denomination\n\t// 2456 * 1000000 -> 2456000000\n\tconst updatedValue = value * denomination;\n\n\t// count number of zeros in denomination\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\t// check which either `fraction` or `denomination` have lower number of zeros\n\tconst decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n\n\tif (decimals === 0) {\n\t\treturn updatedValue.toString();\n\t}\n\n\t// Add zeros to make length equal to required decimal points\n\t// If string is larger than decimal points required then remove last zeros\n\treturn updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\n\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\nexport const toChecksumAddress = (address: Address): string => {\n\tif (!isAddress(address, false)) {\n\t\tthrow new InvalidAddressError(address);\n\t}\n\n\tconst lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n\n\tconst hash = utils.uint8ArrayToHexString(keccak256(utf8ToBytes(lowerCaseAddress)));\n\n\tif (\n\t\tisNullish(hash) ||\n\t\thash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\t)\n\t\treturn ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\n\tlet checksumAddress = '0x';\n\n\tconst addressHash = hash.replace(/^0x/i, '');\n\n\tfor (let i = 0; i < lowerCaseAddress.length; i += 1) {\n\t\t// If ith character is 8 to f then make it uppercase\n\t\tif (parseInt(addressHash[i], 16) > 7) {\n\t\t\tchecksumAddress += lowerCaseAddress[i].toUpperCase();\n\t\t} else {\n\t\t\tchecksumAddress += lowerCaseAddress[i];\n\t\t}\n\t}\n\treturn checksumAddress;\n};\n\nexport const toBool = (value: boolean | string | number | unknown): boolean => {\n\tif (typeof value === 'boolean') {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'number' && (value === 0 || value === 1)) {\n\t\treturn Boolean(value);\n\t}\n\n\tif (typeof value === 'bigint' && (value === BigInt(0) || value === BigInt(1))) {\n\t\treturn Boolean(value);\n\t}\n\n\tif (\n\t\ttypeof value === 'string' &&\n\t\t!isHexStrict(value) &&\n\t\t(value === '1' || value === '0' || value === 'false' || value === 'true')\n\t) {\n\t\tif (value === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tif (value === 'false') {\n\t\t\treturn false;\n\t\t}\n\t\treturn Boolean(Number(value));\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value) && (value === '0x1' || value === '0x0')) {\n\t\treturn Boolean(toNumber(value));\n\t}\n\n\tthrow new InvalidBooleanError(value);\n};\n"]},"metadata":{},"sourceType":"module"}