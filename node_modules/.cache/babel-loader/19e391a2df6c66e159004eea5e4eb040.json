{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBytes = exports.isUint8Array = void 0;\n\nconst utils_js_1 = require(\"../utils.js\");\n\nconst string_js_1 = require(\"./string.js\");\n/**\n * checks input if typeof data is valid Uint8Array input\n */\n\n\nconst isUint8Array = data => data instanceof Uint8Array;\n\nexports.isUint8Array = isUint8Array;\n\nconst isBytes = function (value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    abiType: 'bytes'\n  };\n\n  if (typeof value !== 'string' && !Array.isArray(value) && !(value instanceof Uint8Array)) {\n    return false;\n  } // isHexStrict also accepts - prefix which can not exists in bytes\n\n\n  if (typeof value === 'string' && (0, string_js_1.isHexStrict)(value) && value.startsWith('-')) {\n    return false;\n  }\n\n  if (typeof value === 'string' && !(0, string_js_1.isHexStrict)(value)) {\n    return false;\n  }\n\n  let valueToCheck;\n\n  if (typeof value === 'string') {\n    if (value.length % 2 !== 0) {\n      // odd length hex\n      return false;\n    }\n\n    valueToCheck = (0, utils_js_1.hexToUint8Array)(value);\n  } else if (Array.isArray(value)) {\n    if (value.some(d => d < 0 || d > 255 || !Number.isInteger(d))) {\n      return false;\n    }\n\n    valueToCheck = new Uint8Array(value);\n  } else {\n    valueToCheck = value;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.abiType) {\n    const {\n      baseTypeSize\n    } = (0, utils_js_1.parseBaseType)(options.abiType);\n    return baseTypeSize ? valueToCheck.length === baseTypeSize : true;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.size) {\n    return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);\n  }\n\n  return true;\n};\n\nexports.isBytes = isBytes;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AACA;AAEA;;;;;AAGO,MAAMA,YAAY,GAAIC,IAAD,IAA2BA,IAAI,YAAYC,UAAhE;;AAAMC,uBAAYH,YAAZ;;AAEN,MAAMI,OAAO,GAAG,UACtBC,KADsB,EAKnB;EAAA,IAHHC,OAGG,uEAH8E;IAChFC,OAAO,EAAE;EADuE,CAG9E;;EACH,IAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6B,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAA9B,IAAsD,EAAEA,KAAK,YAAYH,UAAnB,CAA1D,EAA0F;IACzF,OAAO,KAAP;EACA,CAHE,CAKH;;;EACA,IAAI,OAAOG,KAAP,KAAiB,QAAjB,IAA6B,6BAAYA,KAAZ,CAA7B,IAAmDA,KAAK,CAACK,UAAN,CAAiB,GAAjB,CAAvD,EAA8E;IAC7E,OAAO,KAAP;EACA;;EAED,IAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,CAAC,6BAAYA,KAAZ,CAAlC,EAAsD;IACrD,OAAO,KAAP;EACA;;EAED,IAAIM,YAAJ;;EAEA,IAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;IAC9B,IAAIA,KAAK,CAACO,MAAN,GAAe,CAAf,KAAqB,CAAzB,EAA4B;MAC3B;MACA,OAAO,KAAP;IACA;;IACDD,YAAY,GAAG,gCAAgBN,KAAhB,CAAf;EACA,CAND,MAMO,IAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;IAChC,IAAIA,KAAK,CAACQ,IAAN,CAAWC,CAAC,IAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,GAAb,IAAoB,CAACC,MAAM,CAACC,SAAP,CAAiBF,CAAjB,CAArC,CAAJ,EAA+D;MAC9D,OAAO,KAAP;IACA;;IACDH,YAAY,GAAG,IAAIT,UAAJ,CAAeG,KAAf,CAAf;EACA,CALM,MAKA;IACNM,YAAY,GAAGN,KAAf;EACA;;EAED,IAAIC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,OAAb,EAAsB;IACrB,MAAM;MAAEU;IAAF,IAAmB,8BAAcX,OAAO,CAACC,OAAtB,CAAzB;IAEA,OAAOU,YAAY,GAAGN,YAAY,CAACC,MAAb,KAAwBK,YAA3B,GAA0C,IAA7D;EACA;;EAED,IAAIX,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEY,IAAb,EAAmB;IAClB,OAAOP,YAAY,CAACC,MAAb,MAAwBN,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEY,IAAjC,CAAP;EACA;;EAED,OAAO,IAAP;AACA,CA/CM;;AAAMf,kBAAOC,OAAP","names":["isUint8Array","data","Uint8Array","exports","isBytes","value","options","abiType","Array","isArray","startsWith","valueToCheck","length","some","d","Number","isInteger","baseTypeSize","size"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-validator/src/validation/bytes.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ValidInputTypes } from '../types.js';\nimport { hexToUint8Array, parseBaseType } from '../utils.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * checks input if typeof data is valid Uint8Array input\n */\nexport const isUint8Array = (data: ValidInputTypes) => data instanceof Uint8Array;\n\nexport const isBytes = (\n\tvalue: ValidInputTypes | Uint8Array | number[],\n\toptions: { abiType: string; size?: never } | { size: number; abiType?: never } = {\n\t\tabiType: 'bytes',\n\t},\n) => {\n\tif (typeof value !== 'string' && !Array.isArray(value) && !(value instanceof Uint8Array)) {\n\t\treturn false;\n\t}\n\n\t// isHexStrict also accepts - prefix which can not exists in bytes\n\tif (typeof value === 'string' && isHexStrict(value) && value.startsWith('-')) {\n\t\treturn false;\n\t}\n\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn false;\n\t}\n\n\tlet valueToCheck: Uint8Array;\n\n\tif (typeof value === 'string') {\n\t\tif (value.length % 2 !== 0) {\n\t\t\t// odd length hex\n\t\t\treturn false;\n\t\t}\n\t\tvalueToCheck = hexToUint8Array(value);\n\t} else if (Array.isArray(value)) {\n\t\tif (value.some(d => d < 0 || d > 255 || !Number.isInteger(d))) {\n\t\t\treturn false;\n\t\t}\n\t\tvalueToCheck = new Uint8Array(value);\n\t} else {\n\t\tvalueToCheck = value;\n\t}\n\n\tif (options?.abiType) {\n\t\tconst { baseTypeSize } = parseBaseType(options.abiType);\n\n\t\treturn baseTypeSize ? valueToCheck.length === baseTypeSize : true;\n\t}\n\n\tif (options?.size) {\n\t\treturn valueToCheck.length === options?.size;\n\t}\n\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}