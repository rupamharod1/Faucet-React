{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = void 0;\n\nconst web3_eth_contract_1 = require(\"web3-eth-contract\");\n\nconst ENSRegistry_js_1 = require(\"./abi/ens/ENSRegistry.js\");\n\nconst PublicResolver_js_1 = require(\"./abi/ens/PublicResolver.js\");\n\nconst config_js_1 = require(\"./config.js\");\n\nconst utils_js_1 = require(\"./utils.js\");\n\nclass Registry {\n  constructor(context, customRegistryAddress) {\n    this.contract = new web3_eth_contract_1.Contract(ENSRegistry_js_1.ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : config_js_1.registryAddresses.main, context);\n    this.context = context;\n  }\n\n  getOwner(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = this.contract.methods.owner((0, utils_js_1.namehash)(name)).call();\n        return result;\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n\n  getTTL(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.contract.methods.ttl((0, utils_js_1.namehash)(name)).call();\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n\n  recordExists(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const promise = this.contract.methods.recordExists((0, utils_js_1.namehash)(name)).call();\n        return promise;\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.contract.methods.resolver((0, utils_js_1.namehash)(name)).call().then(address => {\n          // address type is unknown, not sure why\n          if (typeof address === 'string') {\n            const contract = new web3_eth_contract_1.Contract(PublicResolver_js_1.PublicResolverAbi, address, this.context); // TODO: set contract provider needs to be added when ens current provider\n\n            return contract;\n          }\n\n          throw new Error();\n        });\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n\n  get events() {\n    return this.contract.events;\n  }\n\n}\n\nexports.Registry = Registry;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;;AACA;;AACA;;AACA;;AAEA,MAAaA,QAAb,CAAqB;EAIpBC,YAAmBC,OAAnB,EAA+CC,qBAA/C,EAA8E;IAC7E,KAAKC,QAAL,GAAgB,IAAIC,4BAAJ,CACfC,+BADe,EAEfH,qBAAqB,SAArB,yBAAqB,WAArB,2BAAyBI,8BAAkBC,IAF5B,EAGfN,OAHe,CAAhB;IAMA,KAAKA,OAAL,GAAeA,OAAf;EACA;;EAEYO,QAAQ,CAACC,IAAD,EAAa;;MACjC,IAAI;QACH,MAAMC,MAAM,GAAG,KAAKP,QAAL,CAAcQ,OAAd,CAAsBC,KAAtB,CAA4B,yBAASH,IAAT,CAA5B,EAA4CI,IAA5C,EAAf;QAEA,OAAOH,MAAP;MACA,CAJD,CAIE,OAAOI,KAAP,EAAc;QACf,MAAM,IAAIC,KAAJ,EAAN,CADe,CACI;MACnB;IACD;EAAA;;EAEYC,MAAM,CAACP,IAAD,EAAa;;MAC/B,IAAI;QACH,OAAO,KAAKN,QAAL,CAAcQ,OAAd,CAAsBM,GAAtB,CAA0B,yBAASR,IAAT,CAA1B,EAA0CI,IAA1C,EAAP;MACA,CAFD,CAEE,OAAOC,KAAP,EAAc;QACf,MAAM,IAAIC,KAAJ,EAAN,CADe,CACI;MACnB;IACD;EAAA;;EAEYG,YAAY,CAACT,IAAD,EAAa;;MACrC,IAAI;QACH,MAAMU,OAAO,GAAG,KAAKhB,QAAL,CAAcQ,OAAd,CAAsBO,YAAtB,CAAmC,yBAAST,IAAT,CAAnC,EAAmDI,IAAnD,EAAhB;QAEA,OAAOM,OAAP;MACA,CAJD,CAIE,OAAOL,KAAP,EAAc;QACf,MAAM,IAAIC,KAAJ,EAAN,CADe,CACI;MACnB;IACD;EAAA;;EAEYK,WAAW,CAACX,IAAD,EAAa;;MACpC,IAAI;QACH,OAAO,KAAKN,QAAL,CAAcQ,OAAd,CACLU,QADK,CACI,yBAASZ,IAAT,CADJ,EAELI,IAFK,GAGLS,IAHK,CAGAC,OAAO,IAAG;UACf;UACA,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;YAChC,MAAMpB,QAAQ,GAAG,IAAIC,4BAAJ,CAAaoB,qCAAb,EAAgCD,OAAhC,EAAyC,KAAKtB,OAA9C,CAAjB,CADgC,CAEhC;;YACA,OAAOE,QAAP;UACA;;UACD,MAAM,IAAIY,KAAJ,EAAN;QACA,CAXK,CAAP;MAYA,CAbD,CAaE,OAAOD,KAAP,EAAc;QACf,MAAM,IAAIC,KAAJ,EAAN,CADe,CACI;MACnB;IACD;EAAA;;EAEgB,IAANU,MAAM;IAChB,OAAO,KAAKtB,QAAL,CAAcsB,MAArB;EACA;;AA/DmB;;AAArBC","names":["Registry","constructor","context","customRegistryAddress","contract","web3_eth_contract_1","ENSRegistry_js_1","config_js_1","main","getOwner","name","result","methods","owner","call","error","Error","getTTL","ttl","recordExists","promise","getResolver","resolver","then","address","PublicResolver_js_1","events","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-ens/src/registry.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContextObject } from 'web3-core';\nimport { Contract } from 'web3-eth-contract';\nimport { Address } from 'web3-types';\nimport { ENSRegistryAbi } from './abi/ens/ENSRegistry.js';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { registryAddresses } from './config.js';\nimport { namehash } from './utils.js';\n\nexport class Registry {\n\tprivate readonly contract: Contract<typeof ENSRegistryAbi>;\n\tprivate readonly context: Web3ContextObject;\n\n\tpublic constructor(context: Web3ContextObject, customRegistryAddress?: Address) {\n\t\tthis.contract = new Contract(\n\t\t\tENSRegistryAbi,\n\t\t\tcustomRegistryAddress ?? registryAddresses.main,\n\t\t\tcontext,\n\t\t);\n\n\t\tthis.context = context;\n\t}\n\n\tpublic async getOwner(name: string) {\n\t\ttry {\n\t\t\tconst result = this.contract.methods.owner(namehash(name)).call();\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async getTTL(name: string) {\n\t\ttry {\n\t\t\treturn this.contract.methods.ttl(namehash(name)).call();\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async recordExists(name: string) {\n\t\ttry {\n\t\t\tconst promise = this.contract.methods.recordExists(namehash(name)).call();\n\n\t\t\treturn promise;\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async getResolver(name: string) {\n\t\ttry {\n\t\t\treturn this.contract.methods\n\t\t\t\t.resolver(namehash(name))\n\t\t\t\t.call()\n\t\t\t\t.then(address => {\n\t\t\t\t\t// address type is unknown, not sure why\n\t\t\t\t\tif (typeof address === 'string') {\n\t\t\t\t\t\tconst contract = new Contract(PublicResolverAbi, address, this.context);\n\t\t\t\t\t\t// TODO: set contract provider needs to be added when ens current provider\n\t\t\t\t\t\treturn contract;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic get events() {\n\t\treturn this.contract.events;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}