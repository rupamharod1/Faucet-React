{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareTransactionForSigning = void 0;\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst validation_js_1 = require(\"../validation.js\");\n\nconst format_transaction_js_1 = require(\"./format_transaction.js\");\n\nconst transaction_builder_js_1 = require(\"./transaction_builder.js\");\n\nconst getEthereumjsTxDataFromTransaction = transaction => {\n  var _a, _b;\n\n  return {\n    nonce: transaction.nonce,\n    gasPrice: transaction.gasPrice,\n    gasLimit: (_a = transaction.gasLimit) !== null && _a !== void 0 ? _a : transaction.gas,\n    to: transaction.to,\n    value: transaction.value,\n    data: (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.input,\n    type: transaction.type,\n    chainId: transaction.chainId,\n    accessList: transaction.accessList,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  };\n};\n\nconst getEthereumjsTransactionOptions = (transaction, web3Context) => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n\n  const hasTransactionSigningOptions = !(0, web3_validator_1.isNullish)(transaction.chain) && !(0, web3_validator_1.isNullish)(transaction.hardfork) || !(0, web3_validator_1.isNullish)(transaction.common);\n  let common;\n\n  if (!hasTransactionSigningOptions) {\n    // if defaultcommon is specified, use that.\n    if (web3Context.defaultCommon) {\n      common = web3Context.defaultCommon;\n      if ((0, web3_validator_1.isNullish)(common.hardfork)) common.hardfork = (_a = transaction.hardfork) !== null && _a !== void 0 ? _a : web3Context.defaultHardfork;\n      if ((0, web3_validator_1.isNullish)(common.baseChain)) common.baseChain = web3Context.defaultChain;\n    } else {\n      common = web3_eth_accounts_1.Common.custom({\n        name: 'custom-network',\n        chainId: (0, web3_utils_1.toNumber)(transaction.chainId),\n        networkId: !(0, web3_validator_1.isNullish)(transaction.networkId) ? (0, web3_utils_1.toNumber)(transaction.networkId) : undefined,\n        defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork\n      }, {\n        baseChain: web3Context.defaultChain\n      });\n    }\n  } else {\n    const name = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : 'custom-network';\n    const chainId = (0, web3_utils_1.toNumber)((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);\n    const networkId = (0, web3_utils_1.toNumber)((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);\n    const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;\n    const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;\n\n    if (chainId && networkId && name) {\n      common = web3_eth_accounts_1.Common.custom({\n        name,\n        chainId,\n        networkId,\n        defaultHardfork\n      }, {\n        baseChain\n      });\n    }\n  }\n\n  return {\n    common\n  };\n};\n\nconst prepareTransactionForSigning = function (transaction, web3Context, privateKey) {\n  let fillGasPrice = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let fillGasLimit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const populatedTransaction = yield (0, transaction_builder_js_1.transactionBuilder)({\n      transaction,\n      web3Context,\n      privateKey,\n      fillGasPrice,\n      fillGasLimit\n    });\n    const formattedTransaction = (0, format_transaction_js_1.formatTransaction)(populatedTransaction, web3_types_1.ETH_DATA_FORMAT);\n    (0, validation_js_1.validateTransactionForSigning)(formattedTransaction);\n    return web3_eth_accounts_1.TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));\n  });\n};\n\nexports.prepareTransactionForSigning = prepareTransactionForSigning;","map":{"version":3,"mappings":"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","names":["getEthereumjsTxDataFromTransaction","transaction","nonce","gasPrice","gasLimit","_a","gas","to","value","data","_b","input","type","chainId","accessList","maxPriorityFeePerGas","maxFeePerGas","getEthereumjsTransactionOptions","web3Context","hasTransactionSigningOptions","chain","hardfork","common","defaultCommon","defaultHardfork","baseChain","defaultChain","web3_eth_accounts_1","custom","name","networkId","undefined","_c","customChain","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","prepareTransactionForSigning","privateKey","fillGasPrice","fillGasLimit","__awaiter","populatedTransaction","formattedTransaction","web3_types_1","fromTxData","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/prepare_transaction_for_signing.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tHexString,\n\tPopulatedUnsignedEip1559Transaction,\n\tPopulatedUnsignedEip2930Transaction,\n\tPopulatedUnsignedTransaction,\n\tTransaction,\n\tValidChains,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { toNumber } from 'web3-utils';\nimport { TransactionFactory, TxOptions, Common } from 'web3-eth-accounts';\nimport { isNullish } from 'web3-validator';\nimport { validateTransactionForSigning } from '../validation.js';\nimport { formatTransaction } from './format_transaction.js';\nimport { transactionBuilder } from './transaction_builder.js';\n\nconst getEthereumjsTxDataFromTransaction = (\n\ttransaction: FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>,\n) => ({\n\tnonce: transaction.nonce,\n\tgasPrice: transaction.gasPrice,\n\tgasLimit: transaction.gasLimit ?? transaction.gas,\n\tto: transaction.to,\n\tvalue: transaction.value,\n\tdata: transaction.data ?? transaction.input,\n\ttype: transaction.type,\n\tchainId: transaction.chainId,\n\taccessList: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip2930Transaction, typeof ETH_DATA_FORMAT>\n\t).accessList,\n\tmaxPriorityFeePerGas: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip1559Transaction, typeof ETH_DATA_FORMAT>\n\t).maxPriorityFeePerGas,\n\tmaxFeePerGas: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip1559Transaction, typeof ETH_DATA_FORMAT>\n\t).maxFeePerGas,\n});\n\nconst getEthereumjsTransactionOptions = (\n\ttransaction: FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst hasTransactionSigningOptions =\n\t\t(!isNullish(transaction.chain) && !isNullish(transaction.hardfork)) ||\n\t\t!isNullish(transaction.common);\n\n\tlet common;\n\tif (!hasTransactionSigningOptions) {\n\t\t// if defaultcommon is specified, use that.\n\t\tif (web3Context.defaultCommon) {\n\t\t\tcommon = web3Context.defaultCommon;\n\n\t\t\tif (isNullish(common.hardfork))\n\t\t\t\tcommon.hardfork = transaction.hardfork ?? web3Context.defaultHardfork;\n\t\t\tif (isNullish(common.baseChain))\n\t\t\t\tcommon.baseChain = web3Context.defaultChain as ValidChains;\n\t\t} else {\n\t\t\tcommon = Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-network',\n\t\t\t\t\tchainId: toNumber(transaction.chainId) as number,\n\t\t\t\t\tnetworkId: !isNullish(transaction.networkId)\n\t\t\t\t\t\t? (toNumber(transaction.networkId) as number)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tdefaultHardfork: transaction.hardfork ?? web3Context.defaultHardfork,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain: web3Context.defaultChain,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst name =\n\t\t\ttransaction?.common?.customChain?.name ?? transaction.chain ?? 'custom-network';\n\t\tconst chainId = toNumber(\n\t\t\ttransaction?.common?.customChain?.chainId ?? transaction?.chainId,\n\t\t) as number;\n\t\tconst networkId = toNumber(\n\t\t\ttransaction?.common?.customChain?.networkId ?? transaction?.networkId,\n\t\t) as number;\n\t\tconst defaultHardfork =\n\t\t\ttransaction?.common?.hardfork ?? transaction?.hardfork ?? web3Context.defaultHardfork;\n\t\tconst baseChain =\n\t\t\ttransaction.common?.baseChain ?? transaction.chain ?? web3Context.defaultChain;\n\n\t\tif (chainId && networkId && name) {\n\t\t\tcommon = Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tchainId,\n\t\t\t\t\tnetworkId,\n\t\t\t\t\tdefaultHardfork,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\treturn { common } as TxOptions;\n};\n\nexport const prepareTransactionForSigning = async (\n\ttransaction: Transaction,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tprivateKey?: HexString | Uint8Array,\n\tfillGasPrice = false,\n\tfillGasLimit = true,\n) => {\n\tconst populatedTransaction = (await transactionBuilder({\n\t\ttransaction,\n\t\tweb3Context,\n\t\tprivateKey,\n\t\tfillGasPrice,\n\t\tfillGasLimit,\n\t})) as unknown as PopulatedUnsignedTransaction;\n\tconst formattedTransaction = formatTransaction(\n\t\tpopulatedTransaction,\n\t\tETH_DATA_FORMAT,\n\t) as unknown as FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>;\n\tvalidateTransactionForSigning(\n\t\tformattedTransaction as unknown as FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\t);\n\n\treturn TransactionFactory.fromTxData(\n\t\tgetEthereumjsTxDataFromTransaction(formattedTransaction),\n\t\tgetEthereumjsTransactionOptions(formattedTransaction, web3Context),\n\t);\n};\n"]},"metadata":{},"sourceType":"script"}