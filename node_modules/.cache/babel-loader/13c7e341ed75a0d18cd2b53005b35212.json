{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncingSubscription = exports.NewHeadsSubscription = exports.NewPendingTransactionsSubscription = exports.LogsSubscription = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable-next-line max-classes-per-file */\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_core_1 = require(\"web3-core\");\n\nconst schemas_js_1 = require(\"./schemas.js\");\n/**\n * ## subscribe('logs')\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n *\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n *\n */\n\n\nclass LogsSubscription extends web3_core_1.Web3Subscription {\n  _buildSubscriptionParams() {\n    return ['logs', this.args];\n  }\n\n  formatSubscriptionResult(data) {\n    return (0, web3_utils_1.format)(schemas_js_1.logSchema, data, super.returnFormat);\n  }\n\n}\n\nexports.LogsSubscription = LogsSubscription;\n/**\n * ## subscribe('pendingTransactions')\n * Subscribes to incoming pending transactions.\n *\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n * @example\n * ```ts\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n * ```\n */\n\nclass NewPendingTransactionsSubscription extends web3_core_1.Web3Subscription {\n  // eslint-disable-next-line\n  _buildSubscriptionParams() {\n    return ['newPendingTransactions'];\n  }\n\n  formatSubscriptionResult(data) {\n    return (0, web3_utils_1.format)({\n      format: 'string'\n    }, data, super.returnFormat);\n  }\n\n}\n\nexports.NewPendingTransactionsSubscription = NewPendingTransactionsSubscription;\n/**\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\n *\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n *\n * The structure of a returned block header is {@link BlockHeaderOutput}:\n * @example\n * ```ts\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n *  'data',\n * console.log\n * );\n * >{\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n * miner: '0x0000000000000000000000000000000000000000',\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n * difficulty: 2n,\n * number: 21n,\n * gasLimit: 11738125n,\n * gasUsed: 830006n,\n * timestamp: 1678797237n,\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n * nonce: 0n\n * }\n * ```\n */\n\nclass NewHeadsSubscription extends web3_core_1.Web3Subscription {\n  // eslint-disable-next-line\n  _buildSubscriptionParams() {\n    return ['newHeads'];\n  }\n\n  formatSubscriptionResult(data) {\n    return (0, web3_utils_1.format)(schemas_js_1.blockHeaderSchema, data, super.returnFormat);\n  }\n\n}\n\nexports.NewHeadsSubscription = NewHeadsSubscription;\n/**\n * ## subscribe('syncing')\n *\n * Subscribe to syncing events. This will return `true` when the node is syncing and when itâ€™s finished syncing will return `false`, for the `changed` event.\n * @example\n * ```ts\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n * > `true` // when syncing\n *\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\n * > {\n *      startingBlock: 0,\n *      currentBlock: 0,\n *      highestBlock: 0,\n *      pulledStates: 0,\n *      knownStates: 0\n *   }\n * ```\n */\n\nclass SyncingSubscription extends web3_core_1.Web3Subscription {\n  // eslint-disable-next-line\n  _buildSubscriptionParams() {\n    return ['syncing'];\n  }\n\n  _processSubscriptionResult(data) {\n    if (typeof data === 'boolean') {\n      this.emit('changed', data);\n    } else {\n      const mappedData = Object.fromEntries(Object.entries(data.status).map(_ref => {\n        let [key, value] = _ref;\n        return [key.charAt(0).toLowerCase() + key.substring(1), value];\n      }));\n      this.emit('changed', data.syncing);\n      this.emit('data', (0, web3_utils_1.format)(schemas_js_1.syncSchema, mappedData, super.returnFormat));\n    }\n  }\n\n}\n\nexports.SyncingSubscription = SyncingSubscription;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAWA;;AACA;AAEA;;;;;;;;;;;;AAUA,MAAaA,gBAAb,SAAsCC,4BAAtC,CASC;EACUC,wBAAwB;IACjC,OAAO,CAAC,MAAD,EAAS,KAAKC,IAAd,CAAP;EACA;;EAESC,wBAAwB,CAACC,IAAD,EAAiB;IAClD,OAAO,yBAAOC,sBAAP,EAAkBD,IAAlB,EAAwB,MAAME,YAA9B,CAAP;EACA;;AAPD;;AATDC;AAmBA;;;;;;;;;;;AAUA,MAAaC,kCAAb,SAAwDR,4BAAxD,CAEE;EACD;EACUC,wBAAwB;IACjC,OAAO,CAAC,wBAAD,CAAP;EACA;;EAESE,wBAAwB,CAACC,IAAD,EAAa;IAC9C,OAAO,yBAAO;MAAEK,MAAM,EAAE;IAAV,CAAP,EAA6BL,IAA7B,EAAmC,MAAME,YAAzC,CAAP;EACA;;AARA;;AAFFC;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAaG,oBAAb,SAA0CV,4BAA1C,CAEE;EACD;EACUC,wBAAwB;IACjC,OAAO,CAAC,UAAD,CAAP;EACA;;EAESE,wBAAwB,CAACC,IAAD,EAAwB;IACzD,OAAO,yBAAOC,8BAAP,EAA0BD,IAA1B,EAAgC,MAAME,YAAtC,CAAP;EACA;;AARA;;AAFFC;AAaA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAaI,mBAAb,SAAyCX,4BAAzC,CAGE;EACD;EACUC,wBAAwB;IACjC,OAAO,CAAC,SAAD,CAAP;EACA;;EAEMW,0BAA0B,CAChCR,IADgC,EAMtB;IAEV,IAAI,OAAOA,IAAP,KAAgB,SAApB,EAA+B;MAC9B,KAAKS,IAAL,CAAU,SAAV,EAAqBT,IAArB;IACA,CAFD,MAEO;MACN,MAAMU,UAAU,GAAeC,MAAM,CAACC,WAAP,CAC9BD,MAAM,CAACE,OAAP,CAAeb,IAAI,CAACc,MAApB,EAA4BC,GAA5B,CAAgC;QAAA,IAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;QAAA,OAAkB,CACjDD,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BH,GAAG,CAACI,SAAJ,CAAc,CAAd,CADmB,EAEjDH,KAFiD,CAAlB;MAAA,CAAhC,CAD8B,CAA/B;MAOA,KAAKR,IAAL,CAAU,SAAV,EAAqBT,IAAI,CAACqB,OAA1B;MACA,KAAKZ,IAAL,CAAU,MAAV,EAAkB,yBAAOR,uBAAP,EAAmBS,UAAnB,EAA+B,MAAMR,YAArC,CAAlB;IACA;EACD;;AA3BA;;AAHFC","names":["LogsSubscription","web3_core_1","_buildSubscriptionParams","args","formatSubscriptionResult","data","schemas_js_1","returnFormat","exports","NewPendingTransactionsSubscription","format","NewHeadsSubscription","SyncingSubscription","_processSubscriptionResult","emit","mappedData","Object","fromEntries","entries","status","map","key","value","charAt","toLowerCase","substring","syncing"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/web3_subscriptions.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable-next-line max-classes-per-file */\nimport { format } from 'web3-utils';\n\nimport {\n\tSyncOutput,\n\tAddress,\n\tBlockNumberOrTag,\n\tHexString,\n\tTopic,\n\tBlockHeaderOutput,\n\tLogsOutput,\n} from 'web3-types';\nimport { Web3Subscription } from 'web3-core';\nimport { blockHeaderSchema, logSchema, syncSchema } from './schemas.js';\n\n/**\n * ## subscribe('logs')\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n *\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n *\n */\nexport class LogsSubscription extends Web3Subscription<\n\t{\n\t\tdata: LogsOutput;\n\t},\n\t{\n\t\treadonly fromBlock?: BlockNumberOrTag;\n\t\treadonly address?: Address | Address[];\n\t\treadonly topics?: Topic[];\n\t}\n> {\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['logs', this.args];\n\t}\n\n\tprotected formatSubscriptionResult(data: LogsOutput) {\n\t\treturn format(logSchema, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('pendingTransactions')\n * Subscribes to incoming pending transactions.\n *\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n * @example\n * ```ts\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n * ```\n */\nexport class NewPendingTransactionsSubscription extends Web3Subscription<{\n\tdata: HexString;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['newPendingTransactions'];\n\t}\n\n\tprotected formatSubscriptionResult(data: string) {\n\t\treturn format({ format: 'string' }, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\n *\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n *\n * The structure of a returned block header is {@link BlockHeaderOutput}:\n * @example\n * ```ts\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n *  'data',\n * console.log\n * );\n * >{\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n * miner: '0x0000000000000000000000000000000000000000',\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n * difficulty: 2n,\n * number: 21n,\n * gasLimit: 11738125n,\n * gasUsed: 830006n,\n * timestamp: 1678797237n,\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n * nonce: 0n\n * }\n * ```\n */\nexport class NewHeadsSubscription extends Web3Subscription<{\n\tdata: BlockHeaderOutput;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['newHeads'];\n\t}\n\n\tprotected formatSubscriptionResult(data: BlockHeaderOutput): BlockHeaderOutput {\n\t\treturn format(blockHeaderSchema, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('syncing')\n *\n * Subscribe to syncing events. This will return `true` when the node is syncing and when itâ€™s finished syncing will return `false`, for the `changed` event.\n * @example\n * ```ts\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n * > `true` // when syncing\n *\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\n * > {\n *      startingBlock: 0,\n *      currentBlock: 0,\n *      highestBlock: 0,\n *      pulledStates: 0,\n *      knownStates: 0\n *   }\n * ```\n */\nexport class SyncingSubscription extends Web3Subscription<{\n\tdata: SyncOutput;\n\tchanged: boolean;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['syncing'];\n\t}\n\n\tpublic _processSubscriptionResult(\n\t\tdata:\n\t\t\t| {\n\t\t\t\t\tsyncing: boolean;\n\t\t\t\t\tstatus: SyncOutput;\n\t\t\t  }\n\t\t\t| boolean,\n\t) {\n\t\tif (typeof data === 'boolean') {\n\t\t\tthis.emit('changed', data);\n\t\t} else {\n\t\t\tconst mappedData: SyncOutput = Object.fromEntries(\n\t\t\t\tObject.entries(data.status).map(([key, value]) => [\n\t\t\t\t\tkey.charAt(0).toLowerCase() + key.substring(1),\n\t\t\t\t\tvalue,\n\t\t\t\t]),\n\t\t\t) as SyncOutput;\n\n\t\t\tthis.emit('changed', data.syncing);\n\t\t\tthis.emit('data', format(syncSchema, mappedData, super.returnFormat));\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}