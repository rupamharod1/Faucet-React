{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeEventABI = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_eth_abi_1 = require(\"web3-eth-abi\");\n\nconst schemas_js_1 = require(\"../schemas.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst decodeEventABI = function (event, data, jsonInterface) {\n  let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3_types_1.DEFAULT_RETURN_FORMAT;\n\n  var _a, _b, _c, _d, _e;\n\n  let modifiedEvent = Object.assign({}, event);\n  const result = (0, web3_utils_1.format)(schemas_js_1.logSchema, data, returnFormat); // if allEvents get the right event\n\n  if ([constants_js_1.ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {\n    const matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);\n\n    if (matchedEvent) {\n      modifiedEvent = matchedEvent;\n    } else {\n      modifiedEvent = {\n        anonymous: true\n      };\n    }\n  } // create empty inputs if none are present (e.g. anonymous events on allEvents)\n\n\n  modifiedEvent.inputs = (_b = (_a = modifiedEvent.inputs) !== null && _a !== void 0 ? _a : event.inputs) !== null && _b !== void 0 ? _b : []; // Handle case where an event signature shadows the current ABI with non-identical\n  // arg indexing. If # of topics doesn't match, event is anon.\n\n  if (!modifiedEvent.anonymous) {\n    let indexedInputs = 0;\n    ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach(input => {\n      if (input.indexed) {\n        indexedInputs += 1;\n      }\n    });\n\n    if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) {\n      // checks if event is anonymous\n      modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), {\n        anonymous: true,\n        inputs: []\n      });\n    }\n  }\n\n  const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);\n  return Object.assign(Object.assign({}, result), {\n    returnValues: (0, web3_eth_abi_1.decodeLog)([...((_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : [])], data.data, argTopics),\n    event: modifiedEvent.name,\n    signature: modifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0] ? undefined : data.topics[0],\n    raw: {\n      data: data.data,\n      topics: data.topics\n    }\n  });\n};\n\nexports.decodeEventABI = decodeEventABI;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAEA;;AASA;;AAEA;;AACA;;AAEO,MAAMA,cAAc,GAAG,UAC7BC,KAD6B,EAE7BC,IAF6B,EAG7BC,aAH6B,EAKhB;EAAA,IADbC,YACa,uEADcC,kCACd;;;;EACb,IAAIC,aAAa,qBAAQL,KAAR,CAAjB;EAEA,MAAMM,MAAM,GAAG,yBAAOC,sBAAP,EAAkBN,IAAlB,EAAwBE,YAAxB,CAAf,CAHa,CAKb;;EACA,IAAI,CAACK,yBAAD,EAAa,WAAb,EAA0BC,QAA1B,CAAmCJ,aAAa,CAACK,IAAjD,CAAJ,EAA4D;IAC3D,MAAMC,YAAY,GAAGT,aAAa,CAACU,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACC,SAAF,KAAgBb,IAAI,CAACc,MAAL,CAAY,CAAZ,CAAxC,CAArB;;IACA,IAAIJ,YAAJ,EAAkB;MACjBN,aAAa,GAAGM,YAAhB;IACA,CAFD,MAEO;MACNN,aAAa,GAAG;QAAEW,SAAS,EAAE;MAAb,CAAhB;IAGA;EACD,CAfY,CAiBb;;;EACAX,aAAa,CAACY,MAAd,GAAuB,yBAAa,CAACA,MAAd,MAAoB,IAApB,IAAoBC,aAApB,GAAoBA,EAApB,GAAwBlB,KAAK,CAACiB,MAA9B,MAAoC,IAApC,IAAoCE,aAApC,GAAoCA,EAApC,GAAwC,EAA/D,CAlBa,CAoBb;EACA;;EACA,IAAI,CAACd,aAAa,CAACW,SAAnB,EAA8B;IAC7B,IAAII,aAAa,GAAG,CAApB;IACA,CAAC,mBAAa,CAACH,MAAd,MAAoB,IAApB,IAAoBI,aAApB,GAAoBA,EAApB,GAAwB,EAAzB,EAA6BC,OAA7B,CAAqCC,KAAK,IAAG;MAC5C,IAAIA,KAAK,CAACC,OAAV,EAAmB;QAClBJ,aAAa,IAAI,CAAjB;MACA;IACD,CAJD;;IAMA,IAAIA,aAAa,GAAG,CAAhB,KAAqBnB,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEc,MAA3B,KAAqC,KAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEA,MAAN,CAAaU,MAAb,MAAwBL,aAAa,GAAG,CAAjF,EAAoF;MACnF;MACAf,aAAa,mCACTA,aADS,GACI;QAChBW,SAAS,EAAE,IADK;QAEhBC,MAAM,EAAE;MAFQ,CADJ,CAAb;IAKA;EACD;;EAED,MAAMS,SAAS,GAAGrB,aAAa,CAACW,SAAd,GAA0Bf,IAAI,CAACc,MAA/B,GAAwC,CAAC,UAAI,CAACA,MAAL,MAAW,IAAX,IAAWY,aAAX,GAAWA,EAAX,GAAe,EAAhB,EAAoBC,KAApB,CAA0B,CAA1B,CAA1D;EAEA,uCACItB,MADJ,GACU;IACTuB,YAAY,EAAE,8BAAU,CAAC,IAAI,mBAAa,CAACZ,MAAd,MAAoB,IAApB,IAAoBa,aAApB,GAAoBA,EAApB,GAAwB,EAA5B,CAAD,CAAV,EAA6C7B,IAAI,CAACA,IAAlD,EAAwDyB,SAAxD,CADL;IAET1B,KAAK,EAAEK,aAAa,CAACK,IAFZ;IAGTI,SAAS,EACRT,aAAa,CAACW,SAAd,IAA2B,CAACf,IAAI,CAACc,MAAjC,IAA2Cd,IAAI,CAACc,MAAL,CAAYU,MAAZ,KAAuB,CAAlE,IAAuE,CAACxB,IAAI,CAACc,MAAL,CAAY,CAAZ,CAAxE,GACGgB,SADH,GAEG9B,IAAI,CAACc,MAAL,CAAY,CAAZ,CANK;IAQTiB,GAAG,EAAE;MACJ/B,IAAI,EAAEA,IAAI,CAACA,IADP;MAEJc,MAAM,EAAEd,IAAI,CAACc;IAFT;EARI,CADV;AAcA,CA7DM;;AAAMkB,yBAAclC,cAAd","names":["decodeEventABI","event","data","jsonInterface","returnFormat","web3_types_1","modifiedEvent","result","schemas_js_1","constants_js_1","includes","name","matchedEvent","find","j","signature","topics","anonymous","inputs","_a","_b","indexedInputs","_c","forEach","input","indexed","length","argTopics","_d","slice","returnValues","_e","undefined","raw","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/decoding.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format } from 'web3-utils';\n\nimport {\n\tAbiEventFragment,\n\tLogsInput,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEventLog,\n\tContractAbiWithSignature,\n} from 'web3-types';\n\nimport { decodeLog } from 'web3-eth-abi';\n\nimport { logSchema } from '../schemas.js';\nimport { ALL_EVENTS } from '../constants.js';\n\nexport const decodeEventABI = (\n\tevent: AbiEventFragment & { signature: string },\n\tdata: LogsInput,\n\tjsonInterface: ContractAbiWithSignature,\n\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n): EventLog => {\n\tlet modifiedEvent = { ...event };\n\n\tconst result = format(logSchema, data, returnFormat);\n\n\t// if allEvents get the right event\n\tif ([ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {\n\t\tconst matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);\n\t\tif (matchedEvent) {\n\t\t\tmodifiedEvent = matchedEvent as AbiEventFragment & { signature: string };\n\t\t} else {\n\t\t\tmodifiedEvent = { anonymous: true } as unknown as AbiEventFragment & {\n\t\t\t\tsignature: string;\n\t\t\t};\n\t\t}\n\t}\n\n\t// create empty inputs if none are present (e.g. anonymous events on allEvents)\n\tmodifiedEvent.inputs = modifiedEvent.inputs ?? event.inputs ?? [];\n\n\t// Handle case where an event signature shadows the current ABI with non-identical\n\t// arg indexing. If # of topics doesn't match, event is anon.\n\tif (!modifiedEvent.anonymous) {\n\t\tlet indexedInputs = 0;\n\t\t(modifiedEvent.inputs ?? []).forEach(input => {\n\t\t\tif (input.indexed) {\n\t\t\t\tindexedInputs += 1;\n\t\t\t}\n\t\t});\n\n\t\tif (indexedInputs > 0 && data?.topics && data?.topics.length !== indexedInputs + 1) {\n\t\t\t// checks if event is anonymous\n\t\t\tmodifiedEvent = {\n\t\t\t\t...modifiedEvent,\n\t\t\t\tanonymous: true,\n\t\t\t\tinputs: [],\n\t\t\t};\n\t\t}\n\t}\n\n\tconst argTopics = modifiedEvent.anonymous ? data.topics : (data.topics ?? []).slice(1);\n\n\treturn {\n\t\t...result,\n\t\treturnValues: decodeLog([...(modifiedEvent.inputs ?? [])], data.data, argTopics),\n\t\tevent: modifiedEvent.name,\n\t\tsignature:\n\t\t\tmodifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0]\n\t\t\t\t? undefined\n\t\t\t\t: data.topics[0],\n\n\t\traw: {\n\t\t\tdata: data.data,\n\t\t\ttopics: data.topics,\n\t\t},\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}