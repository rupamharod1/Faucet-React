{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\nimport { ERR_INVALID_BYTES, ERR_INVALID_NUMBER, ERR_INVALID_ADDRESS, ERR_INVALID_BLOCK, ERR_INVALID_BOOLEAN, ERR_INVALID_HEX, ERR_INVALID_LARGE_VALUE, ERR_INVALID_NIBBLE_WIDTH, ERR_INVALID_SIZE, ERR_INVALID_STRING, ERR_INVALID_TYPE, ERR_INVALID_TYPE_ABI, ERR_INVALID_UNIT, ERR_INVALID_UNSIGNED_INTEGER } from '../error_codes.js';\nimport { InvalidValueError } from '../web3_error_base.js';\nexport class InvalidBytesError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'can not parse as byte data');\n    this.code = ERR_INVALID_BYTES;\n  }\n\n}\nexport class InvalidNumberError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'can not parse as number data');\n    this.code = ERR_INVALID_NUMBER;\n  }\n\n}\nexport class InvalidAddressError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid ethereum address');\n    this.code = ERR_INVALID_ADDRESS;\n  }\n\n}\nexport class InvalidStringError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'not a valid string');\n    this.code = ERR_INVALID_STRING;\n  }\n\n}\nexport class InvalidUnitError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid unit');\n    this.code = ERR_INVALID_UNIT;\n  }\n\n}\nexport class HexProcessingError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'can not be converted to hex');\n    this.code = ERR_INVALID_HEX;\n  }\n\n}\nexport class NibbleWidthError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'value greater than the nibble width');\n    this.code = ERR_INVALID_NIBBLE_WIDTH;\n  }\n\n}\nexport class InvalidTypeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid type, type not supported');\n    this.code = ERR_INVALID_TYPE;\n  }\n\n}\nexport class InvalidBooleanError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'not a valid boolean.');\n    this.code = ERR_INVALID_BOOLEAN;\n  }\n\n}\nexport class InvalidUnsignedIntegerError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'not a valid unsigned integer.');\n    this.code = ERR_INVALID_UNSIGNED_INTEGER;\n  }\n\n}\nexport class InvalidSizeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid size given.');\n    this.code = ERR_INVALID_SIZE;\n  }\n\n}\nexport class InvalidLargeValueError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'value is larger than size.');\n    this.code = ERR_INVALID_LARGE_VALUE;\n  }\n\n}\nexport class InvalidBlockError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid string given');\n    this.code = ERR_INVALID_BLOCK;\n  }\n\n}\nexport class InvalidTypeAbiInputError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'components found but type is not tuple');\n    this.code = ERR_INVALID_TYPE_ABI;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ERR_INVALID_BYTES","ERR_INVALID_NUMBER","ERR_INVALID_ADDRESS","ERR_INVALID_BLOCK","ERR_INVALID_BOOLEAN","ERR_INVALID_HEX","ERR_INVALID_LARGE_VALUE","ERR_INVALID_NIBBLE_WIDTH","ERR_INVALID_SIZE","ERR_INVALID_STRING","ERR_INVALID_TYPE","ERR_INVALID_TYPE_ABI","ERR_INVALID_UNIT","ERR_INVALID_UNSIGNED_INTEGER","InvalidValueError","InvalidBytesError","constructor","value","InvalidNumberError","InvalidAddressError","InvalidStringError","InvalidUnitError","HexProcessingError","NibbleWidthError","InvalidTypeError","InvalidBooleanError","InvalidUnsignedIntegerError","InvalidSizeError","InvalidLargeValueError","InvalidBlockError","InvalidTypeAbiInputError"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-errors/src/errors/utils_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n\tERR_INVALID_BYTES,\n\tERR_INVALID_NUMBER,\n\tERR_INVALID_ADDRESS,\n\tERR_INVALID_BLOCK,\n\tERR_INVALID_BOOLEAN,\n\tERR_INVALID_HEX,\n\tERR_INVALID_LARGE_VALUE,\n\tERR_INVALID_NIBBLE_WIDTH,\n\tERR_INVALID_SIZE,\n\tERR_INVALID_STRING,\n\tERR_INVALID_TYPE,\n\tERR_INVALID_TYPE_ABI,\n\tERR_INVALID_UNIT,\n\tERR_INVALID_UNSIGNED_INTEGER,\n} from '../error_codes.js';\nimport { InvalidValueError } from '../web3_error_base.js';\n\nexport class InvalidBytesError extends InvalidValueError {\n\tpublic code = ERR_INVALID_BYTES;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'can not parse as byte data');\n\t}\n}\n\nexport class InvalidNumberError extends InvalidValueError {\n\tpublic code = ERR_INVALID_NUMBER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'can not parse as number data');\n\t}\n}\n\nexport class InvalidAddressError extends InvalidValueError {\n\tpublic code = ERR_INVALID_ADDRESS;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid ethereum address');\n\t}\n}\n\nexport class InvalidStringError extends InvalidValueError {\n\tpublic code = ERR_INVALID_STRING;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'not a valid string');\n\t}\n}\n\nexport class InvalidUnitError extends InvalidValueError {\n\tpublic code = ERR_INVALID_UNIT;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid unit');\n\t}\n}\n\nexport class HexProcessingError extends InvalidValueError {\n\tpublic code = ERR_INVALID_HEX;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'can not be converted to hex');\n\t}\n}\n\nexport class NibbleWidthError extends InvalidValueError {\n\tpublic code = ERR_INVALID_NIBBLE_WIDTH;\n\n\tpublic constructor(value: string) {\n\t\tsuper(value, 'value greater than the nibble width');\n\t}\n}\n\nexport class InvalidTypeError extends InvalidValueError {\n\tpublic code = ERR_INVALID_TYPE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid type, type not supported');\n\t}\n}\n\nexport class InvalidBooleanError extends InvalidValueError {\n\tpublic code = ERR_INVALID_BOOLEAN;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'not a valid boolean.');\n\t}\n}\n\nexport class InvalidUnsignedIntegerError extends InvalidValueError {\n\tpublic code = ERR_INVALID_UNSIGNED_INTEGER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'not a valid unsigned integer.');\n\t}\n}\n\nexport class InvalidSizeError extends InvalidValueError {\n\tpublic code = ERR_INVALID_SIZE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid size given.');\n\t}\n}\n\nexport class InvalidLargeValueError extends InvalidValueError {\n\tpublic code = ERR_INVALID_LARGE_VALUE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'value is larger than size.');\n\t}\n}\n\nexport class InvalidBlockError extends InvalidValueError {\n\tpublic code = ERR_INVALID_BLOCK;\n\n\tpublic constructor(value: string) {\n\t\tsuper(value, 'invalid string given');\n\t}\n}\n\nexport class InvalidTypeAbiInputError extends InvalidValueError {\n\tpublic code = ERR_INVALID_TYPE_ABI;\n\n\tpublic constructor(value: string) {\n\t\tsuper(value, 'components found but type is not tuple');\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}