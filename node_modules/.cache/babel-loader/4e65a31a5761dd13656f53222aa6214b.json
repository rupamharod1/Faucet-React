{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { format, toHex } from 'web3-utils';\nimport { HardforksOrdered, ETH_DATA_FORMAT } from 'web3-types';\nimport { Web3ValidatorError, isNullish, validator } from 'web3-validator';\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors'; // undefined is treated as null for JSON schema validator\n\nconst transactionType0x0Schema = {\n  type: 'object',\n  properties: {\n    accessList: {\n      type: 'null'\n    },\n    maxFeePerGas: {\n      type: 'null'\n    },\n    maxPriorityFeePerGas: {\n      type: 'null'\n    }\n  }\n};\nconst transactionType0x1Schema = {\n  type: 'object',\n  properties: {\n    maxFeePerGas: {\n      type: 'null'\n    },\n    maxPriorityFeePerGas: {\n      type: 'null'\n    }\n  }\n};\nconst transactionType0x2Schema = {\n  type: 'object',\n  properties: {\n    gasPrice: {\n      type: 'null'\n    }\n  }\n};\n\nconst validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {\n  try {\n    validator.validateJSONSchema(txSchema, tx);\n  } catch (error) {\n    if (error instanceof Web3ValidatorError) // Erroneously reported error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      throw new InvalidPropertiesForTransactionTypeError(error.errors, txType);\n    throw error;\n  }\n};\n\nexport const defaultTransactionTypeParser = transaction => {\n  var _a, _b;\n\n  const tx = transaction;\n\n  if (!isNullish(tx.type)) {\n    let txSchema;\n\n    switch (tx.type) {\n      case '0x0':\n        txSchema = transactionType0x0Schema;\n        break;\n\n      case '0x1':\n        txSchema = transactionType0x1Schema;\n        break;\n\n      case '0x2':\n        txSchema = transactionType0x2Schema;\n        break;\n\n      default:\n        return format({\n          format: 'uint'\n        }, tx.type, ETH_DATA_FORMAT);\n    }\n\n    validateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n    return format({\n      format: 'uint'\n    }, tx.type, ETH_DATA_FORMAT);\n  }\n\n  if (!isNullish(tx.maxFeePerGas) || !isNullish(tx.maxPriorityFeePerGas)) {\n    validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n    return '0x2';\n  }\n\n  if (!isNullish(tx.accessList)) {\n    validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n    return '0x1';\n  }\n\n  const givenHardfork = (_a = tx.hardfork) !== null && _a !== void 0 ? _a : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;\n\n  if (!isNullish(givenHardfork)) {\n    const hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork); // givenHardfork is London or later, so EIP-2718 is supported\n\n    if (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london')) return !isNullish(tx.gasPrice) ? '0x0' : '0x2'; // givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n\n    if (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin')) return '0x0';\n  } // gasprice is defined\n\n\n  if (!isNullish(tx.gasPrice)) {\n    validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n    return '0x0';\n  } // no transaction type can be inferred from properties, use default transaction type\n\n\n  return undefined;\n};\nexport const detectTransactionType = (transaction, web3Context) => {\n  var _a;\n\n  return ((_a = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a !== void 0 ? _a : defaultTransactionTypeParser)(transaction);\n};\nexport const detectRawTransactionType = transaction => transaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);","map":{"version":3,"mappings":"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","names":["format","toHex","HardforksOrdered","ETH_DATA_FORMAT","Web3ValidatorError","isNullish","validator","InvalidPropertiesForTransactionTypeError","transactionType0x0Schema","type","properties","accessList","maxFeePerGas","maxPriorityFeePerGas","transactionType0x1Schema","transactionType0x2Schema","gasPrice","validateTxTypeAndHandleErrors","txSchema","tx","txType","validateJSONSchema","error","errors","defaultTransactionTypeParser","transaction","givenHardfork","hardfork","_a","common","_b","hardforkIndex","Object","keys","indexOf","undefined","detectTransactionType","web3Context","transactionTypeParser","detectRawTransactionType"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/detect_transaction_type.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format, toHex } from 'web3-utils';\nimport { TransactionTypeParser, Web3Context } from 'web3-core';\nimport { EthExecutionAPI, HardforksOrdered, Transaction, ETH_DATA_FORMAT } from 'web3-types';\nimport { Web3ValidatorError, isNullish, validator } from 'web3-validator';\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors';\n\nimport { InternalTransaction } from '../types.js';\n\n// undefined is treated as null for JSON schema validator\nconst transactionType0x0Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\taccessList: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\nconst transactionType0x1Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\tmaxFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\nconst transactionType0x2Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\tgasPrice: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\n\nconst validateTxTypeAndHandleErrors = (\n\ttxSchema: object,\n\ttx: Transaction,\n\ttxType: '0x0' | '0x1' | '0x2',\n) => {\n\ttry {\n\t\tvalidator.validateJSONSchema(txSchema, tx);\n\t} catch (error) {\n\t\tif (error instanceof Web3ValidatorError)\n\t\t\t// Erroneously reported error\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\tthrow new InvalidPropertiesForTransactionTypeError(error.errors, txType);\n\n\t\tthrow error;\n\t}\n};\n\nexport const defaultTransactionTypeParser: TransactionTypeParser = (\n\ttransaction\n) => {\n\tconst tx = transaction as unknown as Transaction;\n\tif (!isNullish(tx.type)) {\n\t\tlet txSchema;\n\t\tswitch (tx.type) {\n\t\t\tcase '0x0':\n\t\t\t\ttxSchema = transactionType0x0Schema;\n\t\t\t\tbreak;\n\t\t\tcase '0x1':\n\t\t\t\ttxSchema = transactionType0x1Schema;\n\t\t\t\tbreak;\n\t\t\tcase '0x2':\n\t\t\t\ttxSchema = transactionType0x2Schema;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\n\t\t}\n\n\t\tvalidateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n\n\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\n\t}\n\n\tif (!isNullish(tx.maxFeePerGas) || !isNullish(tx.maxPriorityFeePerGas)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n\t\treturn '0x2';\n\t}\n\n\tif (!isNullish(tx.accessList)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n\t\treturn '0x1';\n\t}\n\n\tconst givenHardfork = tx.hardfork ?? tx.common?.hardfork;\n\n\tif (!isNullish(givenHardfork)) {\n\t\tconst hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);\n\n\t\t// givenHardfork is London or later, so EIP-2718 is supported\n\t\tif (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london'))\n\t\t\treturn !isNullish(tx.gasPrice) ? '0x0' : '0x2';\n\n\t\t// givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n\t\tif (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin')) return '0x0';\n\t}\n\n\t// gasprice is defined\n\tif (!isNullish(tx.gasPrice)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n\t\treturn '0x0';\n\t}\n\n\t// no transaction type can be inferred from properties, use default transaction type\n\treturn undefined;\n};\n\nexport const detectTransactionType = (\n\ttransaction: InternalTransaction,\n\tweb3Context?: Web3Context<EthExecutionAPI>,\n) =>\n\t(web3Context?.transactionTypeParser ?? defaultTransactionTypeParser)(\n\t\ttransaction as unknown as Record<string, unknown>\n\t);\n\nexport const detectRawTransactionType = (transaction: Uint8Array) =>\n\ttransaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);\n"]},"metadata":{},"sourceType":"module"}