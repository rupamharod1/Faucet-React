{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\n\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n\nconst utils_js_1 = require(\"./utils.js\");\n\nconst crypto = {\n  web: crypto_1.crypto\n};\n\nfunction validateOpt(key, iv, mode) {\n  if (!mode.startsWith(\"aes-\")) {\n    throw new Error(`AES submodule doesn't support mode ${mode}`);\n  }\n\n  if (iv.length !== 16) {\n    throw new Error(\"AES: wrong IV length\");\n  }\n\n  if (mode.startsWith(\"aes-128\") && key.length !== 16 || mode.startsWith(\"aes-256\") && key.length !== 32) {\n    throw new Error(\"AES: wrong key length\");\n  }\n}\n\nasync function getBrowserKey(mode, key, iv) {\n  if (!crypto.web) {\n    throw new Error(\"Browser crypto not available.\");\n  }\n\n  let keyMode;\n\n  if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n    keyMode = \"cbc\";\n  }\n\n  if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n    keyMode = \"ctr\";\n  }\n\n  if (!keyMode) {\n    throw new Error(\"AES: unsupported mode\");\n  }\n\n  const wKey = await crypto.web.subtle.importKey(\"raw\", key, {\n    name: `AES-${keyMode.toUpperCase()}`,\n    length: key.length * 8\n  }, true, [\"encrypt\", \"decrypt\"]); // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n  // recommended by NIST SP800-38A\n\n  return [wKey, {\n    name: `aes-${keyMode}`,\n    iv,\n    counter: iv,\n    length: 128\n  }];\n}\n\nasync function encrypt(msg, key, iv) {\n  let mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"aes-128-ctr\";\n  let pkcs7PaddingEnabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  validateOpt(key, iv, mode);\n\n  if (crypto.web) {\n    const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n    const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg); // Remove PKCS7 padding on cbc mode by stripping end of message\n\n    let res = new Uint8Array(cipher);\n\n    if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n      res = res.slice(0, -16);\n    }\n\n    return res;\n  } else if (crypto.node) {\n    const cipher = crypto.node.createCipheriv(mode, key, iv);\n    cipher.setAutoPadding(pkcs7PaddingEnabled);\n    return (0, utils_js_1.concatBytes)(cipher.update(msg), cipher.final());\n  } else {\n    throw new Error(\"The environment doesn't have AES module\");\n  }\n}\n\nexports.encrypt = encrypt;\n\nasync function getPadding(cypherText, key, iv, mode) {\n  const lastBlock = cypherText.slice(-16);\n\n  for (let i = 0; i < 16; i++) {\n    // Undo xor of iv and fill with lastBlock ^ padding (16)\n    lastBlock[i] ^= iv[i] ^ 16;\n  }\n\n  const res = await encrypt(lastBlock, key, iv, mode);\n  return res.slice(0, 16);\n}\n\nasync function decrypt(cypherText, key, iv) {\n  let mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"aes-128-ctr\";\n  let pkcs7PaddingEnabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  validateOpt(key, iv, mode);\n\n  if (crypto.web) {\n    const [wKey, wOpt] = await getBrowserKey(mode, key, iv); // Add empty padding so Chrome will correctly decrypt message\n\n    if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n      const padding = await getPadding(cypherText, key, iv, mode);\n      cypherText = (0, utils_js_1.concatBytes)(cypherText, padding);\n    }\n\n    const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n    const msgBytes = new Uint8Array(msg); // Safari always ignores padding (if no padding -> broken message)\n\n    if (wOpt.name === \"aes-cbc\") {\n      const encrypted = await encrypt(msgBytes, key, iv, mode);\n\n      if (!(0, utils_js_1.equalsBytes)(encrypted, cypherText)) {\n        throw new Error(\"AES: wrong padding\");\n      }\n    }\n\n    return msgBytes;\n  } else if (crypto.node) {\n    const decipher = crypto.node.createDecipheriv(mode, key, iv);\n    decipher.setAutoPadding(pkcs7PaddingEnabled);\n    return (0, utils_js_1.concatBytes)(decipher.update(cypherText), decipher.final());\n  } else {\n    throw new Error(\"The environment doesn't have AES module\");\n  }\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"names":["Object","defineProperty","exports","value","decrypt","encrypt","crypto_1","require","utils_js_1","crypto","web","validateOpt","key","iv","mode","startsWith","Error","length","getBrowserKey","keyMode","includes","wKey","subtle","importKey","name","toUpperCase","counter","msg","pkcs7PaddingEnabled","wOpt","cipher","res","Uint8Array","slice","node","createCipheriv","setAutoPadding","concatBytes","update","final","getPadding","cypherText","lastBlock","i","padding","msgBytes","encrypted","equalsBytes","decipher","createDecipheriv"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/ethereum-cryptography/aes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst utils_js_1 = require(\"./utils.js\");\nconst crypto = { web: crypto_1.crypto };\nfunction validateOpt(key, iv, mode) {\n    if (!mode.startsWith(\"aes-\")) {\n        throw new Error(`AES submodule doesn't support mode ${mode}`);\n    }\n    if (iv.length !== 16) {\n        throw new Error(\"AES: wrong IV length\");\n    }\n    if ((mode.startsWith(\"aes-128\") && key.length !== 16) ||\n        (mode.startsWith(\"aes-256\") && key.length !== 32)) {\n        throw new Error(\"AES: wrong key length\");\n    }\n}\nasync function getBrowserKey(mode, key, iv) {\n    if (!crypto.web) {\n        throw new Error(\"Browser crypto not available.\");\n    }\n    let keyMode;\n    if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n        keyMode = \"cbc\";\n    }\n    if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n        keyMode = \"ctr\";\n    }\n    if (!keyMode) {\n        throw new Error(\"AES: unsupported mode\");\n    }\n    const wKey = await crypto.web.subtle.importKey(\"raw\", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, [\"encrypt\", \"decrypt\"]);\n    // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n    // recommended by NIST SP800-38A\n    return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];\n}\nasync function encrypt(msg, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);\n        // Remove PKCS7 padding on cbc mode by stripping end of message\n        let res = new Uint8Array(cipher);\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n            res = res.slice(0, -16);\n        }\n        return res;\n    }\n    else if (crypto.node) {\n        const cipher = crypto.node.createCipheriv(mode, key, iv);\n        cipher.setAutoPadding(pkcs7PaddingEnabled);\n        return (0, utils_js_1.concatBytes)(cipher.update(msg), cipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\nexports.encrypt = encrypt;\nasync function getPadding(cypherText, key, iv, mode) {\n    const lastBlock = cypherText.slice(-16);\n    for (let i = 0; i < 16; i++) {\n        // Undo xor of iv and fill with lastBlock ^ padding (16)\n        lastBlock[i] ^= iv[i] ^ 16;\n    }\n    const res = await encrypt(lastBlock, key, iv, mode);\n    return res.slice(0, 16);\n}\nasync function decrypt(cypherText, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        // Add empty padding so Chrome will correctly decrypt message\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n            const padding = await getPadding(cypherText, key, iv, mode);\n            cypherText = (0, utils_js_1.concatBytes)(cypherText, padding);\n        }\n        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n        const msgBytes = new Uint8Array(msg);\n        // Safari always ignores padding (if no padding -> broken message)\n        if (wOpt.name === \"aes-cbc\") {\n            const encrypted = await encrypt(msgBytes, key, iv, mode);\n            if (!(0, utils_js_1.equalsBytes)(encrypted, cypherText)) {\n                throw new Error(\"AES: wrong padding\");\n            }\n        }\n        return msgBytes;\n    }\n    else if (crypto.node) {\n        const decipher = crypto.node.createDecipheriv(mode, key, iv);\n        decipher.setAutoPadding(pkcs7PaddingEnabled);\n        return (0, utils_js_1.concatBytes)(decipher.update(cypherText), decipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\nexports.decrypt = decrypt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}