{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_RETURN_FORMAT, ETH_DATA_FORMAT } from 'web3-types';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport { InvalidTransactionWithSender, InvalidTransactionWithReceiver, LocalWalletNotAvailableError, TransactionDataAndInputError, UnableToPopulateNonceError } from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\nexport const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {\n  if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n    if (typeof transaction[attr] === 'string' && isAddress(transaction[attr])) {\n      return transaction[attr];\n    }\n\n    if (!isHexStrict(transaction[attr]) && isNumber(transaction[attr])) {\n      if (web3Context.wallet) {\n        const account = web3Context.wallet.get(format({\n          format: 'uint'\n        }, transaction[attr], NUMBER_DATA_FORMAT));\n\n        if (!isNullish(account)) {\n          return account.address;\n        }\n\n        throw new LocalWalletNotAvailableError();\n      }\n\n      throw new LocalWalletNotAvailableError();\n    } else {\n      throw attr === 'from' ? new InvalidTransactionWithSender(transaction.from) : // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      new InvalidTransactionWithReceiver(transaction.to);\n    }\n  }\n\n  if (attr === 'from') {\n    if (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n    if (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n  }\n\n  return undefined;\n};\nexport const getTransactionNonce = function (web3Context, address) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    if (isNullish(address)) {\n      // TODO if (web3.eth.accounts.wallet) use address from local wallet\n      throw new UnableToPopulateNonceError();\n    }\n\n    return getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n  });\n};\nexport const getTransactionType = (transaction, web3Context) => {\n  const inferredType = detectTransactionType(transaction, web3Context);\n  if (!isNullish(inferredType)) return inferredType;\n  if (!isNullish(web3Context.defaultTransactionType)) return format({\n    format: 'uint'\n  }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n  return undefined;\n}; // Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\n\nexport function defaultTransactionBuilder(options) {\n  var _a, _b;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    let populatedTransaction = format(transactionSchema, options.transaction, DEFAULT_RETURN_FORMAT);\n\n    if (isNullish(populatedTransaction.from)) {\n      populatedTransaction.from = getTransactionFromOrToAttr('from', options.web3Context, undefined, options.privateKey);\n    } // TODO: Debug why need to typecase getTransactionNonce\n\n\n    if (isNullish(populatedTransaction.nonce)) {\n      populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);\n    }\n\n    if (isNullish(populatedTransaction.value)) {\n      populatedTransaction.value = '0x0';\n    }\n\n    if (!isNullish(populatedTransaction.data)) {\n      if (!isNullish(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new TransactionDataAndInputError({\n        data: bytesToHex(populatedTransaction.data),\n        input: bytesToHex(populatedTransaction.input)\n      });\n      if (!populatedTransaction.data.startsWith('0x')) populatedTransaction.data = `0x${populatedTransaction.data}`;\n    } else if (!isNullish(populatedTransaction.input)) {\n      if (!populatedTransaction.input.startsWith('0x')) populatedTransaction.input = `0x${populatedTransaction.input}`;\n    } else {\n      populatedTransaction.input = '0x';\n    }\n\n    if (isNullish(populatedTransaction.common)) {\n      if (options.web3Context.defaultCommon) {\n        const common = options.web3Context.defaultCommon;\n        const chainId = common.customChain.chainId;\n        const networkId = common.customChain.networkId;\n        const name = common.customChain.name;\n        populatedTransaction.common = Object.assign(Object.assign({}, common), {\n          customChain: {\n            chainId,\n            networkId,\n            name\n          }\n        });\n      }\n\n      if (isNullish(populatedTransaction.chain)) {\n        populatedTransaction.chain = options.web3Context.defaultChain;\n      }\n\n      if (isNullish(populatedTransaction.hardfork)) {\n        populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n      }\n    }\n\n    if (isNullish(populatedTransaction.chainId) && isNullish((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {\n      populatedTransaction.chainId = yield getChainId(options.web3Context, ETH_DATA_FORMAT);\n    }\n\n    if (isNullish(populatedTransaction.networkId)) {\n      populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield getId(options.web3Context, ETH_DATA_FORMAT);\n    }\n\n    if (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n      populatedTransaction.gasLimit = populatedTransaction.gas;\n    }\n\n    populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n\n    if (isNullish(populatedTransaction.accessList) && (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n      populatedTransaction.accessList = [];\n    }\n\n    if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT));\n\n    if (isNullish(populatedTransaction.gas) && isNullish(populatedTransaction.gasLimit) && options.fillGasLimit) {\n      const fillGasLimit = yield estimateGas(options.web3Context, populatedTransaction, 'latest', ETH_DATA_FORMAT);\n      populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), {\n        gas: format({\n          format: 'uint'\n        }, fillGasLimit, ETH_DATA_FORMAT)\n      });\n    }\n\n    return populatedTransaction;\n  });\n}\nexport const transactionBuilder = options => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n\n  return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {\n    transaction: options.transaction\n  }));\n});","map":{"version":3,"mappings":"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","names":["DEFAULT_RETURN_FORMAT","ETH_DATA_FORMAT","privateKeyToAddress","getId","isNullish","isNumber","isHexStrict","isAddress","InvalidTransactionWithSender","InvalidTransactionWithReceiver","LocalWalletNotAvailableError","TransactionDataAndInputError","UnableToPopulateNonceError","bytesToHex","format","NUMBER_DATA_FORMAT","getChainId","getTransactionCount","estimateGas","detectTransactionType","transactionSchema","getTransactionGasPricing","getTransactionFromOrToAttr","attr","web3Context","transaction","privateKey","undefined","wallet","account","get","address","from","to","defaultAccount","getTransactionNonce","returnFormat","__awaiter","defaultBlock","getTransactionType","inferredType","defaultTransactionType","defaultTransactionBuilder","options","populatedTransaction","nonce","value","data","input","startsWith","common","defaultCommon","chainId","customChain","networkId","name","Object","chain","defaultChain","hardfork","defaultHardfork","_a","defaultNetworkId","_b","gasLimit","gas","type","accessList","fillGasPrice","fillGasLimit","transactionBuilder"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/transaction_builder.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tAddress,\n\tHexString,\n\tValidChains,\n\tHardfork,\n\tTransaction,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tCommon,\n\tWeb3NetAPI,\n\tNumbers,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport {\n\tInvalidTransactionWithSender,\n\tInvalidTransactionWithReceiver,\n\tLocalWalletNotAvailableError,\n\tTransactionDataAndInputError,\n\tUnableToPopulateNonceError,\n} from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n\nexport const getTransactionFromOrToAttr = (\n\tattr: 'from' | 'to',\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction?:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\tprivateKey?: HexString | Uint8Array,\n): Address | undefined => {\n\tif (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n\t\tif (typeof transaction[attr] === 'string' && isAddress(transaction[attr] as string)) {\n\t\t\treturn transaction[attr] as Address;\n\t\t}\n\t\tif (!isHexStrict(transaction[attr] as string) && isNumber(transaction[attr] as Numbers)) {\n\t\t\tif (web3Context.wallet) {\n\t\t\t\tconst account = web3Context.wallet.get(\n\t\t\t\t\tformat({ format: 'uint' }, transaction[attr] as Numbers, NUMBER_DATA_FORMAT),\n\t\t\t\t);\n\n\t\t\t\tif (!isNullish(account)) {\n\t\t\t\t\treturn account.address;\n\t\t\t\t}\n\n\t\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t\t}\n\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t} else {\n\t\t\tthrow attr === 'from'\n\t\t\t\t? new InvalidTransactionWithSender(transaction.from)\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t  new InvalidTransactionWithReceiver(transaction.to);\n\t\t}\n\t}\n\tif (attr === 'from') {\n\t\tif (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n\t\tif (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n\t}\n\n\treturn undefined;\n};\n\nexport const getTransactionNonce = async <ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress?: Address,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n) => {\n\tif (isNullish(address)) {\n\t\t// TODO if (web3.eth.accounts.wallet) use address from local wallet\n\t\tthrow new UnableToPopulateNonceError();\n\t}\n\n\treturn getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n};\n\nexport const getTransactionType = (\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst inferredType = detectTransactionType(transaction, web3Context);\n\tif (!isNullish(inferredType)) return inferredType;\n\tif (!isNullish(web3Context.defaultTransactionType))\n\t\treturn format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n\n\treturn undefined;\n};\n\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport async function defaultTransactionBuilder<ReturnType = Transaction>(options: {\n\ttransaction: Transaction;\n\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\tprivateKey?: HexString | Uint8Array;\n\tfillGasPrice?: boolean;\n\tfillGasLimit?: boolean;\n}): Promise<ReturnType> {\n\tlet populatedTransaction = format(\n\t\ttransactionSchema,\n\t\toptions.transaction,\n\t\tDEFAULT_RETURN_FORMAT,\n\t) as InternalTransaction;\n\n\tif (isNullish(populatedTransaction.from)) {\n\t\tpopulatedTransaction.from = getTransactionFromOrToAttr(\n\t\t\t'from',\n\t\t\toptions.web3Context,\n\t\t\tundefined,\n\t\t\toptions.privateKey,\n\t\t);\n\t}\n\n\t// TODO: Debug why need to typecase getTransactionNonce\n\tif (isNullish(populatedTransaction.nonce)) {\n\t\tpopulatedTransaction.nonce = await getTransactionNonce(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction.from,\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t}\n\n\tif (isNullish(populatedTransaction.value)) {\n\t\tpopulatedTransaction.value = '0x0';\n\t}\n\n\tif (!isNullish(populatedTransaction.data)) {\n\t\tif (\n\t\t\t!isNullish(populatedTransaction.input) &&\n\t\t\tpopulatedTransaction.data !== populatedTransaction.input\n\t\t)\n\t\t\tthrow new TransactionDataAndInputError({\n\t\t\t\tdata: bytesToHex(populatedTransaction.data),\n\t\t\t\tinput: bytesToHex(populatedTransaction.input),\n\t\t\t});\n\n\t\tif (!populatedTransaction.data.startsWith('0x'))\n\t\t\tpopulatedTransaction.data = `0x${populatedTransaction.data}`;\n\t} else if (!isNullish(populatedTransaction.input)) {\n\t\tif (!populatedTransaction.input.startsWith('0x'))\n\t\t\tpopulatedTransaction.input = `0x${populatedTransaction.input}`;\n\t} else {\n\t\tpopulatedTransaction.input = '0x';\n\t}\n\n\tif (isNullish(populatedTransaction.common)) {\n\t\tif (options.web3Context.defaultCommon) {\n\t\t\tconst common = options.web3Context.defaultCommon as unknown as Common;\n\t\t\tconst chainId = common.customChain.chainId as string;\n\t\t\tconst networkId = common.customChain.networkId as string;\n\t\t\tconst name = common.customChain.name as string;\n\t\t\tpopulatedTransaction.common = {\n\t\t\t\t...common,\n\t\t\t\tcustomChain: { chainId, networkId, name },\n\t\t\t};\n\t\t}\n\n\t\tif (isNullish(populatedTransaction.chain)) {\n\t\t\tpopulatedTransaction.chain = options.web3Context.defaultChain as ValidChains;\n\t\t}\n\t\tif (isNullish(populatedTransaction.hardfork)) {\n\t\t\tpopulatedTransaction.hardfork = options.web3Context.defaultHardfork as Hardfork;\n\t\t}\n\t}\n\n\tif (\n\t\tisNullish(populatedTransaction.chainId) &&\n\t\tisNullish(populatedTransaction.common?.customChain.chainId)\n\t) {\n\t\tpopulatedTransaction.chainId = await getChainId(options.web3Context, ETH_DATA_FORMAT);\n\t}\n\n\tif (isNullish(populatedTransaction.networkId)) {\n\t\tpopulatedTransaction.networkId =\n\t\t\t(options.web3Context.defaultNetworkId as string) ??\n\t\t\t(await getId(options.web3Context, ETH_DATA_FORMAT));\n\t}\n\n\tif (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n\t\tpopulatedTransaction.gasLimit = populatedTransaction.gas;\n\t}\n\n\tpopulatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n\tif (\n\t\tisNullish(populatedTransaction.accessList) &&\n\t\t(populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')\n\t) {\n\t\tpopulatedTransaction.accessList = [];\n\t}\n\tif (options.fillGasPrice)\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\t...(await getTransactionGasPricing(\n\t\t\t\tpopulatedTransaction,\n\t\t\t\toptions.web3Context,\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t)),\n\t\t};\n\tif (\n\t\tisNullish(populatedTransaction.gas) &&\n\t\tisNullish(populatedTransaction.gasLimit) &&\n\t\toptions.fillGasLimit\n\t) {\n\t\tconst fillGasLimit = await estimateGas(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction,\n\t\t\t'latest',\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\tgas: format({ format: 'uint' }, fillGasLimit as Numbers, ETH_DATA_FORMAT),\n\t\t};\n\t}\n\treturn populatedTransaction as ReturnType;\n}\n\nexport const transactionBuilder = async <ReturnType = Transaction>(\n\toptions: {\n\t\ttransaction: Transaction;\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\tprivateKey?: HexString | Uint8Array;\n\t\tfillGasPrice?: boolean;\n\t\tfillGasLimit?: boolean;\n\t},\n\t// eslint-disable-next-line @typescript-eslint/require-await\n) =>\n\t(options.web3Context.transactionBuilder ?? defaultTransactionBuilder)({\n\t\t...options,\n\t\ttransaction: options.transaction,\n\t}) as unknown as ReturnType;\n"]},"metadata":{},"sourceType":"module"}