{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/rupam/Desktop/Faucet-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/rupam/Desktop/Faucet-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/rupam/Desktop/Faucet-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/rupam/Desktop/Faucet-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n\n  var _super = _createSuper(PocketProvider);\n\n  function PocketProvider() {\n    _classCallCheck(this, PocketProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationId;\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        applicationId: null,\n        loadBalancer: true,\n        applicationSecretKey: null\n      }; // Parse applicationId and applicationSecretKey\n\n      if (apiKey == null) {\n        apiKeyObj.applicationId = defaultApplicationId;\n      } else if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      } else if (apiKey.applicationId) {\n        apiKeyObj.applicationId = apiKey.applicationId;\n      } else {\n        logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n      }\n\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network ? network.name : \"unknown\") {\n        case \"goerli\":\n          host = \"eth-goerli.gateway.pokt.network\";\n          break;\n\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n\n        case \"kovan\":\n          host = \"poa-kovan.gateway.pokt.network\";\n          break;\n\n        case \"matic\":\n          host = \"poly-mainnet.gateway.pokt.network\";\n          break;\n\n        case \"maticmum\":\n          host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n          break;\n\n        case \"rinkeby\":\n          host = \"eth-rinkeby.gateway.pokt.network\";\n          break;\n\n        case \"ropsten\":\n          host = \"eth-ropsten.gateway.pokt.network\";\n          break;\n\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n\n      var url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n      var connection = {\n        headers: {},\n        url: url\n      };\n\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n\n      return connection;\n    }\n  }]);\n\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"AAAA;;;;;;AAKA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,kBAAT,QAAmC,yBAAnC;AAEA,IAAMC,oBAAoB,GAAG,0BAA7B;AAGA,WAAaC,cAAb;EAAA;;EAAA;;EAAA;IAAA;;IAAA;EAAA;;EAAA;IAAA;IAAA,OA2EI,+BAAmB;MACf,OAAQ,KAAKC,aAAL,KAAuBF,oBAA/B;IACH;EA7EL;IAAA;IAAA,OAKI,mBAAiBG,MAAjB,EAA4B;MACxB,IAAMC,SAAS,GAAmF;QAC9FF,aAAa,EAAE,IAD+E;QAE9FG,YAAY,EAAE,IAFgF;QAG9FC,oBAAoB,EAAE;MAHwE,CAAlG,CADwB,CAOxB;;MACA,IAAIH,MAAM,IAAI,IAAd,EAAoB;QAChBC,SAAS,CAACF,aAAV,GAA0BF,oBAA1B;MAEH,CAHD,MAGO,IAAI,OAAQG,MAAR,KAAoB,QAAxB,EAAkC;QACrCC,SAAS,CAACF,aAAV,GAA0BC,MAA1B;MAEH,CAHM,MAGA,IAAIA,MAAM,CAACG,oBAAP,IAA+B,IAAnC,EAAyC;QAC5CF,SAAS,CAACF,aAAV,GAA0BC,MAAM,CAACD,aAAjC;QACAE,SAAS,CAACE,oBAAV,GAAiCH,MAAM,CAACG,oBAAxC;MAEH,CAJM,MAIA,IAAIH,MAAM,CAACD,aAAX,EAA0B;QAC7BE,SAAS,CAACF,aAAV,GAA0BC,MAAM,CAACD,aAAjC;MAEH,CAHM,MAGA;QACHJ,MAAM,CAACS,kBAAP,CAA0B,mCAA1B,EAA+D,QAA/D,EAAyEJ,MAAzE;MACH;;MAED,OAAOC,SAAP;IACH;EA/BL;IAAA;IAAA,OAiCI,gBAAcI,OAAd,EAAgCL,MAAhC,EAA2C;MACvC,IAAIM,IAAI,GAAW,IAAnB;;MACA,QAAQD,OAAO,GAAGA,OAAO,CAACE,IAAX,GAAkB,SAAjC;QACI,KAAK,QAAL;UACID,IAAI,GAAG,iCAAP;UACA;;QACJ,KAAK,WAAL;UACIA,IAAI,GAAG,kCAAP;UACA;;QACJ,KAAK,OAAL;UACIA,IAAI,GAAG,gCAAP;UACA;;QACJ,KAAK,OAAL;UACIA,IAAI,GAAG,mCAAP;UACA;;QACJ,KAAK,UAAL;UACIA,IAAI,GAAG,yCAAP;UACA;;QACJ,KAAK,SAAL;UACIA,IAAI,GAAG,kCAAP;UACA;;QACJ,KAAK,SAAL;UACIA,IAAI,GAAG,kCAAP;UACA;;QACJ;UACIX,MAAM,CAACa,UAAP,CAAkB,qBAAlB,EAAyCf,MAAM,CAACgB,MAAP,CAAcC,gBAAvD,EAAyE;YACrEC,QAAQ,EAAE,SAD2D;YAErEC,KAAK,EAAEP;UAF8D,CAAzE;MAvBR;;MA6BA,IAAMQ,GAAG,qBAAgBP,IAAhB,oBAAgCN,MAAM,CAACD,aAAvC,CAAT;MAEA,IAAMe,UAAU,GAAmB;QAAEC,OAAO,EAAE,EAAX;QAAgBF,GAAG,EAAHA;MAAhB,CAAnC;;MACA,IAAIb,MAAM,CAACG,oBAAP,IAA+B,IAAnC,EAAyC;QACrCW,UAAU,CAACE,IAAX,GAAkB,EAAlB;QACAF,UAAU,CAACG,QAAX,GAAsBjB,MAAM,CAACG,oBAA7B;MACH;;MAED,OAAOW,UAAP;IACH;EAzEL;;EAAA;AAAA,EAAoClB,kBAApC","names":["Logger","version","logger","UrlJsonRpcProvider","defaultApplicationId","PocketProvider","applicationId","apiKey","apiKeyObj","loadBalancer","applicationSecretKey","throwArgumentError","network","host","name","throwError","errors","INVALID_ARGUMENT","argument","value","url","connection","headers","user","password"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@ethersproject/providers/src.ts/pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}