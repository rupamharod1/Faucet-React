{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestAlreadySentError = exports.PendingRequestsOnReconnectingError = exports.MaxAttemptsReachedOnReconnectingError = exports.ConnectionCloseError = exports.ConnectionNotOpenError = exports.ConnectionTimeoutError = exports.InvalidConnectionError = exports.ConnectionError = void 0;\n\nconst error_codes_js_1 = require(\"../error_codes.js\");\n\nconst web3_error_base_js_1 = require(\"../web3_error_base.js\");\n\nclass ConnectionError extends web3_error_base_js_1.BaseWeb3Error {\n  constructor(message, event) {\n    super(message);\n    this.code = error_codes_js_1.ERR_CONN;\n\n    if (event) {\n      this.errorCode = event.code;\n      this.errorReason = event.reason;\n    }\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      errorCode: this.errorCode,\n      errorReason: this.errorReason\n    });\n  }\n\n}\n\nexports.ConnectionError = ConnectionError;\n\nclass InvalidConnectionError extends ConnectionError {\n  constructor(host, event) {\n    super(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\n    this.host = host;\n    this.code = error_codes_js_1.ERR_CONN_INVALID;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      host: this.host\n    });\n  }\n\n}\n\nexports.InvalidConnectionError = InvalidConnectionError;\n\nclass ConnectionTimeoutError extends ConnectionError {\n  constructor(duration) {\n    super(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\n    this.duration = duration;\n    this.code = error_codes_js_1.ERR_CONN_TIMEOUT;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      duration: this.duration\n    });\n  }\n\n}\n\nexports.ConnectionTimeoutError = ConnectionTimeoutError;\n\nclass ConnectionNotOpenError extends ConnectionError {\n  constructor(event) {\n    super('Connection not open', event);\n    this.code = error_codes_js_1.ERR_CONN_NOT_OPEN;\n  }\n\n}\n\nexports.ConnectionNotOpenError = ConnectionNotOpenError;\n\nclass ConnectionCloseError extends ConnectionError {\n  constructor(event) {\n    var _a, _b;\n\n    super(`CONNECTION ERROR: The connection got closed with the close code ${(_a = event === null || event === void 0 ? void 0 : event.code) !== null && _a !== void 0 ? _a : ''} and the following reason string ${(_b = event === null || event === void 0 ? void 0 : event.reason) !== null && _b !== void 0 ? _b : ''}`, event);\n    this.code = error_codes_js_1.ERR_CONN_CLOSE;\n  }\n\n}\n\nexports.ConnectionCloseError = ConnectionCloseError;\n\nclass MaxAttemptsReachedOnReconnectingError extends ConnectionError {\n  constructor(numberOfAttempts) {\n    super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\n    this.code = error_codes_js_1.ERR_CONN_MAX_ATTEMPTS;\n  }\n\n}\n\nexports.MaxAttemptsReachedOnReconnectingError = MaxAttemptsReachedOnReconnectingError;\n\nclass PendingRequestsOnReconnectingError extends ConnectionError {\n  constructor() {\n    super('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n    this.code = error_codes_js_1.ERR_CONN_PENDING_REQUESTS;\n  }\n\n}\n\nexports.PendingRequestsOnReconnectingError = PendingRequestsOnReconnectingError;\n\nclass RequestAlreadySentError extends ConnectionError {\n  constructor(id) {\n    super(`Request already sent with following id: ${id}`);\n    this.code = error_codes_js_1.ERR_REQ_ALREADY_SENT;\n  }\n\n}\n\nexports.RequestAlreadySentError = RequestAlreadySentError;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAoBA;;AAUA;;AAEA,MAAaA,eAAb,SAAqCC,kCAArC,CAAkD;EAKjDC,YAAmBC,OAAnB,EAAoCC,KAApC,EAA2D;IAC1D,MAAMD,OAAN;IALM,YAAOE,yBAAP;;IAON,IAAID,KAAJ,EAAW;MACV,KAAKE,SAAL,GAAiBF,KAAK,CAACG,IAAvB;MACA,KAAKC,WAAL,GAAmBJ,KAAK,CAACK,MAAzB;IACA;EACD;;EAEMC,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEJ,SAAS,EAAE,KAAKA,SAAlB;MAA6BE,WAAW,EAAE,KAAKA;IAA/C,CAA1B;EACA;;AAhBgD;;AAAlDG;;AAmBA,MAAaC,sBAAb,SAA4CZ,eAA5C,CAA2D;EAC1DE,YAA0BW,IAA1B,EAAwCT,KAAxC,EAA+D;IAC9D,MAAM,8CAA8CS,IAAI,GAAxD,EAA6DT,KAA7D;IADyB;IAEzB,KAAKG,IAAL,GAAYF,iCAAZ;EACA;;EAEMK,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEG,IAAI,EAAE,KAAKA;IAAb,CAA1B;EACA;;AARyD;;AAA3DF;;AAWA,MAAaG,sBAAb,SAA4Cd,eAA5C,CAA2D;EAC1DE,YAA0Ba,QAA1B,EAA0C;IACzC,MAAM,kCAAkCA,QAAQ,aAAhD;IADyB;IAEzB,KAAKR,IAAL,GAAYF,iCAAZ;EACA;;EAEMK,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEK,QAAQ,EAAE,KAAKA;IAAjB,CAA1B;EACA;;AARyD;;AAA3DJ;;AAWA,MAAaK,sBAAb,SAA4ChB,eAA5C,CAA2D;EAC1DE,YAAmBE,KAAnB,EAA0C;IACzC,MAAM,qBAAN,EAA6BA,KAA7B;IACA,KAAKG,IAAL,GAAYF,kCAAZ;EACA;;AAJyD;;AAA3DM;;AAOA,MAAaM,oBAAb,SAA0CjB,eAA1C,CAAyD;EACxDE,YAAmBE,KAAnB,EAA0C;;;IACzC,MACC,mEACC,WAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEG,IAAP,MAAW,IAAX,IAAWW,aAAX,GAAWA,EAAX,GAAe,EAChB,oCAAoC,WAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAET,MAAP,MAAa,IAAb,IAAaU,aAAb,GAAaA,EAAb,GAAiB,EAAE,EAHxD,EAICf,KAJD;IAMA,KAAKG,IAAL,GAAYF,+BAAZ;EACA;;AATuD;;AAAzDM;;AAYA,MAAaS,qCAAb,SAA2DpB,eAA3D,CAA0E;EACzEE,YAAmBmB,gBAAnB,EAA2C;IAC1C,MAAM,kDAAkDA,gBAAgB,GAAxE;IACA,KAAKd,IAAL,GAAYF,sCAAZ;EACA;;AAJwE;;AAA1EM;;AAOA,MAAaW,kCAAb,SAAwDtB,eAAxD,CAAuE;EACtEE;IACC,MAAM,mFAAN;IACA,KAAKK,IAAL,GAAYF,0CAAZ;EACA;;AAJqE;;AAAvEM;;AAOA,MAAaY,uBAAb,SAA6CvB,eAA7C,CAA4D;EAC3DE,YAAmBsB,EAAnB,EAAsC;IACrC,MAAM,2CAA2CA,EAAE,EAAnD;IACA,KAAKjB,IAAL,GAAYF,qCAAZ;EACA;;AAJ0D;;AAA5DM","names":["ConnectionError","web3_error_base_js_1","constructor","message","event","error_codes_js_1","errorCode","code","errorReason","reason","toJSON","exports","InvalidConnectionError","host","ConnectionTimeoutError","duration","ConnectionNotOpenError","ConnectionCloseError","_a","_b","MaxAttemptsReachedOnReconnectingError","numberOfAttempts","PendingRequestsOnReconnectingError","RequestAlreadySentError","id"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-errors/src/errors/connection_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport { ConnectionEvent } from 'web3-types';\nimport {\n\tERR_CONN,\n\tERR_CONN_INVALID,\n\tERR_CONN_TIMEOUT,\n\tERR_CONN_NOT_OPEN,\n\tERR_CONN_CLOSE,\n\tERR_CONN_MAX_ATTEMPTS,\n\tERR_CONN_PENDING_REQUESTS,\n\tERR_REQ_ALREADY_SENT,\n} from '../error_codes.js';\nimport { BaseWeb3Error } from '../web3_error_base.js';\n\nexport class ConnectionError extends BaseWeb3Error {\n\tpublic code = ERR_CONN;\n\tpublic errorCode?: number;\n\tpublic errorReason?: string;\n\n\tpublic constructor(message: string, event?: ConnectionEvent) {\n\t\tsuper(message);\n\n\t\tif (event) {\n\t\t\tthis.errorCode = event.code;\n\t\t\tthis.errorReason = event.reason;\n\t\t}\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), errorCode: this.errorCode, errorReason: this.errorReason };\n\t}\n}\n\nexport class InvalidConnectionError extends ConnectionError {\n\tpublic constructor(public host: string, event?: ConnectionEvent) {\n\t\tsuper(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\n\t\tthis.code = ERR_CONN_INVALID;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), host: this.host };\n\t}\n}\n\nexport class ConnectionTimeoutError extends ConnectionError {\n\tpublic constructor(public duration: number) {\n\t\tsuper(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\n\t\tthis.code = ERR_CONN_TIMEOUT;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), duration: this.duration };\n\t}\n}\n\nexport class ConnectionNotOpenError extends ConnectionError {\n\tpublic constructor(event?: ConnectionEvent) {\n\t\tsuper('Connection not open', event);\n\t\tthis.code = ERR_CONN_NOT_OPEN;\n\t}\n}\n\nexport class ConnectionCloseError extends ConnectionError {\n\tpublic constructor(event?: ConnectionEvent) {\n\t\tsuper(\n\t\t\t`CONNECTION ERROR: The connection got closed with the close code ${\n\t\t\t\tevent?.code ?? ''\n\t\t\t} and the following reason string ${event?.reason ?? ''}`,\n\t\t\tevent,\n\t\t);\n\t\tthis.code = ERR_CONN_CLOSE;\n\t}\n}\n\nexport class MaxAttemptsReachedOnReconnectingError extends ConnectionError {\n\tpublic constructor(numberOfAttempts: number) {\n\t\tsuper(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\n\t\tthis.code = ERR_CONN_MAX_ATTEMPTS;\n\t}\n}\n\nexport class PendingRequestsOnReconnectingError extends ConnectionError {\n\tpublic constructor() {\n\t\tsuper('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n\t\tthis.code = ERR_CONN_PENDING_REQUESTS;\n\t}\n}\n\nexport class RequestAlreadySentError extends ConnectionError {\n\tpublic constructor(id: number | string) {\n\t\tsuper(`Request already sent with following id: ${id}`);\n\t\tthis.code = ERR_REQ_ALREADY_SENT;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}