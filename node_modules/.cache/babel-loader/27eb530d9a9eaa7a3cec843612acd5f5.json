{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport fetch from 'cross-fetch';\nimport { Web3BaseProvider } from 'web3-types';\nimport { InvalidClientError, MethodNotImplementedError, ResponseError } from 'web3-errors';\nexport default class HttpProvider extends Web3BaseProvider {\n  constructor(clientUrl, httpProviderOptions) {\n    super();\n    if (!HttpProvider.validateClientUrl(clientUrl)) throw new InvalidClientError(clientUrl);\n    this.clientUrl = clientUrl;\n    this.httpProviderOptions = httpProviderOptions;\n  }\n\n  static validateClientUrl(clientUrl) {\n    return typeof clientUrl === 'string' ? /^http(s)?:\\/\\//i.test(clientUrl) : false;\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  getStatus() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  request(payload, requestOptions) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const providerOptionsCombined = Object.assign(Object.assign({}, (_a = this.httpProviderOptions) === null || _a === void 0 ? void 0 : _a.providerOptions), requestOptions);\n      const response = yield fetch(this.clientUrl, Object.assign(Object.assign({}, providerOptionsCombined), {\n        method: 'POST',\n        headers: Object.assign(Object.assign({}, providerOptionsCombined.headers), {\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify(payload)\n      })); // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n      if (!response.ok) throw new ResponseError(yield response.json());\n      return yield response.json();\n    });\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  on() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  removeListener() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  once() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  removeAllListeners() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  connect() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  disconnect() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  reset() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  reconnect() {\n    throw new MethodNotImplementedError();\n  }\n\n}\nexport { HttpProvider };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAOCC,gBAPD,QASO,YATP;AAUA,SAASC,kBAAT,EAA6BC,yBAA7B,EAAwDC,aAAxD,QAA6E,aAA7E;AAKA,eAAc,MAAOC,YAAP,SAEJJ,gBAFI,CAEiB;EAI9BK,YAAmBC,SAAnB,EAAsCC,mBAAtC,EAA+E;IAC9E;IACA,IAAI,CAACH,YAAY,CAACI,iBAAb,CAA+BF,SAA/B,CAAL,EAAgD,MAAM,IAAIL,kBAAJ,CAAuBK,SAAvB,CAAN;IAChD,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;EACA;;EAE+B,OAAjBC,iBAAiB,CAACF,SAAD,EAAkB;IACjD,OAAO,OAAOA,SAAP,KAAqB,QAArB,GAAgC,kBAAkBG,IAAlB,CAAuBH,SAAvB,CAAhC,GAAoE,KAA3E;EACA;EAED;;;EACOI,SAAS;IACf,MAAM,IAAIR,yBAAJ,EAAN;EACA;EAED;;;EACOS,qBAAqB;IAC3B,OAAO,KAAP;EACA;;EAEYC,OAAO,CAInBC,OAJmB,EAKnBC,cALmB,EAKS;;;;MAE5B,MAAMC,uBAAuB,mCACzB,WAAKR,mBAAL,MAAwB,IAAxB,IAAwBS,aAAxB,GAAwB,MAAxB,GAAwBA,GAAEC,eADD,GAEzBH,cAFyB,CAA7B;MAIA,MAAMI,QAAQ,GAAG,MAAMnB,KAAK,CAAC,KAAKO,SAAN,EAAea,gCACvCJ,uBADuC,GAChB;QAC1BK,MAAM,EAAE,MADkB;QAE1BC,OAAO,kCACHN,uBAAuB,CAACM,OADrB,GAC4B;UAClC,gBAAgB;QADkB,CAD5B,CAFmB;QAM1BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,OAAf;MANoB,CADgB,CAAf,CAA5B,EAUA;;MACA,IAAI,CAACK,QAAQ,CAACO,EAAd,EAAkB,MAAM,IAAItB,aAAJ,CAAkB,MAAMe,QAAQ,CAACQ,IAAT,EAAxB,CAAN;MAElB,OAAQ,MAAMR,QAAQ,CAACQ,IAAT,EAAd;;EACA;EAED;;;EACOC,EAAE;IACR,MAAM,IAAIzB,yBAAJ,EAAN;EACA;EAED;;;EACO0B,cAAc;IACpB,MAAM,IAAI1B,yBAAJ,EAAN;EACA;EAED;;;EACO2B,IAAI;IACV,MAAM,IAAI3B,yBAAJ,EAAN;EACA;EAED;;;EACO4B,kBAAkB;IACxB,MAAM,IAAI5B,yBAAJ,EAAN;EACA;EAED;;;EACO6B,OAAO;IACb,MAAM,IAAI7B,yBAAJ,EAAN;EACA;EAED;;;EACO8B,UAAU;IAChB,MAAM,IAAI9B,yBAAJ,EAAN;EACA;EAED;;;EACO+B,KAAK;IACX,MAAM,IAAI/B,yBAAJ,EAAN;EACA;EAED;;;EACOgC,SAAS;IACf,MAAM,IAAIhC,yBAAJ,EAAN;EACA;;AA1F6B;AA6F/B,SAASE,YAAT","names":["fetch","Web3BaseProvider","InvalidClientError","MethodNotImplementedError","ResponseError","HttpProvider","constructor","clientUrl","httpProviderOptions","validateClientUrl","test","getStatus","supportsSubscriptions","request","payload","requestOptions","providerOptionsCombined","_a","providerOptions","response","Object","method","headers","body","JSON","stringify","ok","json","on","removeListener","once","removeAllListeners","connect","disconnect","reset","reconnect"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-providers-http/src/index.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport fetch from 'cross-fetch';\nimport {\n\tEthExecutionAPI,\n\tJsonRpcResponseWithResult,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n\tWeb3ProviderStatus,\n} from 'web3-types';\nimport { InvalidClientError, MethodNotImplementedError, ResponseError } from 'web3-errors';\nimport { HttpProviderOptions } from './types.js';\n\nexport { HttpProviderOptions } from './types.js';\n\nexport default class HttpProvider<\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Web3BaseProvider<API> {\n\tprivate readonly clientUrl: string;\n\tprivate readonly httpProviderOptions: HttpProviderOptions | undefined;\n\n\tpublic constructor(clientUrl: string, httpProviderOptions?: HttpProviderOptions) {\n\t\tsuper();\n\t\tif (!HttpProvider.validateClientUrl(clientUrl)) throw new InvalidClientError(clientUrl);\n\t\tthis.clientUrl = clientUrl;\n\t\tthis.httpProviderOptions = httpProviderOptions;\n\t}\n\n\tprivate static validateClientUrl(clientUrl: string): boolean {\n\t\treturn typeof clientUrl === 'string' ? /^http(s)?:\\/\\//i.test(clientUrl) : false;\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic getStatus(): Web3ProviderStatus {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic supportsSubscriptions() {\n\t\treturn false;\n\t}\n\n\tpublic async request<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResultType = Web3APIReturnType<API, Method>,\n\t>(\n\t\tpayload: Web3APIPayload<API, Method>,\n\t\trequestOptions?: RequestInit,\n\t): Promise<JsonRpcResponseWithResult<ResultType>> {\n\t\tconst providerOptionsCombined = {\n\t\t\t...this.httpProviderOptions?.providerOptions,\n\t\t\t...requestOptions,\n\t\t};\n\t\tconst response = await fetch(this.clientUrl, {\n\t\t\t...providerOptionsCombined,\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t...providerOptionsCombined.headers,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(payload),\n\t\t});\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\tif (!response.ok) throw new ResponseError(await response.json());\n\n\t\treturn (await response.json()) as JsonRpcResponseWithResult<ResultType>;\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic on() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic removeListener() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic once() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic removeAllListeners() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic connect() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic disconnect() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic reset() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n\n\t/* eslint-disable class-methods-use-this */\n\tpublic reconnect() {\n\t\tthrow new MethodNotImplementedError();\n\t}\n}\n\nexport { HttpProvider };\n"]},"metadata":{},"sourceType":"module"}