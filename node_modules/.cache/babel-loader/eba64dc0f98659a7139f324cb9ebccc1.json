{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeArray = exports.encodeArray = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_utils_1 = require(\"web3-utils\"); // eslint-disable-next-line import/no-cycle\n\n\nconst _1 = require(\".\");\n\nconst utils_js_1 = require(\"../utils.js\");\n\nconst number_js_1 = require(\"./number.js\");\n\nconst utils_js_2 = require(\"./utils.js\");\n\nfunction encodeArray(param, values) {\n  if (!Array.isArray(values)) {\n    throw new web3_errors_1.AbiError('Expected value to be array', {\n      abi: param,\n      values\n    });\n  }\n\n  const {\n    size,\n    param: arrayItemParam\n  } = (0, utils_js_1.extractArrayType)(param);\n  const encodedParams = values.map(v => (0, _1.encodeParamFromAbiParameter)(arrayItemParam, v));\n  const dynamic = size === -1;\n  const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;\n\n  if (!dynamic && values.length !== size) {\n    throw new web3_errors_1.AbiError(\"Given arguments count doesn't match array length\", {\n      arrayLength: size,\n      argumentsLength: values.length\n    });\n  }\n\n  if (dynamic || dynamicItems) {\n    const encodingResult = (0, utils_js_2.encodeDynamicParams)(encodedParams);\n\n    if (dynamic) {\n      const encodedLength = (0, _1.encodeNumber)({\n        type: 'uint256',\n        name: ''\n      }, encodedParams.length).encoded;\n      return {\n        dynamic: true,\n        encoded: encodedParams.length > 0 ? (0, web3_utils_1.uint8ArrayConcat)(encodedLength, encodingResult) : encodedLength\n      };\n    }\n\n    return {\n      dynamic: true,\n      encoded: encodingResult\n    };\n  }\n\n  return {\n    dynamic: false,\n    encoded: (0, web3_utils_1.uint8ArrayConcat)(...encodedParams.map(p => p.encoded))\n  };\n}\n\nexports.encodeArray = encodeArray;\n\nfunction decodeArray(param, bytes) {\n  // eslint-disable-next-line prefer-const\n  let {\n    size,\n    param: arrayItemParam\n  } = (0, utils_js_1.extractArrayType)(param);\n  const dynamic = size === -1;\n  let consumed = 0;\n  const result = [];\n  let remaining = bytes; // dynamic array, we need to decode length\n\n  if (dynamic) {\n    const lengthResult = (0, number_js_1.decodeNumber)({\n      type: 'uint32',\n      name: ''\n    }, bytes);\n    size = Number(lengthResult.result);\n    consumed = lengthResult.consumed;\n    remaining = lengthResult.encoded;\n  }\n\n  const hasDynamicChild = (0, utils_js_1.isDynamic)(arrayItemParam);\n\n  if (hasDynamicChild) {\n    // known length but dynamic child, each child is actually head element with encoded offset\n    for (let i = 0; i < size; i += 1) {\n      const offsetResult = (0, number_js_1.decodeNumber)({\n        type: 'uint32',\n        name: ''\n      }, remaining.subarray(i * utils_js_1.WORD_SIZE));\n      consumed += offsetResult.consumed;\n      const decodedChildResult = (0, _1.decodeParamFromAbiParameter)(arrayItemParam, remaining.subarray(Number(offsetResult.result)));\n      consumed += decodedChildResult.consumed;\n      result.push(decodedChildResult.result);\n    }\n\n    return {\n      result,\n      encoded: remaining.subarray(consumed),\n      consumed\n    };\n  }\n\n  for (let i = 0; i < size; i += 1) {\n    // decode static params\n    const decodedChildResult = (0, _1.decodeParamFromAbiParameter)(arrayItemParam, bytes.subarray(consumed));\n    consumed += decodedChildResult.consumed;\n    result.push(decodedChildResult.result);\n  }\n\n  return {\n    result,\n    encoded: bytes.subarray(consumed),\n    consumed\n  };\n}\n\nexports.decodeArray = decodeArray;","map":{"version":3,"mappings":"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","names":["encodeArray","param","values","Array","isArray","web3_errors_1","abi","size","arrayItemParam","encodedParams","map","v","dynamic","dynamicItems","length","arrayLength","argumentsLength","encodingResult","encodedLength","type","name","encoded","p","exports","decodeArray","bytes","consumed","result","remaining","lengthResult","Number","hasDynamicChild","i","offsetResult","subarray","utils_js_1","decodedChildResult","push"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/coders/base/array.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { AbiParameter } from 'web3-types';\nimport { uint8ArrayConcat } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { decodeParamFromAbiParameter, encodeNumber, encodeParamFromAbiParameter } from '.';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { extractArrayType, isDynamic, WORD_SIZE } from '../utils.js';\nimport { decodeNumber } from './number.js';\nimport { encodeDynamicParams } from './utils.js';\n\nexport function encodeArray(param: AbiParameter, values: unknown): EncoderResult {\n\tif (!Array.isArray(values)) {\n\t\tthrow new AbiError('Expected value to be array', { abi: param, values });\n\t}\n\tconst { size, param: arrayItemParam } = extractArrayType(param);\n\tconst encodedParams = values.map(v => encodeParamFromAbiParameter(arrayItemParam, v));\n\tconst dynamic = size === -1;\n\tconst dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;\n\tif (!dynamic && values.length !== size) {\n\t\tthrow new AbiError(\"Given arguments count doesn't match array length\", {\n\t\t\tarrayLength: size,\n\t\t\targumentsLength: values.length,\n\t\t});\n\t}\n\tif (dynamic || dynamicItems) {\n\t\tconst encodingResult = encodeDynamicParams(encodedParams);\n\t\tif (dynamic) {\n\t\t\tconst encodedLength = encodeNumber(\n\t\t\t\t{ type: 'uint256', name: '' },\n\t\t\t\tencodedParams.length,\n\t\t\t).encoded;\n\t\t\treturn {\n\t\t\t\tdynamic: true,\n\t\t\t\tencoded:\n\t\t\t\t\tencodedParams.length > 0\n\t\t\t\t\t\t? uint8ArrayConcat(encodedLength, encodingResult)\n\t\t\t\t\t\t: encodedLength,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tdynamic: true,\n\t\t\tencoded: encodingResult,\n\t\t};\n\t}\n\n\treturn {\n\t\tdynamic: false,\n\t\tencoded: uint8ArrayConcat(...encodedParams.map(p => p.encoded)),\n\t};\n}\n\nexport function decodeArray(param: AbiParameter, bytes: Uint8Array): DecoderResult<unknown[]> {\n\t// eslint-disable-next-line prefer-const\n\tlet { size, param: arrayItemParam } = extractArrayType(param);\n\tconst dynamic = size === -1;\n\n\tlet consumed = 0;\n\tconst result: unknown[] = [];\n\tlet remaining = bytes;\n\t// dynamic array, we need to decode length\n\tif (dynamic) {\n\t\tconst lengthResult = decodeNumber({ type: 'uint32', name: '' }, bytes);\n\t\tsize = Number(lengthResult.result);\n\t\tconsumed = lengthResult.consumed;\n\t\tremaining = lengthResult.encoded;\n\t}\n\tconst hasDynamicChild = isDynamic(arrayItemParam);\n\tif (hasDynamicChild) {\n\t\t// known length but dynamic child, each child is actually head element with encoded offset\n\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\tconst offsetResult = decodeNumber(\n\t\t\t\t{ type: 'uint32', name: '' },\n\t\t\t\tremaining.subarray(i * WORD_SIZE),\n\t\t\t);\n\t\t\tconsumed += offsetResult.consumed;\n\t\t\tconst decodedChildResult = decodeParamFromAbiParameter(\n\t\t\t\tarrayItemParam,\n\t\t\t\tremaining.subarray(Number(offsetResult.result)),\n\t\t\t);\n\t\t\tconsumed += decodedChildResult.consumed;\n\t\t\tresult.push(decodedChildResult.result);\n\t\t}\n\t\treturn {\n\t\t\tresult,\n\t\t\tencoded: remaining.subarray(consumed),\n\t\t\tconsumed,\n\t\t};\n\t}\n\n\tfor (let i = 0; i < size; i += 1) {\n\t\t// decode static params\n\t\tconst decodedChildResult = decodeParamFromAbiParameter(\n\t\t\tarrayItemParam,\n\t\t\tbytes.subarray(consumed),\n\t\t);\n\t\tconsumed += decodedChildResult.consumed;\n\t\tresult.push(decodedChildResult.result);\n\t}\n\treturn {\n\t\tresult,\n\t\tencoded: bytes.subarray(consumed),\n\t\tconsumed,\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}