{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst rlp_1 = require(\"@ethereumjs/rlp\");\n\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst utils_js_1 = require(\"../common/utils.js\");\n\nconst constants_js_1 = require(\"./constants.js\");\n\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\n\nconst types_js_1 = require(\"./types.js\");\n\nconst TRANSACTION_TYPE = 0;\n\nfunction meetsEIP155(_v, chainId) {\n  const v = Number(_v);\n  const chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\n\n\nclass Transaction extends baseTransaction_js_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    this.common = this._validateTxV(this.v, opts.common);\n    this.gasPrice = (0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    if (this.gasPrice * this.gasLimit > constants_js_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n\n    baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        // eslint-disable-next-line no-lonely-if\n        if (meetsEIP155(this.v, this.common.chainId())) {\n          this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  static fromTxData(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  static fromSerializedTx(serialized) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const values = rlp_1.RLP.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  static fromValuesArray(values) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n    (0, web3_validator_1.validateNoLeadingZeroes)({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new Transaction({\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Uint8Array values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  raw() {\n    return [(0, utils_js_1.bigIntToUnpaddedUint8Array)(this.nonce), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasPrice), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.value), this.data, this.v !== undefined ? (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]), this.r !== undefined ? (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]), this.s !== undefined ? (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Uint8Array values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n\n\n  serialize() {\n    return rlp_1.RLP.encode(this.raw());\n  }\n\n  _getMessageToSign() {\n    const values = [(0, utils_js_1.bigIntToUnpaddedUint8Array)(this.nonce), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasPrice), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.value), this.data];\n\n    if (this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, utils_js_1.toUint8Array)(this.common.chainId()));\n      values.push((0, utils_js_1.unpadUint8Array)((0, utils_js_1.toUint8Array)(0)));\n      values.push((0, utils_js_1.unpadUint8Array)((0, utils_js_1.toUint8Array)(0)));\n    }\n\n    return values;\n  }\n\n  getMessageToSign() {\n    let hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    const message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(message));\n    }\n\n    return message;\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return super.getDataFee();\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(this.raw()));\n      }\n\n      return this.cache.hash;\n    }\n\n    return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(this.raw()));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    const message = this._getMessageToSign();\n\n    return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(message));\n  }\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  getSenderPublicKey() {\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n\n    this._validateHighS();\n\n    try {\n      return (0, utils_js_1.ecrecover)(msgHash, v, (0, utils_js_1.bigIntToUnpaddedUint8Array)(r), (0, utils_js_1.bigIntToUnpaddedUint8Array)(s), this.supports(types_js_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  }\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  _processSignature(_v, r, s) {\n    let v = _v;\n\n    if (this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8);\n    }\n\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v,\n      r: (0, utils_js_1.uint8ArrayToBigInt)(r),\n      s: (0, utils_js_1.uint8ArrayToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  toJSON() {\n    return {\n      nonce: (0, utils_js_1.bigIntToHex)(this.nonce),\n      gasPrice: (0, utils_js_1.bigIntToHex)(this.gasPrice),\n      gasLimit: (0, utils_js_1.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, utils_js_1.bigIntToHex)(this.value),\n      data: (0, web3_utils_1.bytesToHex)(this.data),\n      v: this.v !== undefined ? (0, utils_js_1.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, utils_js_1.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, utils_js_1.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  _validateTxV(_v, common) {\n    let chainIdBigInt;\n    const v = _v !== undefined ? Number(_v) : undefined; // Check for valid v values in the scope of a signed legacy tx\n\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n      }\n    } // No unsigned tx and EIP-155 activated and chain ID included\n\n\n    if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub;\n\n        if ((v - 35) % 2 === 0) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBigInt);\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n\n    errorStr += ` gasPrice=${this.gasPrice}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n\n}\n\nexports.Transaction = Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","meetsEIP155","_v","chainId","v","Number","chainIdDoubled","Transaction","baseTransaction_js_1","constructor","txData","opts","Object","type","common","_validateTxV","gasPrice","gasLimit","constants_js_1","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","_validateNotArray","gteHardfork","isSigned","activeCapabilities","push","types_js_1","EIP155ReplayProtection","freeze","_a","fromTxData","fromSerializedTx","serialized","values","rlp_1","decode","Array","isArray","fromValuesArray","length","nonce","to","value","data","r","s","raw","undefined","buf","Uint8Array","from","serialize","encode","_getMessageToSign","supports","getMessageToSign","hashMessage","message","getDataFee","cache","dataFee","hardfork","isFrozen","getUpfrontCost","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","_validateHighS","e","_processSignature","BigInt","txOptions","toJSON","toString","chainIdBigInt","numSub","_getCommon","errorStr","_getSharedErrorPostfix","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/tx/legacyTransaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport {\n\tbigIntToHex,\n\tbigIntToUnpaddedUint8Array,\n\tecrecover,\n\ttoUint8Array,\n\tuint8ArrayToBigInt,\n\tunpadUint8Array,\n} from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\n\nimport { BaseTransaction } from './baseTransaction.js';\n\nimport type { Common } from '../common/common.js';\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types.js';\nimport { Capability } from './types.js';\n\nconst TRANSACTION_TYPE = 0;\n\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\n\tconst v = Number(_v);\n\tconst chainIdDoubled = Number(chainId) * 2;\n\treturn v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nexport class Transaction extends BaseTransaction<Transaction> {\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n\t *\n\t * Notes:\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: TxData, opts: TxOptions = {}) {\n\t\treturn new Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tconst values = RLP.decode(serialized);\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input. Must be array');\n\t\t}\n\n\t\treturn this.fromValuesArray(values as Uint8Array[], opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t */\n\tpublic static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n\t\t// If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n\t\t// This happens if you get the RLP data from `raw()`\n\t\tif (values.length !== 6 && values.length !== 9) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\treturn new Transaction(\n\t\t\t{\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\tv,\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\n\t\tthis.common = this._validateTxV(this.v, opts.common);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice),\n\t\t);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tthis._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.common.gteHardfork('spuriousDragon')) {\n\t\t\tif (!this.isSigned()) {\n\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t} else {\n\t\t\t\t// EIP155 spec:\n\t\t\t\t// If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n\t\t\t\t// then when computing the hash of a transaction for purposes of signing or recovering\n\t\t\t\t// instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n\t\t\t\t// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\t\t\t\t// v and chain ID meet EIP-155 conditions\n\t\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\t\tif (meetsEIP155(this.v!, this.common.chainId())) {\n\t\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t *\n\t * For legacy txs this is also the correct format to add transactions\n\t * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n\t * for typed txs).\n\t *\n\t * For an unsigned tx this method returns the empty Uint8Array values\n\t * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n\t * representation have a look at {@link Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): TxValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the legacy transaction.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link Transaction.getMessageToSign}.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\treturn RLP.encode(this.raw());\n\t}\n\n\tprivate _getMessageToSign() {\n\t\tconst values = [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t];\n\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tvalues.push(toUint8Array(this.common.chainId()));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t}\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Returns the unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: the raw message message format for the legacy tx is not RLP encoded\n\t * and you might need to do yourself with:\n\t *\n\t * ```javascript\n\t * import { bufArrToArr } from '../util'\n\t * import { RLP } from '../rlp'\n\t * const message = tx.getMessageToSign(false)\n\t * const serializedMessage = RLP.encode(message) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage: false): Uint8Array[];\n\tpublic getMessageToSign(hashMessage?: true): Uint8Array;\n\tpublic getMessageToSign(hashMessage = true) {\n\t\tconst message = this._getMessageToSign();\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(RLP.encode(message));\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: super.getDataFee(),\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn super.getDataFee();\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(RLP.encode(this.raw()));\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(RLP.encode(this.raw()));\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature() {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('This transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tconst message = this._getMessageToSign();\n\t\treturn keccak256(RLP.encode(message));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv!,\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t\tthis.supports(Capability.EIP155ReplayProtection)\n\t\t\t\t\t? this.common.chainId()\n\t\t\t\t\t: undefined,\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * Process the v, r, s values from the `sign` method of the base transaction.\n\t */\n\tprotected _processSignature(_v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tlet v = _v;\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tv += this.common.chainId() * BigInt(2) + BigInt(8);\n\t\t}\n\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\tv,\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction.\n\t */\n\tpublic toJSON(): JsonTx {\n\t\treturn {\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Validates tx's `v` value\n\t */\n\tprivate _validateTxV(_v?: bigint, common?: Common): Common {\n\t\tlet chainIdBigInt;\n\t\tconst v = _v !== undefined ? Number(_v) : undefined;\n\t\t// Check for valid v values in the scope of a signed legacy tx\n\t\tif (v !== undefined) {\n\t\t\t// v is 1. not matching the EIP-155 chainId included case and...\n\t\t\t// v is 2. not matching the classic v=27 or v=28 case\n\t\t\tif (v < 37 && v !== 27 && v !== 28) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// No unsigned tx and EIP-155 activated and chain ID included\n\t\tif (\n\t\t\tv !== undefined &&\n\t\t\tv !== 0 &&\n\t\t\t(!common || common.gteHardfork('spuriousDragon')) &&\n\t\t\tv !== 27 &&\n\t\t\tv !== 28\n\t\t) {\n\t\t\tif (common) {\n\t\t\t\tif (!meetsEIP155(BigInt(v), common.chainId())) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Derive the original chain ID\n\t\t\t\tlet numSub;\n\t\t\t\tif ((v - 35) % 2 === 0) {\n\t\t\t\t\tnumSub = 35;\n\t\t\t\t} else {\n\t\t\t\t\tnumSub = 36;\n\t\t\t\t}\n\t\t\t\t// Use derived chain ID to create a proper Common\n\t\t\t\tchainIdBigInt = BigInt(v - numSub) / BigInt(2);\n\t\t\t}\n\t\t}\n\t\treturn this._getCommon(common, chainIdBigInt);\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` gasPrice=${this.gasPrice}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}