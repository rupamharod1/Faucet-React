{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.outputSyncingFormatter = exports.outputPostFormatter = exports.inputPostFormatter = exports.outputBlockFormatter = exports.outputTransactionReceiptFormatter = exports.outputLogFormatter = exports.inputLogFormatter = exports.inputTopicFormatter = exports.outputTransactionFormatter = exports.inputSignFormatter = exports.inputTransactionFormatter = exports.inputCallFormatter = exports.txInputOptionsFormatter = exports.inputAddressFormatter = exports.inputDefaultBlockNumberFormatter = exports.inputBlockNumberFormatter = exports.outputBigIntegerFormatter = exports.outputProofFormatter = exports.inputStorageKeysFormatter = void 0;\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_eth_iban_1 = require(\"web3-eth-iban\");\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n/* eslint-disable deprecation/deprecation */\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\n\n\nconst inputStorageKeysFormatter = keys => keys.map(num => (0, web3_utils_1.numberToHex)(num));\n\nexports.inputStorageKeysFormatter = inputStorageKeysFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\n\nconst outputProofFormatter = proof => ({\n  address: (0, web3_utils_1.toChecksumAddress)(proof.address),\n  nonce: (0, web3_utils_1.hexToNumberString)(proof.nonce),\n  balance: (0, web3_utils_1.hexToNumberString)(proof.balance)\n});\n\nexports.outputProofFormatter = outputProofFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\n\nconst outputBigIntegerFormatter = number => (0, web3_utils_1.toNumber)(number);\n\nexports.outputBigIntegerFormatter = outputBigIntegerFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\n\nconst inputBlockNumberFormatter = blockNumber => {\n  if ((0, web3_validator_1.isNullish)(blockNumber)) {\n    return undefined;\n  }\n\n  if (typeof blockNumber === 'string' && (0, web3_validator_1.isBlockTag)(blockNumber)) {\n    return blockNumber;\n  }\n\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n\n  if (typeof blockNumber === 'string' && (0, web3_utils_1.isHexStrict)(blockNumber)) {\n    return blockNumber.toLowerCase();\n  }\n\n  return (0, web3_utils_1.numberToHex)(blockNumber);\n};\n\nexports.inputBlockNumberFormatter = inputBlockNumberFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\n\nconst inputDefaultBlockNumberFormatter = (blockNumber, defaultBlock) => {\n  if (!blockNumber) {\n    return (0, exports.inputBlockNumberFormatter)(defaultBlock);\n  }\n\n  return (0, exports.inputBlockNumberFormatter)(blockNumber);\n};\n\nexports.inputDefaultBlockNumberFormatter = inputDefaultBlockNumberFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\n\nconst inputAddressFormatter = address => {\n  if (web3_eth_iban_1.Iban.isValid(address) && web3_eth_iban_1.Iban.isDirect(address)) {\n    const iban = new web3_eth_iban_1.Iban(address);\n    return iban.toAddress().toLowerCase();\n  }\n\n  if ((0, web3_utils_1.isAddress)(address)) {\n    return `0x${address.toLowerCase().replace('0x', '')}`;\n  }\n\n  throw new web3_errors_1.FormatterError(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\n\nexports.inputAddressFormatter = inputAddressFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\n\nconst txInputOptionsFormatter = options => {\n  var _a;\n\n  const modifiedOptions = Object.assign({}, options);\n\n  if (options.to) {\n    // it might be contract creation\n    modifiedOptions.to = (0, exports.inputAddressFormatter)(options.to);\n  }\n\n  if (options.data && options.input) {\n    throw new web3_errors_1.FormatterError('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n\n  if (!options.input && options.data) {\n    modifiedOptions.input = options.data;\n    delete modifiedOptions.data;\n  }\n\n  if (options.input && !options.input.startsWith('0x')) {\n    modifiedOptions.input = `0x${options.input}`;\n  }\n\n  if (modifiedOptions.input && !(0, web3_utils_1.isHexStrict)(modifiedOptions.input)) {\n    throw new web3_errors_1.FormatterError('The input field must be HEX encoded data.');\n  } // allow both\n\n\n  if (options.gas || options.gasLimit) {\n    modifiedOptions.gas = (0, web3_utils_1.toNumber)((_a = options.gas) !== null && _a !== void 0 ? _a : options.gasLimit);\n  }\n\n  if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n    delete modifiedOptions.gasPrice;\n  }\n\n  ['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId'].filter(key => !(0, web3_validator_1.isNullish)(modifiedOptions[key])).forEach(key => {\n    modifiedOptions[key] = (0, web3_utils_1.numberToHex)(modifiedOptions[key]);\n  });\n  return modifiedOptions;\n};\n\nexports.txInputOptionsFormatter = txInputOptionsFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\n\nconst inputCallFormatter = (options, defaultAccount) => {\n  var _a;\n\n  const opts = (0, exports.txInputOptionsFormatter)(options);\n  const from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n\n  if (from) {\n    opts.from = (0, exports.inputAddressFormatter)(from);\n  }\n\n  return opts;\n};\n\nexports.inputCallFormatter = inputCallFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\n\nconst inputTransactionFormatter = (options, defaultAccount) => {\n  var _a;\n\n  const opts = (0, exports.txInputOptionsFormatter)(options); // check from, only if not number, or object\n\n  if (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n    opts.from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n\n    if (!options.from && !(typeof options.from === 'number')) {\n      throw new web3_errors_1.FormatterError('The send transactions \"from\" field must be defined!');\n    }\n\n    opts.from = (0, exports.inputAddressFormatter)(options.from);\n  }\n\n  return opts;\n};\n\nexports.inputTransactionFormatter = inputTransactionFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\n\nconst inputSignFormatter = data => (0, web3_utils_1.isHexStrict)(data) ? data : (0, web3_utils_1.utf8ToHex)(data);\n\nexports.inputSignFormatter = inputSignFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\n\nconst outputTransactionFormatter = tx => {\n  const modifiedTx = Object.assign({}, tx);\n\n  if (tx.blockNumber) {\n    modifiedTx.blockNumber = (0, web3_utils_1.hexToNumber)(tx.blockNumber);\n  }\n\n  if (tx.transactionIndex) {\n    modifiedTx.transactionIndex = (0, web3_utils_1.hexToNumber)(tx.transactionIndex);\n  }\n\n  modifiedTx.nonce = (0, web3_utils_1.hexToNumber)(tx.nonce);\n  modifiedTx.gas = (0, web3_utils_1.hexToNumber)(tx.gas);\n\n  if (tx.gasPrice) {\n    modifiedTx.gasPrice = (0, exports.outputBigIntegerFormatter)(tx.gasPrice);\n  }\n\n  if (tx.maxFeePerGas) {\n    modifiedTx.maxFeePerGas = (0, exports.outputBigIntegerFormatter)(tx.maxFeePerGas);\n  }\n\n  if (tx.maxPriorityFeePerGas) {\n    modifiedTx.maxPriorityFeePerGas = (0, exports.outputBigIntegerFormatter)(tx.maxPriorityFeePerGas);\n  }\n\n  if (tx.type) {\n    modifiedTx.type = (0, web3_utils_1.hexToNumber)(tx.type);\n  }\n\n  modifiedTx.value = (0, exports.outputBigIntegerFormatter)(tx.value);\n\n  if (tx.to && (0, web3_utils_1.isAddress)(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    modifiedTx.to = (0, web3_utils_1.toChecksumAddress)(tx.to);\n  } else {\n    modifiedTx.to = undefined; // set to `null` if invalid address\n  }\n\n  if (tx.from) {\n    modifiedTx.from = (0, web3_utils_1.toChecksumAddress)(tx.from);\n  }\n\n  return modifiedTx;\n};\n\nexports.outputTransactionFormatter = outputTransactionFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nconst inputTopicFormatter = topic => {\n  // Using \"null\" value intentionally for validation\n  // eslint-disable-next-line no-null/no-null\n  if ((0, web3_validator_1.isNullish)(topic)) return null;\n  const value = String(topic);\n  return (0, web3_validator_1.isHex)(value) ? value : (0, web3_utils_1.fromUtf8)(value);\n};\n\nexports.inputTopicFormatter = inputTopicFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\n\nconst inputLogFormatter = filter => {\n  var _a;\n\n  const val = (0, web3_validator_1.isNullish)(filter) ? {} : (0, web3_utils_1.mergeDeep)({}, filter); // If options !== undefined, don't blow out existing data\n\n  if ((0, web3_validator_1.isNullish)(val.fromBlock)) {\n    val.fromBlock = web3_types_1.BlockTags.LATEST;\n  }\n\n  val.fromBlock = (0, exports.inputBlockNumberFormatter)(val.fromBlock);\n\n  if (!(0, web3_validator_1.isNullish)(val.toBlock)) {\n    val.toBlock = (0, exports.inputBlockNumberFormatter)(val.toBlock);\n  } // make sure topics, get converted to hex\n\n\n  val.topics = (_a = val.topics) !== null && _a !== void 0 ? _a : [];\n  val.topics = val.topics.map(topic => Array.isArray(topic) ? topic.map(exports.inputTopicFormatter) : (0, exports.inputTopicFormatter)(topic));\n\n  if (val.address) {\n    val.address = Array.isArray(val.address) ? val.address.map(addr => (0, exports.inputAddressFormatter)(addr)) : (0, exports.inputAddressFormatter)(val.address);\n  }\n\n  return val;\n};\n\nexports.inputLogFormatter = inputLogFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\n\nconst outputLogFormatter = log => {\n  const modifiedLog = Object.assign({}, log);\n  const logIndex = typeof log.logIndex === 'string' ? log.logIndex : (0, web3_utils_1.numberToHex)(log.logIndex); // generate a custom log id\n\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n    const shaId = (0, web3_utils_1.sha3Raw)(`${log.blockHash.replace('0x', '')}${log.transactionHash.replace('0x', '')}${logIndex.replace('0x', '')}`);\n    modifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n  } else if (!log.id) {\n    modifiedLog.id = undefined;\n  }\n\n  if (log.blockNumber && (0, web3_utils_1.isHexStrict)(log.blockNumber)) {\n    modifiedLog.blockNumber = (0, web3_utils_1.hexToNumber)(log.blockNumber);\n  }\n\n  if (log.transactionIndex && (0, web3_utils_1.isHexStrict)(log.transactionIndex)) {\n    modifiedLog.transactionIndex = (0, web3_utils_1.hexToNumber)(log.transactionIndex);\n  }\n\n  if (log.logIndex && (0, web3_utils_1.isHexStrict)(log.logIndex)) {\n    modifiedLog.logIndex = (0, web3_utils_1.hexToNumber)(log.logIndex);\n  }\n\n  if (log.address) {\n    modifiedLog.address = (0, web3_utils_1.toChecksumAddress)(log.address);\n  }\n\n  return modifiedLog;\n};\n\nexports.outputLogFormatter = outputLogFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\n\nconst outputTransactionReceiptFormatter = receipt => {\n  if (typeof receipt !== 'object') {\n    throw new web3_errors_1.FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n  }\n\n  const modifiedReceipt = Object.assign({}, receipt);\n\n  if (receipt.blockNumber) {\n    modifiedReceipt.blockNumber = (0, web3_utils_1.hexToNumber)(receipt.blockNumber);\n  }\n\n  if (receipt.transactionIndex) {\n    modifiedReceipt.transactionIndex = (0, web3_utils_1.hexToNumber)(receipt.transactionIndex);\n  }\n\n  modifiedReceipt.cumulativeGasUsed = (0, web3_utils_1.hexToNumber)(receipt.cumulativeGasUsed);\n  modifiedReceipt.gasUsed = (0, web3_utils_1.hexToNumber)(receipt.gasUsed);\n\n  if (receipt.logs && Array.isArray(receipt.logs)) {\n    modifiedReceipt.logs = receipt.logs.map(exports.outputLogFormatter);\n  }\n\n  if (receipt.effectiveGasPrice) {\n    modifiedReceipt.effectiveGasPrice = (0, web3_utils_1.hexToNumber)(receipt.effectiveGasPrice);\n  }\n\n  if (receipt.contractAddress) {\n    modifiedReceipt.contractAddress = (0, web3_utils_1.toChecksumAddress)(receipt.contractAddress);\n  }\n\n  if (receipt.status) {\n    modifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n  }\n\n  return modifiedReceipt;\n};\n\nexports.outputTransactionReceiptFormatter = outputTransactionReceiptFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\n\nconst outputBlockFormatter = block => {\n  const modifiedBlock = Object.assign({}, block); // transform to number\n\n  modifiedBlock.gasLimit = (0, web3_utils_1.hexToNumber)(block.gasLimit);\n  modifiedBlock.gasUsed = (0, web3_utils_1.hexToNumber)(block.gasUsed);\n  modifiedBlock.size = (0, web3_utils_1.hexToNumber)(block.size);\n  modifiedBlock.timestamp = (0, web3_utils_1.hexToNumber)(block.timestamp);\n\n  if (block.number) {\n    modifiedBlock.number = (0, web3_utils_1.hexToNumber)(block.number);\n  }\n\n  if (block.difficulty) {\n    modifiedBlock.difficulty = (0, exports.outputBigIntegerFormatter)(block.difficulty);\n  }\n\n  if (block.totalDifficulty) {\n    modifiedBlock.totalDifficulty = (0, exports.outputBigIntegerFormatter)(block.totalDifficulty);\n  }\n\n  if (block.transactions && Array.isArray(block.transactions)) {\n    modifiedBlock.transactions = block.transactions.map(exports.outputTransactionFormatter);\n  }\n\n  if (block.miner) {\n    modifiedBlock.miner = (0, web3_utils_1.toChecksumAddress)(block.miner);\n  }\n\n  if (block.baseFeePerGas) {\n    modifiedBlock.baseFeePerGas = (0, exports.outputBigIntegerFormatter)(block.baseFeePerGas);\n  }\n\n  return modifiedBlock;\n};\n\nexports.outputBlockFormatter = outputBlockFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\n\nconst inputPostFormatter = post => {\n  var _a;\n\n  const modifiedPost = Object.assign({}, post);\n\n  if (post.ttl) {\n    modifiedPost.ttl = (0, web3_utils_1.numberToHex)(post.ttl);\n  }\n\n  if (post.workToProve) {\n    modifiedPost.workToProve = (0, web3_utils_1.numberToHex)(post.workToProve);\n  }\n\n  if (post.priority) {\n    modifiedPost.priority = (0, web3_utils_1.numberToHex)(post.priority);\n  } // fallback\n\n\n  if (post.topics && !Array.isArray(post.topics)) {\n    modifiedPost.topics = post.topics ? [post.topics] : [];\n  } // format the following options\n\n\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(topic => topic.startsWith('0x') ? topic : (0, web3_utils_1.fromUtf8)(topic));\n  return modifiedPost;\n};\n\nexports.inputPostFormatter = inputPostFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\n\nconst outputPostFormatter = post => {\n  var _a;\n\n  const modifiedPost = Object.assign({}, post);\n\n  if (post.expiry) {\n    modifiedPost.expiry = (0, web3_utils_1.hexToNumber)(post.expiry);\n  }\n\n  if (post.sent) {\n    modifiedPost.sent = (0, web3_utils_1.hexToNumber)(post.sent);\n  }\n\n  if (post.ttl) {\n    modifiedPost.ttl = (0, web3_utils_1.hexToNumber)(post.ttl);\n  }\n\n  if (post.workProved) {\n    modifiedPost.workProved = (0, web3_utils_1.hexToNumber)(post.workProved);\n  } // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n\n\n  if (!post.topics) {\n    modifiedPost.topics = [];\n  }\n\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(web3_utils_1.toUtf8);\n  return modifiedPost;\n};\n\nexports.outputPostFormatter = outputPostFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n */\n\nconst outputSyncingFormatter = result => {\n  const modifiedResult = Object.assign({}, result);\n  modifiedResult.startingBlock = (0, web3_utils_1.hexToNumber)(result.startingBlock);\n  modifiedResult.currentBlock = (0, web3_utils_1.hexToNumber)(result.currentBlock);\n  modifiedResult.highestBlock = (0, web3_utils_1.hexToNumber)(result.highestBlock);\n\n  if (result.knownStates) {\n    modifiedResult.knownStates = (0, web3_utils_1.hexToNumber)(result.knownStates);\n  }\n\n  if (result.pulledStates) {\n    modifiedResult.pulledStates = (0, web3_utils_1.hexToNumber)(result.pulledStates);\n  }\n\n  return modifiedResult;\n};\n\nexports.outputSyncingFormatter = outputSyncingFormatter;","map":{"version":3,"mappings":"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","names":["inputStorageKeysFormatter","keys","map","num","exports","outputProofFormatter","proof","address","nonce","balance","outputBigIntegerFormatter","number","inputBlockNumberFormatter","blockNumber","undefined","toLowerCase","inputDefaultBlockNumberFormatter","defaultBlock","inputAddressFormatter","web3_eth_iban_1","isValid","isDirect","iban","toAddress","replace","web3_errors_1","txInputOptionsFormatter","options","modifiedOptions","Object","to","data","input","startsWith","gas","gasLimit","_a","maxPriorityFeePerGas","maxFeePerGas","gasPrice","filter","key","forEach","inputCallFormatter","defaultAccount","opts","from","inputTransactionFormatter","inputSignFormatter","outputTransactionFormatter","tx","modifiedTx","transactionIndex","type","value","inputTopicFormatter","topic","String","inputLogFormatter","val","fromBlock","web3_types_1","LATEST","toBlock","topics","Array","isArray","addr","outputLogFormatter","log","modifiedLog","logIndex","blockHash","transactionHash","shaId","id","slice","outputTransactionReceiptFormatter","receipt","modifiedReceipt","cumulativeGasUsed","gasUsed","logs","effectiveGasPrice","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","modifiedBlock","size","timestamp","difficulty","totalDifficulty","transactions","miner","baseFeePerGas","inputPostFormatter","post","modifiedPost","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","web3_utils_1","outputSyncingFormatter","result","modifiedResult","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-core/src/formatters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport {\n\tBlockTags,\n\tFilter,\n\tNumbers,\n\tTopic,\n\tBlockInput,\n\tBlockOutput,\n\tLogsInput,\n\tLogsOutput,\n\tMutable,\n\tPostInput,\n\tPostOutput,\n\tProof,\n\tReceiptInput,\n\tReceiptOutput,\n\tSyncInput,\n\tSyncOutput,\n\tTransactionInput,\n\tTransactionOutput,\n} from 'web3-types';\nimport {\n\tfromUtf8,\n\thexToNumber,\n\thexToNumberString,\n\tisAddress,\n\tisHexStrict,\n\tmergeDeep,\n\tnumberToHex,\n\tsha3Raw,\n\ttoChecksumAddress,\n\ttoNumber,\n\ttoUtf8,\n\tutf8ToHex,\n} from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = (keys: Array<string>) => keys.map(num => numberToHex(num));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = (proof: Proof): Proof => ({\n\taddress: toChecksumAddress(proof.address),\n\tnonce: hexToNumberString(proof.nonce),\n\tbalance: hexToNumberString(proof.balance),\n});\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = (number: Numbers) => toNumber(number);\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = (blockNumber: Numbers | undefined) => {\n\tif (isNullish(blockNumber)) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n\t\treturn blockNumber;\n\t}\n\n\tif (blockNumber === 'genesis') {\n\t\treturn '0x0';\n\t}\n\n\tif (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n\t\treturn blockNumber.toLowerCase();\n\t}\n\n\treturn numberToHex(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (\n\tblockNumber: Numbers | undefined,\n\tdefaultBlock: Numbers,\n) => {\n\tif (!blockNumber) {\n\t\treturn inputBlockNumberFormatter(defaultBlock);\n\t}\n\n\treturn inputBlockNumberFormatter(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = (address: string): string | never => {\n\tif (Iban.isValid(address) && Iban.isDirect(address)) {\n\t\tconst iban = new Iban(address);\n\n\t\treturn iban.toAddress().toLowerCase();\n\t}\n\n\tif (isAddress(address)) {\n\t\treturn `0x${address.toLowerCase().replace('0x', '')}`;\n\t}\n\n\tthrow new FormatterError(\n\t\t`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`,\n\t);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = (options: TransactionInput): Mutable<TransactionOutput> => {\n\tconst modifiedOptions = { ...options } as unknown as Mutable<TransactionOutput>;\n\n\tif (options.to) {\n\t\t// it might be contract creation\n\t\tmodifiedOptions.to = inputAddressFormatter(options.to);\n\t}\n\n\tif (options.data && options.input) {\n\t\tthrow new FormatterError(\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n\n\tif (!options.input && options.data) {\n\t\tmodifiedOptions.input = options.data;\n\t\tdelete modifiedOptions.data;\n\t}\n\n\tif (options.input && !options.input.startsWith('0x')) {\n\t\tmodifiedOptions.input = `0x${options.input}`;\n\t}\n\n\tif (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n\t\tthrow new FormatterError('The input field must be HEX encoded data.');\n\t}\n\n\t// allow both\n\tif (options.gas || options.gasLimit) {\n\t\tmodifiedOptions.gas = toNumber(options.gas ?? options.gasLimit);\n\t}\n\n\tif (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n\t\tdelete modifiedOptions.gasPrice;\n\t}\n\n\t['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId']\n\t\t.filter(key => !isNullish(modifiedOptions[key]))\n\t\t.forEach(key => {\n\t\t\tmodifiedOptions[key] = numberToHex(modifiedOptions[key] as Numbers);\n\t\t});\n\n\treturn modifiedOptions as TransactionOutput;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\tconst from = opts.from ?? defaultAccount;\n\n\tif (from) {\n\t\topts.from = inputAddressFormatter(from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\t// check from, only if not number, or object\n\tif (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n\t\topts.from = opts.from ?? defaultAccount;\n\n\t\tif (!options.from && !(typeof options.from === 'number')) {\n\t\t\tthrow new FormatterError('The send transactions \"from\" field must be defined!');\n\t\t}\n\n\t\topts.from = inputAddressFormatter(options.from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = (data: string) => (isHexStrict(data) ? data : utf8ToHex(data));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = (tx: TransactionInput): TransactionOutput => {\n\tconst modifiedTx = { ...tx } as unknown as Mutable<TransactionOutput>;\n\n\tif (tx.blockNumber) {\n\t\tmodifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n\t}\n\n\tif (tx.transactionIndex) {\n\t\tmodifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n\t}\n\n\tmodifiedTx.nonce = hexToNumber(tx.nonce);\n\tmodifiedTx.gas = hexToNumber(tx.gas);\n\n\tif (tx.gasPrice) {\n\t\tmodifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n\t}\n\n\tif (tx.maxFeePerGas) {\n\t\tmodifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n\t}\n\n\tif (tx.maxPriorityFeePerGas) {\n\t\tmodifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n\t}\n\n\tif (tx.type) {\n\t\tmodifiedTx.type = hexToNumber(tx.type);\n\t}\n\n\tmodifiedTx.value = outputBigIntegerFormatter(tx.value);\n\n\tif (tx.to && isAddress(tx.to)) {\n\t\t// tx.to could be `0x0` or `null` while contract creation\n\t\tmodifiedTx.to = toChecksumAddress(tx.to);\n\t} else {\n\t\tmodifiedTx.to = undefined; // set to `null` if invalid address\n\t}\n\n\tif (tx.from) {\n\t\tmodifiedTx.from = toChecksumAddress(tx.from);\n\t}\n\n\treturn modifiedTx;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = (topic: Topic): Topic | null => {\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\tif (isNullish(topic)) return null;\n\n\tconst value = String(topic);\n\n\treturn isHex(value) ? value : fromUtf8(value);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = (filter: Filter) => {\n\tconst val: Mutable<Filter> = isNullish(filter)\n\t\t? {}\n\t\t: mergeDeep({}, filter as Record<string, unknown>);\n\n\t// If options !== undefined, don't blow out existing data\n\tif (isNullish(val.fromBlock)) {\n\t\tval.fromBlock = BlockTags.LATEST;\n\t}\n\n\tval.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n\n\tif (!isNullish(val.toBlock)) {\n\t\tval.toBlock = inputBlockNumberFormatter(val.toBlock);\n\t}\n\n\t// make sure topics, get converted to hex\n\tval.topics = val.topics ?? [];\n\tval.topics = val.topics.map(topic =>\n\t\tArray.isArray(topic)\n\t\t\t? (topic.map(inputTopicFormatter) as Topic[])\n\t\t\t: inputTopicFormatter(topic as Topic),\n\t);\n\n\tif (val.address) {\n\t\tval.address = Array.isArray(val.address)\n\t\t\t? val.address.map(addr => inputAddressFormatter(addr))\n\t\t\t: inputAddressFormatter(val.address);\n\t}\n\n\treturn val as Filter;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = (log: Partial<LogsInput>): LogsOutput => {\n\tconst modifiedLog = { ...log } as unknown as Mutable<LogsOutput>;\n\n\tconst logIndex =\n\t\ttypeof log.logIndex === 'string'\n\t\t\t? log.logIndex\n\t\t\t: numberToHex(log.logIndex as unknown as number);\n\n\t// generate a custom log id\n\tif (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n\t\tconst shaId = sha3Raw(\n\t\t\t`${log.blockHash.replace('0x', '')}${log.transactionHash.replace(\n\t\t\t\t'0x',\n\t\t\t\t'',\n\t\t\t)}${logIndex.replace('0x', '')}`,\n\t\t);\n\t\tmodifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n\t} else if (!log.id) {\n\t\tmodifiedLog.id = undefined;\n\t}\n\n\tif (log.blockNumber && isHexStrict(log.blockNumber)) {\n\t\tmodifiedLog.blockNumber = hexToNumber(log.blockNumber);\n\t}\n\tif (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n\t\tmodifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n\t}\n\n\tif (log.logIndex && isHexStrict(log.logIndex)) {\n\t\tmodifiedLog.logIndex = hexToNumber(log.logIndex);\n\t}\n\n\tif (log.address) {\n\t\tmodifiedLog.address = toChecksumAddress(log.address);\n\t}\n\n\treturn modifiedLog;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = (receipt: ReceiptInput): ReceiptOutput => {\n\tif (typeof receipt !== 'object') {\n\t\tthrow new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n\t}\n\tconst modifiedReceipt = { ...receipt } as unknown as Mutable<ReceiptOutput>;\n\n\tif (receipt.blockNumber) {\n\t\tmodifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n\t}\n\n\tif (receipt.transactionIndex) {\n\t\tmodifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n\t}\n\n\tmodifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n\tmodifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n\tif (receipt.logs && Array.isArray(receipt.logs)) {\n\t\tmodifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n\t}\n\n\tif (receipt.effectiveGasPrice) {\n\t\tmodifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n\t}\n\n\tif (receipt.contractAddress) {\n\t\tmodifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n\t}\n\n\tif (receipt.status) {\n\t\tmodifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n\t}\n\n\treturn modifiedReceipt;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = (block: BlockInput): BlockOutput => {\n\tconst modifiedBlock = { ...block } as unknown as Mutable<BlockOutput>;\n\n\t// transform to number\n\tmodifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n\tmodifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n\tmodifiedBlock.size = hexToNumber(block.size);\n\tmodifiedBlock.timestamp = hexToNumber(block.timestamp);\n\n\tif (block.number) {\n\t\tmodifiedBlock.number = hexToNumber(block.number);\n\t}\n\n\tif (block.difficulty) {\n\t\tmodifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n\t}\n\n\tif (block.totalDifficulty) {\n\t\tmodifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n\t}\n\n\tif (block.transactions && Array.isArray(block.transactions)) {\n\t\tmodifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n\t}\n\n\tif (block.miner) {\n\t\tmodifiedBlock.miner = toChecksumAddress(block.miner);\n\t}\n\n\tif (block.baseFeePerGas) {\n\t\tmodifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);\n\t}\n\n\treturn modifiedBlock;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = (post: PostOutput): PostInput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostInput>;\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = numberToHex(post.ttl);\n\t}\n\n\tif (post.workToProve) {\n\t\tmodifiedPost.workToProve = numberToHex(post.workToProve);\n\t}\n\n\tif (post.priority) {\n\t\tmodifiedPost.priority = numberToHex(post.priority);\n\t}\n\n\t// fallback\n\tif (post.topics && !Array.isArray(post.topics)) {\n\t\tmodifiedPost.topics = post.topics ? [post.topics] : [];\n\t}\n\n\t// format the following options\n\tmodifiedPost.topics = modifiedPost.topics?.map(topic =>\n\t\ttopic.startsWith('0x') ? topic : fromUtf8(topic),\n\t);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = (post: PostInput): PostOutput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostOutput>;\n\n\tif (post.expiry) {\n\t\tmodifiedPost.expiry = hexToNumber(post.expiry);\n\t}\n\n\tif (post.sent) {\n\t\tmodifiedPost.sent = hexToNumber(post.sent);\n\t}\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = hexToNumber(post.ttl);\n\t}\n\n\tif (post.workProved) {\n\t\tmodifiedPost.workProved = hexToNumber(post.workProved);\n\t}\n\n\t// post.payloadRaw = post.payload;\n\t// post.payload = utils.hexToAscii(post.payload);\n\n\t// if (utils.isJson(post.payload)) {\n\t//     post.payload = JSON.parse(post.payload);\n\t// }\n\n\t// format the following options\n\tif (!post.topics) {\n\t\tmodifiedPost.topics = [];\n\t}\n\n\tmodifiedPost.topics = modifiedPost.topics?.map(toUtf8);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = (result: SyncInput): SyncOutput => {\n\tconst modifiedResult = { ...result } as unknown as Mutable<SyncOutput>;\n\n\tmodifiedResult.startingBlock = hexToNumber(result.startingBlock);\n\tmodifiedResult.currentBlock = hexToNumber(result.currentBlock);\n\tmodifiedResult.highestBlock = hexToNumber(result.highestBlock);\n\n\tif (result.knownStates) {\n\t\tmodifiedResult.knownStates = hexToNumber(result.knownStates);\n\t}\n\n\tif (result.pulledStates) {\n\t\tmodifiedResult.pulledStates = hexToNumber(result.pulledStates);\n\t}\n\n\treturn modifiedResult;\n};\n"]},"metadata":{},"sourceType":"script"}