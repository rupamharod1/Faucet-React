{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // Disabling because returnTypes must be last param to match 1.x params\n\n/* eslint-disable default-param-last */\n\n\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js'; // eslint-disable-next-line import/no-cycle\n\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js'; // eslint-disable-next-line import/no-cycle\n\nimport { trySendTransaction } from './utils/try_send_transaction.js'; // eslint-disable-next-line import/no-cycle\n\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js'; // eslint-disable-next-line import/no-cycle\n\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n}); // TODO Add returnFormat parameter\n\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n}); // TODO consider adding returnFormat parameter (to format address as bytes)\n\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getBalance(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getStorageAt(web3Context, address, storageSlot) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getCode(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n\n    return format(blockSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getBlockTransactionCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getBlockUncleCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getUncle(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n\n    return format(blockSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat, {\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getTransactionFromBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getTransactionCount(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function sendTransaction(web3Context, transaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT);\n\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        }); // Formatting signedTransaction to be send to RPC endpoint\n\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n\n        try {\n          const {\n            v,\n            r,\n            s\n          } = unSerializedTransactionWithFrom,\n                txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT)); // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n\n    return isString(response) ? decodeSignedTransaction(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat, {\n        fillInputAndData: true\n      })\n    };\n  });\n} // TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function call(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n} // TODO - Investigate whether response is padded as 1.x docs suggest\n\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function estimateGas(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n} // TODO - Add input formatting to filter\n\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n\n      return format(logSchema, res, returnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, // Response is number in hex formatted string\n    response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getProof(web3Context, address, storageKeys) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat);\n  });\n} // TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function getFeeHistory(web3Context, blockCount) {\n  let newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function createAccessList(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiBA;;AACA;;;AACA,SACCA,eADD,EAICC,qBAJD,QA8BO,YA9BP;AA+BA,SAAsBC,cAAtB,QAA4C,WAA5C;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,iBAA7B,EAAgDC,WAAhD,QAAmE,YAAnE;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,gBAAzD;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,SAASC,uBAAT,QAAwC,sCAAxC;AACA,SACCC,aADD,EAECC,WAFD,EAGCC,gBAHD,EAICC,SAJD,EAKCC,wBALD,EAMCC,sBAND,EAOCC,qBAPD,QAQO,cARP,C,CAeA;;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,iBAAT,QAAkC,+BAAlC,C,CACA;;AACA,SAASC,kBAAT,QAAmC,iCAAnC,C,CACA;;AACA,SAASC,yBAAT,QAA0C,yCAA1C;AACA,SAASC,kBAAT,QAAmC,gBAAnC,C,CACA;;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAEA;;;;;AAIA,OAAO,MAAMC,kBAAkB,GAAUC,WAAP,IAAoDC;EACrF,oBAAa,CAACF,kBAAd,CAAiCC,WAAW,CAACE,cAA7C;AAA4D,CADyB,CAA/E,C,CAGP;;AACA;;;;;AAIA,OAAO,MAAMC,SAAS,GAAUH,WAAP,IAAoDC;EAC5E,oBAAa,CAACG,UAAd,CAAyBJ,WAAW,CAACE,cAArC;AAAoD,CADwB,CAAtE,C,CAGP;;AACA;;;;;AAIA,OAAO,MAAMG,WAAW,GAAUL,WAAP,IAAoDC;EAC9E,oBAAa,CAACI,WAAd,CAA0BL,WAAW,CAACE,cAAtC;AAAqD,CADyB,CAAxE;AAGP;;;;;AAIA,OAAO,MAAMI,QAAQ,GAAUN,WAAP,IAAoDC;EAC3E,oBAAa,CAACM,SAAd,CAAwBP,WAAW,CAACE,cAApC;AAAmD,CADwB,CAArE;AAGP;;;;;AAIA,OAAM,SAAgBM,WAAhB,CACLR,WADK,EAELS,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAACwB,WAAd,CAA0BR,WAAW,CAACE,cAAtC,CAAvB;IAEA,OAAO5B,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBE,WAAhB,CACLX,WADK,EAELS,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAAC2B,WAAd,CAA0BX,WAAW,CAACE,cAAtC,CAAvB;IAEA,OAAO5B,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBG,cAAhB,CACLZ,WADK,EAELS,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAAC4B,cAAd,CAA6BZ,WAAW,CAACE,cAAzC,CAAvB;IAEA,OAAO5B,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBI,UAAhB,CACLb,WADK,EAELc,OAFK,EAIqB;EAAA,IAD1BC,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMQ,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAGA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAAC6B,UAAd,CACtBb,WAAW,CAACE,cADU,EAEtBY,OAFsB,EAGtBG,oBAHsB,CAAvB;IAKA,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBS,YAAhB,CACLlB,WADK,EAELc,OAFK,EAGLK,WAHK,EAKqB;EAAA,IAD1BJ,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMW,oBAAoB,GAAG9C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqB6C,WAArB,EAAkChD,eAAlC,CAAnC;IACA,MAAM8C,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAGA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAACkC,YAAd,CACtBlB,WAAW,CAACE,cADU,EAEtBY,OAFsB,EAGtBM,oBAHsB,EAItBH,oBAJsB,CAAvB;IAMA,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBoC,QAAtB,EAAyCD,YAAzC,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBY,OAAhB,CACLrB,WADK,EAELc,OAFK,EAIqB;EAAA,IAD1BC,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMQ,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAGA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAACqC,OAAd,CACtBrB,WAAW,CAACE,cADU,EAEtBY,OAFsB,EAGtBG,oBAHsB,CAAvB;IAKA,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBoC,QAAtB,EAAyCD,YAAzC,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBa,QAAhB,CACLtB,WADK,EAIqB;EAAA,IAF1BuB,KAE0B,uEAFQvB,WAAW,CAACgB,YAEpB;EAAA,IAD1BQ,QAC0B,uEADf,KACe;EAAA,IAA1Bf,YAA0B;;IAE1B,IAAIC,QAAJ;;IACA,IAAI9B,OAAO,CAAC2C,KAAD,CAAX,EAAoB;MACnB,MAAME,kBAAkB,GAAGnD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAwBiD,KAAxB,EAA+BpD,eAA/B,CAAjC;MACAuC,QAAQ,GAAG,MAAM1B,aAAa,CAAC0C,cAAd,CAChB1B,WAAW,CAACE,cADI,EAEhBuB,kBAFgB,EAGhBD,QAHgB,CAAjB;IAKA,CAPD,MAOO;MACN,MAAMP,oBAAoB,GAAGtC,UAAU,CAAC4C,KAAD,CAAV,GACzBA,KADyB,GAE1BjD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAqBiD,KAArB,EAAuCpD,eAAvC,CAFT;MAGAuC,QAAQ,GAAG,MAAM1B,aAAa,CAAC2C,gBAAd,CAChB3B,WAAW,CAACE,cADI,EAEhBe,oBAFgB,EAGhBO,QAHgB,CAAjB;IAKA;;IACD,OAAOlD,MAAM,CAACa,WAAD,EAAcuB,QAAd,EAA4CD,YAA5C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBmB,wBAAhB,CACL5B,WADK,EAGqB;EAAA,IAD1BuB,KAC0B,uEADQvB,WAAW,CAACgB,YACpB;EAAA,IAA1BP,YAA0B;;IAE1B,IAAIC,QAAJ;;IACA,IAAI9B,OAAO,CAAC2C,KAAD,CAAX,EAAoB;MACnB,MAAME,kBAAkB,GAAGnD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAwBiD,KAAxB,EAA+BpD,eAA/B,CAAjC;MACAuC,QAAQ,GAAG,MAAM1B,aAAa,CAAC6C,8BAAd,CAChB7B,WAAW,CAACE,cADI,EAEhBuB,kBAFgB,CAAjB;IAIA,CAND,MAMO;MACN,MAAMR,oBAAoB,GAAGtC,UAAU,CAAC4C,KAAD,CAAV,GACzBA,KADyB,GAE1BjD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAqBiD,KAArB,EAAuCpD,eAAvC,CAFT;MAGAuC,QAAQ,GAAG,MAAM1B,aAAa,CAAC8C,gCAAd,CAChB9B,WAAW,CAACE,cADI,EAEhBe,oBAFgB,CAAjB;IAIA;;IAED,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBsB,kBAAhB,CACL/B,WADK,EAGqB;EAAA,IAD1BuB,KAC0B,uEADQvB,WAAW,CAACgB,YACpB;EAAA,IAA1BP,YAA0B;;IAE1B,IAAIC,QAAJ;;IACA,IAAI9B,OAAO,CAAC2C,KAAD,CAAX,EAAoB;MACnB,MAAME,kBAAkB,GAAGnD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAwBiD,KAAxB,EAA+BpD,eAA/B,CAAjC;MACAuC,QAAQ,GAAG,MAAM1B,aAAa,CAACgD,wBAAd,CAChBhC,WAAW,CAACE,cADI,EAEhBuB,kBAFgB,CAAjB;IAIA,CAND,MAMO;MACN,MAAMR,oBAAoB,GAAGtC,UAAU,CAAC4C,KAAD,CAAV,GACzBA,KADyB,GAE1BjD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAqBiD,KAArB,EAAuCpD,eAAvC,CAFT;MAGAuC,QAAQ,GAAG,MAAM1B,aAAa,CAACiD,0BAAd,CAChBjC,WAAW,CAACE,cADI,EAEhBe,oBAFgB,CAAjB;IAIA;;IAED,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgByB,QAAhB,CACLlC,WADK,EAIqB;EAAA,IAF1BuB,KAE0B,uEAFQvB,WAAW,CAACgB,YAEpB;EAAA,IAD1BmB,UAC0B;EAAA,IAA1B1B,YAA0B;;IAE1B,MAAM2B,mBAAmB,GAAG9D,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqB6D,UAArB,EAAiChE,eAAjC,CAAlC;IAEA,IAAIuC,QAAJ;;IACA,IAAI9B,OAAO,CAAC2C,KAAD,CAAX,EAAoB;MACnB,MAAME,kBAAkB,GAAGnD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAwBiD,KAAxB,EAA+BpD,eAA/B,CAAjC;MACAuC,QAAQ,GAAG,MAAM1B,aAAa,CAACqD,2BAAd,CAChBrC,WAAW,CAACE,cADI,EAEhBuB,kBAFgB,EAGhBW,mBAHgB,CAAjB;IAKA,CAPD,MAOO;MACN,MAAMnB,oBAAoB,GAAGtC,UAAU,CAAC4C,KAAD,CAAV,GACzBA,KADyB,GAE1BjD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAqBiD,KAArB,EAAuCpD,eAAvC,CAFT;MAGAuC,QAAQ,GAAG,MAAM1B,aAAa,CAACsD,6BAAd,CAChBtC,WAAW,CAACE,cADI,EAEhBe,oBAFgB,EAGhBmB,mBAHgB,CAAjB;IAKA;;IAED,OAAO9D,MAAM,CAACa,WAAD,EAAcuB,QAAd,EAA4CD,YAA5C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgB8B,cAAhB,CACLvC,WADK,EAELwC,eAFK,EAGL/B,YAHK,EAGqB;;IAE1B,MAAMgC,wBAAwB,GAAGnE,MAAM,CACtC;MAAEA,MAAM,EAAE;IAAV,CADsC,EAEtCkE,eAFsC,EAGtCpE,qBAHsC,CAAvC;IAKA,MAAMsC,QAAQ,GAAG,MAAM1B,aAAa,CAAC0D,oBAAd,CACtB1C,WAAW,CAACE,cADU,EAEtBuC,wBAFsB,CAAvB;IAKA,OAAO5D,SAAS,CAAC6B,QAAD,CAAT,GACJA,QADI,GAEJhB,iBAAiB,CAACgB,QAAD,EAAWD,YAAX,EAAyB;MAAEkC,gBAAgB,EAAE;IAApB,CAAzB,CAFpB;EAGA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBC,sBAAhB,CACL5C,WADK,EAELS,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAAC4D,sBAAd,CAAqC5C,WAAW,CAACE,cAAjD,CAAvB;IAEA,OAAOQ,QAAQ,CAACmC,GAAT,CAAaC,WAAW,IAC9BpD,iBAAiB,CAACoD,WAAD,EAAwCrC,YAAxC,EAAsD;MACtEkC,gBAAgB,EAAE;IADoD,CAAtD,CADX,CAAP;EAKA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBI,uBAAhB,CACL/C,WADK,EAIqB;EAAA,IAF1BuB,KAE0B,uEAFQvB,WAAW,CAACgB,YAEpB;EAAA,IAD1BgC,gBAC0B;EAAA,IAA1BvC,YAA0B;;IAE1B,MAAMwC,yBAAyB,GAAG3E,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqB0E,gBAArB,EAAuC7E,eAAvC,CAAxC;IAEA,IAAIuC,QAAJ;;IACA,IAAI9B,OAAO,CAAC2C,KAAD,CAAX,EAAoB;MACnB,MAAME,kBAAkB,GAAGnD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAwBiD,KAAxB,EAA+BpD,eAA/B,CAAjC;MACAuC,QAAQ,GAAG,MAAM1B,aAAa,CAACkE,iCAAd,CAChBlD,WAAW,CAACE,cADI,EAEhBuB,kBAFgB,EAGhBwB,yBAHgB,CAAjB;IAKA,CAPD,MAOO;MACN,MAAMhC,oBAAoB,GAAGtC,UAAU,CAAC4C,KAAD,CAAV,GACzBA,KADyB,GAE1BjD,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAV,CAAD,EAAqBiD,KAArB,EAAuCpD,eAAvC,CAFT;MAGAuC,QAAQ,GAAG,MAAM1B,aAAa,CAACmE,mCAAd,CAChBnD,WAAW,CAACE,cADI,EAEhBe,oBAFgB,EAGhBgC,yBAHgB,CAAjB;IAKA;;IAED,OAAOpE,SAAS,CAAC6B,QAAD,CAAT,GACJA,QADI,GAEJhB,iBAAiB,CAACgB,QAAD,EAAWD,YAAX,EAAyB;MAAEkC,gBAAgB,EAAE;IAApB,CAAzB,CAFpB;EAGA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBS,qBAAhB,CACLpD,WADK,EAELwC,eAFK,EAGL/B,YAHK,EAGqB;;IAE1B,MAAMgC,wBAAwB,GAAGnE,MAAM,CACtC;MAAEA,MAAM,EAAE;IAAV,CADsC,EAEtCkE,eAFsC,EAGtCpE,qBAHsC,CAAvC;IAKA,MAAMsC,QAAQ,GAAG,MAAM1B,aAAa,CAACoE,qBAAd,CACtBpD,WAAW,CAACE,cADU,EAEtBuC,wBAFsB,CAAvB;IAKA,OAAO5D,SAAS,CAAC6B,QAAD,CAAT,GACJA,QADI,GAEHpC,MAAM,CACPgB,wBADO,EAEPoB,QAFO,EAGPD,YAHO,CAFV;EAOA;AAAA;AAED;;;;;AAIA,OAAM,SAAgB4C,mBAAhB,CACLrD,WADK,EAELc,OAFK,EAIqB;EAAA,IAD1BC,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMQ,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAGA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAACqE,mBAAd,CACtBrD,WAAW,CAACE,cADU,EAEtBY,OAFsB,EAGtBG,oBAHsB,CAAvB;IAMA,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAU6C,eAAV,CAILtD,WAJK,EAKL8C,WALK,EAULrC,YAVK,EAW4E;EAAA,IAAjF8C,OAAiF,uEAAlC;IAAEC,wBAAwB,EAAE;EAA5B,CAAkC;EAEjF,MAAMC,UAAU,GAAG,IAAIpF,cAAJ,CAClB,CAACqF,OAAD,EAAUC,MAAV,KAAoB;IACnBC,YAAY,CAAC,MAAK;MACjB,CAAC,MAAW3D;QACX,MAAM4D,YAAY,GAAG,IAAI/D,YAAJ,CAA4C;UAChEE,WADgE;UAEhEyD,UAFgE;UAGhEF,OAHgE;UAIhE9C;QAJgE,CAA5C,CAArB;QAOA,IAAIqD,oBAAoB,GAIsBpE,iBAAiB,iCAE1DoD,WAF0D,GAE/C;UACdiB,IAAI,EAAEtE,0BAA0B,CAAC,MAAD,EAASO,WAAT,EAAsB8C,WAAtB,CADlB;UAEdkB,EAAE,EAAEvE,0BAA0B,CAAC,IAAD,EAAOO,WAAP,EAAoB8C,WAApB;QAFhB,CAF+C,GAM9D3E,eAN8D,CAJ/D;;QAaA,IAAI;UACH2F,oBAAoB,GAAG,MAAMD,YAAY,CAACI,gBAAb,CAA8B;YAC1DnB,WAD0D;YAE1DgB;UAF0D,CAA9B,CAA7B;UAKA,MAAMD,YAAY,CAACL,wBAAb,CACLM,oBADK,CAAN;UAIAD,YAAY,CAACK,WAAb,CAAyBJ,oBAAzB;UAEA,IAAIK,MAAJ;;UAEA,IAAInE,WAAW,CAACmE,MAAZ,IAAsB,CAACtF,SAAS,CAACiF,oBAAoB,CAACC,IAAtB,CAApC,EAAiE;YAChEI,MAAM,GAAGnE,WAAW,CAACmE,MAAZ,CAAmBC,GAAnB,CACPN,oBAAoC,CAACC,IAD9B,CAAT;UAGA;;UAED,MAAMvB,eAAe,GAAc,MAAMqB,YAAY,CAACQ,WAAb,CAAyB;YACjEF,MADiE;YAEjEG,EAAE,EAAER;UAF6D,CAAzB,CAAzC;UAKA,MAAMrB,wBAAwB,GAAGnE,MAAM,CACtC;YAAEA,MAAM,EAAE;UAAV,CADsC,EAEtCkE,eAFsC,EAGtC/B,YAHsC,CAAvC;UAKAoD,YAAY,CAACU,QAAb,CAAsBT,oBAAtB;UACAD,YAAY,CAACW,mBAAb,CACC/B,wBADD;UAIA,MAAMgC,kBAAkB,GAAG,MAAM7E,yBAAyB,CACzDI,WADyD,EAEzDwC,eAFyD,EAGzD/B,YAHyD,CAA1D;UAMA,MAAMiE,2BAA2B,GAAGb,YAAY,CAACc,oBAAb,CACnCrG,MAAM,CAACgB,wBAAD,EAA2BmF,kBAA3B,EAA+ChE,YAA/C,CAD6B,CAApC;UAIAoD,YAAY,CAACe,WAAb,CAAyBF,2BAAzB;UAEAhB,OAAO,CACN,MAAMG,YAAY,CAACgB,aAAb,CAA2B;YAChCC,OAAO,EAAEJ,2BADuB;YAEhCJ,EAAE,EAAER;UAF4B,CAA3B,CADA,CAAP;UAOAD,YAAY,CAACkB,gBAAb,CAA8B;YAC7BD,OAAO,EAAEJ,2BADoB;YAE7BlC;UAF6B,CAA9B;QAIA,CA1DD,CA0DE,OAAOwC,KAAP,EAAc;UACfrB,MAAM,CACL,MAAME,YAAY,CAACoB,WAAb,CAAyB;YAC9BD,KAD8B;YAE9BV,EAAE,EAAER;UAF0B,CAAzB,CADD,CAAN;QAMA;MACD,CAvFW,CAAZ;IAwFA,CAzFW,CAAZ;EA0FA,CA5FiB,CAAnB;EA+FA,OAAOL,UAAP;AACA;AAED;;;;;AAIA,OAAM,SAAUyB,qBAAV,CAILlF,WAJK,EAKLmF,iBALK,EAML1E,YANK,EAOkF;EAAA,IAAvF8C,OAAuF,uEAAlC;IAAEC,wBAAwB,EAAE;EAA5B,CAAkC;EAEvF;EACA;EACA,MAAMC,UAAU,GAAG,IAAIpF,cAAJ,CAClB,CAACqF,OAAD,EAAUC,MAAV,KAAoB;IACnBC,YAAY,CAAC,MAAK;MACjB,CAAC,MAAW3D;QACX,MAAM4D,YAAY,GAAG,IAAI/D,YAAJ,CAA4C;UAChEE,WADgE;UAEhEyD,UAFgE;UAGhEF,OAHgE;UAIhE9C;QAJgE,CAA5C,CAArB,CADW,CAOX;;QACA,MAAM2E,6BAA6B,GAAG9G,MAAM,CAC3C;UAAEA,MAAM,EAAE;QAAV,CAD2C,EAE3C6G,iBAF2C,EAG3ChH,eAH2C,CAA5C;QAKA,MAAMkH,uBAAuB,GAAG3G,kBAAkB,CAAC4G,kBAAnB,CAC/B9G,iBAAiB,CAACD,UAAU,CAAC6G,6BAAD,CAAX,CADc,CAAhC;QAGA,MAAMG,+BAA+B,mCACjCF,uBAAuB,CAACG,MAAxB,EADiC,GACD;UACnC;UACA;UACA;UACA;UACA;UACAzB,IAAI,EAAEsB,uBAAuB,CAACI,gBAAxB,GAA2CC,QAA3C;QAN6B,CADC,CAArC;;QAUA,IAAI;UACH,MAAM;YAAEC,CAAF;YAAMC,CAAN;YAAUC;UAAV,IACqBN,+BAD3B;UAAA,MACKO,kBAAkB,UAAIP,+BAAJ,EADjB,eACiB,CADvB;;UAGA,MAAM1B,YAAY,CAACL,wBAAb,CACLsC,kBADK,CAAN;UAIAjC,YAAY,CAACK,WAAb,CAAyBkB,6BAAzB;UAEA,MAAM5C,eAAe,GAAG,MAAM7C,kBAAkB,CAC/CK,WAD+C,EAE/C,MAA4BC;YAC3B,oBAAa,CAAC8F,kBAAd,CACC/F,WAAW,CAACE,cADb,EAECkF,6BAFD;WAD2B,CAFmB,CAAhD;UASAvB,YAAY,CAACU,QAAb,CAAsBa,6BAAtB;UAEA,MAAM3C,wBAAwB,GAAGnE,MAAM,CACtC;YAAEA,MAAM,EAAE;UAAV,CADsC,EAEtCkE,eAFsC,EAGtC/B,YAHsC,CAAvC;UAMAoD,YAAY,CAACW,mBAAb,CACC/B,wBADD;UAIA,MAAMgC,kBAAkB,GAAG,MAAM7E,yBAAyB,CACzDI,WADyD,EAEzDwC,eAFyD,EAGzD/B,YAHyD,CAA1D;UAMA,MAAMiE,2BAA2B,GAAGb,YAAY,CAACc,oBAAb,CACnCrG,MAAM,CAACgB,wBAAD,EAA2BmF,kBAA3B,EAA+ChE,YAA/C,CAD6B,CAApC;UAIAoD,YAAY,CAACe,WAAb,CAAyBF,2BAAzB;UAEAhB,OAAO,CACN,MAAMG,YAAY,CAACgB,aAAb,CAA2B;YAChCC,OAAO,EAAEJ,2BADuB;YAEhCJ,EAAE,EAAEiB;UAF4B,CAA3B,CADA,CAAP;UAOA1B,YAAY,CAACkB,gBAAb,CAA8B;YAC7BD,OAAO,EAAEJ,2BADoB;YAE7BlC;UAF6B,CAA9B;QAIA,CAtDD,CAsDE,OAAOwC,KAAP,EAAc;UACfrB,MAAM,CACL,MAAME,YAAY,CAACoB,WAAb,CAAyB;YAC9BD,KAD8B;YAE9BV,EAAE,EAAEiB;UAF0B,CAAzB,CADD,CAAN;QAMA;MACD,CAxFW,CAAZ;IAyFA,CA1FW,CAAZ;EA2FA,CA7FiB,CAAnB;EAgGA,OAAO9B,UAAP;AACA;AAED;;;;;AAIA,OAAM,SAAgBuC,IAAhB,CACLhG,WADK,EAELiG,OAFK,EAGLC,cAHK,EAILzF,YAJK,EAIqB;;;;IAE1B,MAAM0F,gBAAgB,GAAG7H,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsB2H,OAAtB,EAA+B7H,qBAA/B,CAA/B;;IACA,IAAI,iBAAW,CAAC+F,MAAZ,MAAkB,IAAlB,IAAkBiC,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEhC,GAAF,CAAM8B,cAAN,CAAtB,EAA6C;MAC5C,MAAM/B,MAAM,GAAGnE,WAAW,CAACmE,MAAZ,CAAmBC,GAAnB,CAAuB8B,cAAvB,CAAf;MACA,MAAMG,MAAM,GAAGlC,MAAM,CAAC6B,IAAP,CAAYG,gBAAZ,CAAf;MACA,OAAO7H,MAAM,CAACkB,qBAAD,EAAwB6G,MAAxB,EAAgC5F,YAAhC,CAAb;IACA;;IAED,IAAI,OAAOyF,cAAP,KAA0B,QAA9B,EAAwC;MACvC,MAAM,IAAInH,cAAJ,CACLkH,OADK,EAEL,yDAFK,CAAN;IAIA;;IAED,MAAMvF,QAAQ,GAAG,MAAM1B,aAAa,CAACgH,IAAd,CACtBhG,WAAW,CAACE,cADU,EAEtBgG,cAFsB,EAGtBC,gBAHsB,CAAvB;IAMA,OAAO7H,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBoC,QAAtB,EAAyCD,YAAzC,CAAb;;AACA;AAED;;;;;AAIA,OAAM,SAAgB6F,eAAhB,CACLtG,WADK,EAEL8C,WAFK,EAGLrC,YAHK,EAGqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAACsH,eAAd,CACtBtG,WAAW,CAACE,cADU,EAEtBR,iBAAiB,CAACoD,WAAD,EAAc3E,eAAd,CAFK,CAAvB,EAIA;IACA;;IACA,OAAOW,QAAQ,CAAC4B,QAAD,CAAR,GACJzB,uBAAuB,CAACyB,QAAD,EAA6BD,YAA7B,EAA2C;MAClEkC,gBAAgB,EAAE;IADgD,CAA3C,CADnB,GAIJ;MACA4D,GAAG,EAAEjI,MAAM,CACV;QAAEA,MAAM,EAAE;MAAV,CADU,EAEToC,QAAqC,CAAC6F,GAF7B,EAGV9F,YAHU,CADX;MAMA6D,EAAE,EAAE5E,iBAAiB,CAAEgB,QAAqC,CAAC4D,EAAxC,EAA4C7D,YAA5C,EAA0D;QAC9EkC,gBAAgB,EAAE;MAD4D,CAA1D;IANrB,CAJH;EAcA;AAAA,C,CAED;AACA;;AACA;;;;;AAIA,OAAM,SAAgB6D,IAAhB,CACLxG,WADK,EAEL8C,WAFK,EAIqB;EAAA,IAD1B/B,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMQ,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAIA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAACwH,IAAd,CACtBxG,WAAW,CAACE,cADU,EAEtBR,iBAAiB,CAACoD,WAAD,EAAc3E,eAAd,CAFK,EAGtB8C,oBAHsB,CAAvB;IAMA,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBoC,QAAtB,EAAyCD,YAAzC,CAAb;EACA;AAAA,C,CAED;;AACA;;;;;AAIA,OAAM,SAAgBgG,WAAhB,CACLzG,WADK,EAEL8C,WAFK,EAIqB;EAAA,IAD1B/B,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMqD,oBAAoB,GAAGpE,iBAAiB,CAACoD,WAAD,EAAc3E,eAAd,CAA9C;IACA,MAAM8C,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAIA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAACyH,WAAd,CACtBzG,WAAW,CAACE,cADU,EAEtB4D,oBAFsB,EAGtB7C,oBAHsB,CAAvB;IAMA,OAAO3C,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBoC,QAArB,EAA0CD,YAA1C,CAAb;EACA;AAAA,C,CAED;;AACA;;;;;AAIA,OAAM,SAAgBiG,OAAhB,CACL1G,WADK,EAEL2G,MAFK,EAGLlG,YAHK,EAGqB;;IAE1B;IACA,IAAI;MAAEmG,OAAF;MAAWC;IAAX,IAAyBF,MAA7B;;IACA,IAAI,CAAC9H,SAAS,CAAC+H,OAAD,CAAd,EAAyB;MACxB,IAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAP,KAAmB,QAAtD,EAAgE;QAC/DA,OAAO,GAAGnI,WAAW,CAACmI,OAAD,CAArB;MACA;IACD;;IACD,IAAI,CAAC/H,SAAS,CAACgI,SAAD,CAAd,EAA2B;MAC1B,IAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QAA1D,EAAoE;QACnEA,SAAS,GAAGpI,WAAW,CAACoI,SAAD,CAAvB;MACA;IACD;;IAED,MAAMC,eAAe,mCAAQH,MAAR,GAAc;MAAEE,SAAF;MAAaD;IAAb,CAAd,CAArB;IAEA,MAAMlG,QAAQ,GAAG,MAAM1B,aAAa,CAAC0H,OAAd,CAAsB1G,WAAW,CAACE,cAAlC,EAAkD4G,eAAlD,CAAvB;IAEA,MAAMC,MAAM,GAAGrG,QAAQ,CAACmC,GAAT,CAAamE,GAAG,IAAG;MACjC,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;QAC5B,OAAOA,GAAP;MACA;;MAED,OAAO1I,MAAM,CAACe,SAAD,EAAY2H,GAAZ,EAAmCvG,YAAnC,CAAb;IACA,CANc,CAAf;IAQA,OAAOsG,MAAP;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBE,UAAhB,CACLjH,WADK,EAELS,YAFK,EAEqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAACiI,UAAd,CAAyBjH,WAAW,CAACE,cAArC,CAAvB;IAEA,OAAO5B,MAAM,CACZ;MAAEA,MAAM,EAAE;IAAV,CADY,EAEZ;IACAoC,QAHY,EAIZD,YAJY,CAAb;EAMA;AAAA;AAED;;;;;AAIA,OAAM,SAAgByG,QAAhB,CACLlH,WADK,EAELc,OAFK,EAGLqG,WAHK,EAKqB;EAAA,IAD1BpG,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAM2G,oBAAoB,GAAGD,WAAW,CAACtE,GAAZ,CAAgBwE,UAAU,IACtD/I,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsB+I,UAAtB,EAAkClJ,eAAlC,CADsB,CAA7B;IAIA,MAAM8C,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAIA,MAAMuC,QAAQ,GAAG,MAAM1B,aAAa,CAACkI,QAAd,CACtBlH,WAAW,CAACE,cADU,EAEtBY,OAFsB,EAGtBsG,oBAHsB,EAItBnG,oBAJsB,CAAvB;IAOA,OAAO3C,MAAM,CAACY,aAAD,EAAgBwB,QAAhB,EAAsDD,YAAtD,CAAb;EACA;AAAA,C,CAED;AACA;;AACA;;;;;AAIA,OAAM,SAAgB6G,aAAhB,CACLtH,WADK,EAELuH,UAFK,EAKqB;EAAA,IAF1BC,WAE0B,uEAFMxH,WAAW,CAACgB,YAElB;EAAA,IAD1ByG,iBAC0B;EAAA,IAA1BhH,YAA0B;;IAE1B,MAAMiH,mBAAmB,GAAGpJ,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBiJ,UAArB,EAAiCpJ,eAAjC,CAAlC;IAEA,MAAMwJ,oBAAoB,GAAGhJ,UAAU,CAAC6I,WAAD,CAAV,GACzBA,WADyB,GAE1BlJ,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqBkJ,WAArB,EAA6CrJ,eAA7C,CAFT;IAIA,MAAMyJ,0BAA0B,GAAGtJ,MAAM,CACxC;MACCuJ,IAAI,EAAE,OADP;MAECC,KAAK,EAAE;QACNxJ,MAAM,EAAE;MADF;IAFR,CADwC,EAOxCmJ,iBAPwC,EAQxC5H,kBARwC,CAAzC;IAWA,MAAMa,QAAQ,GAAG,MAAM1B,aAAa,CAACsI,aAAd,CACtBtH,WAAW,CAACE,cADU,EAEtBwH,mBAFsB,EAGtBC,oBAHsB,EAItBC,0BAJsB,CAAvB;IAOA,OAAOtJ,MAAM,CAACc,gBAAD,EAAmBsB,QAAnB,EAAsDD,YAAtD,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBsH,gBAAhB,CACL/H,WADK,EAEL8C,WAFK,EAIqB;EAAA,IAD1B/B,WAC0B,uEADMf,WAAW,CAACgB,YAClB;EAAA,IAA1BP,YAA0B;;IAE1B,MAAMQ,oBAAoB,GAAGtC,UAAU,CAACoC,WAAD,CAAV,GACzBA,WADyB,GAE1BzC,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAqByC,WAArB,EAA6C5C,eAA7C,CAFT;IAIA,MAAMuC,QAAQ,GAAI,MAAM1B,aAAa,CAAC+I,gBAAd,CACvB/H,WAAW,CAACE,cADW,EAEvBR,iBAAiB,CAACoD,WAAD,EAAc3E,eAAd,CAFM,EAGvB8C,oBAHuB,CAAxB;IAMA,OAAO3C,MAAM,CAACiB,sBAAD,EAAyBmB,QAAzB,EAAmCD,YAAnC,CAAb;EACA;AAAA;AAED;;;;;AAIA,OAAM,SAAgBuH,aAAhB,CACLhI,WADK,EAELc,OAFK,EAGLmH,SAHK,EAILC,SAJK,EAKLzH,YALK,EAKqB;;IAE1B,MAAMC,QAAQ,GAAG,MAAM1B,aAAa,CAACgJ,aAAd,CACtBhI,WAAW,CAACE,cADU,EAEtBY,OAFsB,EAGtBmH,SAHsB,EAItBC,SAJsB,CAAvB;IAOA,OAAO5J,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBoC,QAAtB,EAAgCD,YAAhC,CAAb;EACA;AAAA","names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","numberToHex","TransactionFactory","isBlockTag","isBytes","isNullish","isString","SignatureError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","trySendTransaction","waitForTransactionReceipt","NUMBER_DATA_FORMAT","SendTxHelper","getProtocolVersion","web3Context","__awaiter","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","getGasPrice","getBlockNumber","getBalance","address","blockNumber","defaultBlock","blockNumberFormatted","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","resolve","reject","setImmediate","sendTxHelper","transactionFormatted","from","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","error","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","sendRawTransaction","sign","message","addressOrIndex","messageFormatted","_a","signed","signTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","formattedFilter","result","res","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","createAccessList","signTypedData","typedData","useLegacy"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(transaction as unknown as Transaction, returnFormat, {\n\t\t\tfillInputAndData: true,\n\t\t}),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v , r , s, \n\t\t\t\t\t\t\t\t...txWithoutSigParams} = unSerializedTransactionWithFrom;\n\t\t\t\t\t\t\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(logSchema, res as unknown as Log, returnFormat);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(accountSchema, response as unknown as AccountObject, returnFormat);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(feeHistorySchema, response as unknown as FeeHistory, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(accessListResultSchema, response, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat);\n}\n"]},"metadata":{},"sourceType":"module"}