{"ast":null,"code":"import { pbkdf2 as _pbkdf2, pbkdf2Async as _pbkdf2Async } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assertBytes } from \"./utils.js\";\nexport async function pbkdf2(password, salt, iterations, keylen, digest) {\n  if (![\"sha256\", \"sha512\"].includes(digest)) {\n    throw new Error(\"Only sha256 and sha512 are supported\");\n  }\n\n  assertBytes(password);\n  assertBytes(salt);\n  return _pbkdf2Async(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n    c: iterations,\n    dkLen: keylen\n  });\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n  if (![\"sha256\", \"sha512\"].includes(digest)) {\n    throw new Error(\"Only sha256 and sha512 are supported\");\n  }\n\n  assertBytes(password);\n  assertBytes(salt);\n  return _pbkdf2(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n    c: iterations,\n    dkLen: keylen\n  });\n}","map":{"version":3,"names":["pbkdf2","_pbkdf2","pbkdf2Async","_pbkdf2Async","sha256","sha512","assertBytes","password","salt","iterations","keylen","digest","includes","Error","c","dkLen","pbkdf2Sync"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/ethereum-cryptography/esm/pbkdf2.js"],"sourcesContent":["import { pbkdf2 as _pbkdf2, pbkdf2Async as _pbkdf2Async } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assertBytes } from \"./utils.js\";\nexport async function pbkdf2(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    assertBytes(password);\n    assertBytes(salt);\n    return _pbkdf2Async(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    assertBytes(password);\n    assertBytes(salt);\n    return _pbkdf2(digest === \"sha256\" ? sha256 : sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\n"],"mappings":"AAAA,SAASA,MAAM,IAAIC,OAAnB,EAA4BC,WAAW,IAAIC,YAA3C,QAA+D,sBAA/D;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAO,eAAeN,MAAf,CAAsBO,QAAtB,EAAgCC,IAAhC,EAAsCC,UAAtC,EAAkDC,MAAlD,EAA0DC,MAA1D,EAAkE;EACrE,IAAI,CAAC,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8BD,MAA9B,CAAL,EAA4C;IACxC,MAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;EACH;;EACDP,WAAW,CAACC,QAAD,CAAX;EACAD,WAAW,CAACE,IAAD,CAAX;EACA,OAAOL,YAAY,CAACQ,MAAM,KAAK,QAAX,GAAsBP,MAAtB,GAA+BC,MAAhC,EAAwCE,QAAxC,EAAkDC,IAAlD,EAAwD;IACvEM,CAAC,EAAEL,UADoE;IAEvEM,KAAK,EAAEL;EAFgE,CAAxD,CAAnB;AAIH;AACD,OAAO,SAASM,UAAT,CAAoBT,QAApB,EAA8BC,IAA9B,EAAoCC,UAApC,EAAgDC,MAAhD,EAAwDC,MAAxD,EAAgE;EACnE,IAAI,CAAC,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8BD,MAA9B,CAAL,EAA4C;IACxC,MAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;EACH;;EACDP,WAAW,CAACC,QAAD,CAAX;EACAD,WAAW,CAACE,IAAD,CAAX;EACA,OAAOP,OAAO,CAACU,MAAM,KAAK,QAAX,GAAsBP,MAAtB,GAA+BC,MAAhC,EAAwCE,QAAxC,EAAkDC,IAAlD,EAAwD;IAClEM,CAAC,EAAEL,UAD+D;IAElEM,KAAK,EAAEL;EAF2D,CAAxD,CAAd;AAIH"},"metadata":{},"sourceType":"module"}