{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InvalidResponseError = exports.ResponseError = void 0;\n\nconst web3_error_base_js_1 = require(\"../web3_error_base.js\");\n\nconst error_codes_js_1 = require(\"../error_codes.js\"); // To avoid circular package dependency, copied to code here. If you update this please update same function in `json_rpc.ts`\n\n\nconst isResponseWithError = response => !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && ( // eslint-disable-next-line no-null/no-null\nresponse.result === undefined || response.result === null) && // JSON RPC consider \"null\" as valid response\n'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\n\nconst buildErrorMessage = response => isResponseWithError(response) ? response.error.message : '';\n\nclass ResponseError extends web3_error_base_js_1.BaseWeb3Error {\n  constructor(response, message, request) {\n    var _a;\n\n    super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response) ? response.map(r => buildErrorMessage(r)).join(',') : buildErrorMessage(response)}`);\n    this.code = error_codes_js_1.ERR_RESPONSE;\n\n    if (!message) {\n      this.data = Array.isArray(response) ? response.map(r => {\n        var _a;\n\n        return (_a = r.error) === null || _a === void 0 ? void 0 : _a.data;\n      }) : (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.data;\n    }\n\n    this.request = request;\n    let errorOrErrors;\n\n    if (`error` in response) {\n      errorOrErrors = response.error;\n    } else if (response instanceof Array) {\n      errorOrErrors = response.map(r => r.error);\n    }\n\n    this.innerError = errorOrErrors;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      data: this.data,\n      request: this.request\n    });\n  }\n\n}\n\nexports.ResponseError = ResponseError;\n\nclass InvalidResponseError extends ResponseError {\n  constructor(result, request) {\n    super(result, undefined, request);\n    this.code = error_codes_js_1.ERR_INVALID_RESPONSE;\n    let errorOrErrors;\n\n    if (`error` in result) {\n      errorOrErrors = result.error;\n    } else if (result instanceof Array) {\n      errorOrErrors = result.map(r => r.error);\n    }\n\n    this.innerError = errorOrErrors;\n  }\n\n}\n\nexports.InvalidResponseError = InvalidResponseError;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AACA,sD,CAEA;;;AACA,MAAMA,mBAAmB,GACxBC,QAD2B,IAG3B,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,IACAA,QAAQ,CAACG,OAAT,KAAqB,KADrB,IAEA,CAAC,CAACH,QAFF,MAGA;AACCA,QAAQ,CAACI,MAAT,KAAoBC,SAApB,IAAiCL,QAAQ,CAACI,MAAT,KAAoB,IAJtD,KAKA;AACA,WAAWJ,QANX,KAOC,OAAOA,QAAQ,CAACM,EAAhB,KAAuB,QAAvB,IAAmC,OAAON,QAAQ,CAACM,EAAhB,KAAuB,QAP3D,CAHD;;AAYA,MAAMC,iBAAiB,GAAIP,QAAD,IACzBD,mBAAmB,CAACC,QAAD,CAAnB,GAAgCA,QAAQ,CAACQ,KAAT,CAAeC,OAA/C,GAAyD,EAD1D;;AAGA,MAAaC,aAAb,SAA+EC,kCAA/E,CAA4F;EAK3FC,YACCZ,QADD,EAECS,OAFD,EAGCI,OAHD,EAGsC;;;IAErC,MACCJ,OAAO,SAAP,WAAO,WAAP,aACC,mBACCR,KAAK,CAACC,OAAN,CAAcF,QAAd,IACGA,QAAQ,CAACc,GAAT,CAAaC,CAAC,IAAIR,iBAAiB,CAACQ,CAAD,CAAnC,EAAwCC,IAAxC,CAA6C,GAA7C,CADH,GAEGT,iBAAiB,CAACP,QAAD,CACrB,EANF;IATM,YAAOiB,6BAAP;;IAkBN,IAAI,CAACR,OAAL,EAAc;MACb,KAAKS,IAAL,GAAYjB,KAAK,CAACC,OAAN,CAAcF,QAAd,IACTA,QAAQ,CAACc,GAAT,CAAaC,CAAC,IAAG;QAAA;;QAAC,cAAC,CAACP,KAAF,MAAO,IAAP,IAAOW,aAAP,GAAO,MAAP,GAAOA,GAAED,IAAT;MAA0B,CAA5C,CADS,GAET,cAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEV,KAAV,MAAe,IAAf,IAAeW,aAAf,GAAe,MAAf,GAAeA,GAAED,IAFpB;IAGA;;IAED,KAAKL,OAAL,GAAeA,OAAf;IACA,IAAIO,aAAJ;;IACA,IAAI,WAAWpB,QAAf,EAAyB;MACxBoB,aAAa,GAAGpB,QAAQ,CAACQ,KAAzB;IACA,CAFD,MAEO,IAAIR,QAAQ,YAAYC,KAAxB,EAA+B;MACrCmB,aAAa,GAAGpB,QAAQ,CAACc,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAACP,KAApB,CAAhB;IACA;;IAED,KAAKa,UAAL,GAAkBD,aAAlB;EACA;;EAEME,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEJ,IAAI,EAAE,KAAKA,IAAb;MAAmBL,OAAO,EAAE,KAAKA;IAAjC,CAA1B;EACA;;AAtC0F;;AAA5FU;;AAyCA,MAAaC,oBAAb,SAAsFd,aAAtF,CAGC;EACAE,YACCR,MADD,EAECS,OAFD,EAEsC;IAErC,MAAMT,MAAN,EAAcC,SAAd,EAAyBQ,OAAzB;IACA,KAAKY,IAAL,GAAYR,qCAAZ;IACA,IAAIG,aAAJ;;IACA,IAAI,WAAWhB,MAAf,EAAuB;MACtBgB,aAAa,GAAGhB,MAAM,CAACI,KAAvB;IACA,CAFD,MAEO,IAAIJ,MAAM,YAAYH,KAAtB,EAA6B;MACnCmB,aAAa,GAAGhB,MAAM,CAACU,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACP,KAAlB,CAAhB;IACA;;IAED,KAAKa,UAAL,GAAkBD,aAAlB;EACA;;AAfD;;AAHDG","names":["isResponseWithError","response","Array","isArray","jsonrpc","result","undefined","id","buildErrorMessage","error","message","ResponseError","web3_error_base_js_1","constructor","request","map","r","join","error_codes_js_1","data","_a","errorOrErrors","innerError","toJSON","exports","InvalidResponseError","code"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-errors/src/errors/response_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// eslint-disable-next-line max-classes-per-file\nimport {\n\tJsonRpcError,\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithError,\n} from 'web3-types';\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport { ERR_INVALID_RESPONSE, ERR_RESPONSE } from '../error_codes.js';\n\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `json_rpc.ts`\nconst isResponseWithError = <Error = unknown, Result = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithError<Error> =>\n\t!Array.isArray(response) &&\n\tresponse.jsonrpc === '2.0' &&\n\t!!response &&\n\t// eslint-disable-next-line no-null/no-null\n\t(response.result === undefined || response.result === null) &&\n\t// JSON RPC consider \"null\" as valid response\n\t'error' in response &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\nconst buildErrorMessage = (response: JsonRpcResponse<unknown, unknown>): string =>\n\tisResponseWithError(response) ? response.error.message : '';\n\nexport class ResponseError<ErrorType = unknown, RequestType = unknown> extends BaseWeb3Error {\n\tpublic code = ERR_RESPONSE;\n\tpublic data?: ErrorType | ErrorType[];\n\tpublic request?: JsonRpcPayload<RequestType>;\n\n\tpublic constructor(\n\t\tresponse: JsonRpcResponse<unknown, ErrorType>,\n\t\tmessage?: string,\n\t\trequest?: JsonRpcPayload<RequestType>,\n\t) {\n\t\tsuper(\n\t\t\tmessage ??\n\t\t\t\t`Returned error: ${\n\t\t\t\t\tArray.isArray(response)\n\t\t\t\t\t\t? response.map(r => buildErrorMessage(r)).join(',')\n\t\t\t\t\t\t: buildErrorMessage(response)\n\t\t\t\t}`,\n\t\t);\n\n\t\tif (!message) {\n\t\t\tthis.data = Array.isArray(response)\n\t\t\t\t? response.map(r => r.error?.data as ErrorType)\n\t\t\t\t: response?.error?.data;\n\t\t}\n\n\t\tthis.request = request;\n\t\tlet errorOrErrors: JsonRpcError | JsonRpcError[] | undefined;\n\t\tif (`error` in response) {\n\t\t\terrorOrErrors = response.error as JsonRpcError;\n\t\t} else if (response instanceof Array) {\n\t\t\terrorOrErrors = response.map(r => r.error) as JsonRpcError[];\n\t\t}\n\n\t\tthis.innerError = errorOrErrors as Error | Error[] | undefined;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), data: this.data, request: this.request };\n\t}\n}\n\nexport class InvalidResponseError<ErrorType = unknown, RequestType = unknown> extends ResponseError<\n\tErrorType,\n\tRequestType\n> {\n\tpublic constructor(\n\t\tresult: JsonRpcResponse<unknown, ErrorType>,\n\t\trequest?: JsonRpcPayload<RequestType>,\n\t) {\n\t\tsuper(result, undefined, request);\n\t\tthis.code = ERR_INVALID_RESPONSE;\n\t\tlet errorOrErrors: JsonRpcError | JsonRpcError[] | undefined;\n\t\tif (`error` in result) {\n\t\t\terrorOrErrors = result.error as JsonRpcError;\n\t\t} else if (result instanceof Array) {\n\t\t\terrorOrErrors = result.map(r => r.error) as JsonRpcError[];\n\t\t}\n\n\t\tthis.innerError = errorOrErrors as Error | Error[] | undefined;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}