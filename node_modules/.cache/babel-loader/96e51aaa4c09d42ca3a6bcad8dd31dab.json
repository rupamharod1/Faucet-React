{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\nimport { isAddress } from './address.js';\nimport { isHexStrict } from './string.js';\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\n\nexport const isBloom = bloom => {\n  if (typeof bloom !== 'string') {\n    return false;\n  }\n\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  }\n\n  if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\n\nexport const isInBloom = (bloom, value) => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return false;\n  }\n\n  if (!isBloom(bloom)) {\n    return false;\n  }\n\n  const uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\n  const hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\n\n  for (let i = 0; i < 12; i += 4) {\n    // calculate bit position in bloom filter that must be active\n    const bitpos = // eslint-disable-next-line no-bitwise\n    (parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16) & 2047; // test if bitpos in bloom is active\n\n    const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4))); // eslint-disable-next-line no-bitwise\n\n    const offset = 1 << bitpos % 4; // eslint-disable-next-line no-bitwise\n\n    if ((code & offset) !== offset) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\n\nexport const isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {\n  if (!isBloom(bloom)) {\n    return false;\n  }\n\n  if (!isAddress(ethereumAddress)) {\n    return false;\n  } // you have to pad the ethereum address to 32 bytes\n  // else the bloom filter does not work\n  // this is only if your matching the USERS\n  // ethereum address. Contract address do not need this\n  // hence why we have 2 methods\n  // (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n\n\n  const address = padLeft(ethereumAddress, 64);\n  return isInBloom(bloom, address);\n};\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\n\nexport const isContractAddressInBloom = (bloom, contractAddress) => {\n  if (!isBloom(bloom)) {\n    return false;\n  }\n\n  if (!isAddress(contractAddress)) {\n    return false;\n  }\n\n  return isInBloom(bloom, contractAddress);\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAASA,SAAT,QAA0B,iCAA1B;AAEA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,OAA1C,EAAmDC,qBAAnD,QAAgF,aAAhF;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;;;;;AAIA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAAoC;EAC1D,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC9B,OAAO,KAAP;EACA;;EAED,IAAI,CAAC,wBAAwBC,IAAxB,CAA6BD,KAA7B,CAAL,EAA0C;IACzC,OAAO,KAAP;EACA;;EAED,IAAI,uBAAuBC,IAAvB,CAA4BD,KAA5B,KAAsC,uBAAuBC,IAAvB,CAA4BD,KAA5B,CAA1C,EAA8E;IAC7E,OAAO,IAAP;EACA;;EAED,OAAO,KAAP;AACA,CAdM;AAgBP;;;;;AAIA,OAAO,MAAME,SAAS,GAAG,CAACF,KAAD,EAAgBG,KAAhB,KAAuD;EAC/E,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACL,WAAW,CAACK,KAAD,CAA7C,EAAsD;IACrD,OAAO,KAAP;EACA;;EAED,IAAI,CAACJ,OAAO,CAACC,KAAD,CAAZ,EAAqB;IACpB,OAAO,KAAP;EACA;;EAED,MAAMI,UAAU,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BT,eAAe,CAACS,KAAD,CAA3C,GAAqDA,KAAxE;EAEA,MAAME,IAAI,GAAGT,qBAAqB,CAACJ,SAAS,CAACY,UAAD,CAAV,CAArB,CAA6CE,KAA7C,CAAmD,CAAnD,CAAb;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;IAC/B;IACA,MAAMC,MAAM,GACX;IACC,CAACC,QAAQ,CAACJ,IAAI,CAACC,KAAL,CAAWC,CAAX,EAAcA,CAAC,GAAG,CAAlB,CAAD,EAAuB,EAAvB,CAAR,IAAsC,CAAvC,IAA4CE,QAAQ,CAACJ,IAAI,CAACC,KAAL,CAAWC,CAAC,GAAG,CAAf,EAAkBA,CAAC,GAAG,CAAtB,CAAD,EAA2B,EAA3B,CAArD,GACA,IAHD,CAF+B,CAO/B;;IACA,MAAMG,IAAI,GAAGjB,cAAc,CAACO,KAAK,CAACW,UAAN,CAAiBX,KAAK,CAACY,MAAN,GAAe,CAAf,GAAmBC,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAG,CAApB,CAApC,CAAD,CAA3B,CAR+B,CAU/B;;IACA,MAAMO,MAAM,GAAG,KAAKP,MAAM,GAAG,CAA7B,CAX+B,CAa/B;;IACA,IAAI,CAACE,IAAI,GAAGK,MAAR,MAAoBA,MAAxB,EAAgC;MAC/B,OAAO,KAAP;IACA;EACD;;EAED,OAAO,IAAP;AACA,CAjCM;AAmCP;;;;AAGA,OAAO,MAAMC,4BAA4B,GAAG,CAAChB,KAAD,EAAgBiB,eAAhB,KAAoD;EAC/F,IAAI,CAAClB,OAAO,CAACC,KAAD,CAAZ,EAAqB;IACpB,OAAO,KAAP;EACA;;EAED,IAAI,CAACH,SAAS,CAACoB,eAAD,CAAd,EAAiC;IAChC,OAAO,KAAP;EACA,CAP8F,CAS/F;EACA;EACA;EACA;EACA;EACA;;;EAEA,MAAMC,OAAO,GAAGvB,OAAO,CAACsB,eAAD,EAAkB,EAAlB,CAAvB;EAEA,OAAOf,SAAS,CAACF,KAAD,EAAQkB,OAAR,CAAhB;AACA,CAnBM;AAqBP;;;;;AAIA,OAAO,MAAMC,wBAAwB,GAAG,CAACnB,KAAD,EAAgBoB,eAAhB,KAAoD;EAC3F,IAAI,CAACrB,OAAO,CAACC,KAAD,CAAZ,EAAqB;IACpB,OAAO,KAAP;EACA;;EAED,IAAI,CAACH,SAAS,CAACuB,eAAD,CAAd,EAAiC;IAChC,OAAO,KAAP;EACA;;EAED,OAAOlB,SAAS,CAACF,KAAD,EAAQoB,eAAR,CAAhB;AACA,CAVM","names":["keccak256","codePointToInt","hexToUint8Array","padLeft","uint8ArrayToHexString","isAddress","isHexStrict","isBloom","bloom","test","isInBloom","value","uint8Array","hash","slice","i","bitpos","parseInt","code","charCodeAt","length","Math","floor","offset","isUserEthereumAddressInBloom","ethereumAddress","address","isContractAddressInBloom","contractAddress"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-validator/src/validation/bloom.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { ValidInputTypes } from '../types.js';\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\nimport { isAddress } from './address.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\nexport const isBloom = (bloom: ValidInputTypes): boolean => {\n\tif (typeof bloom !== 'string') {\n\t\treturn false;\n\t}\n\n\tif (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\nexport const isInBloom = (bloom: string, value: string | Uint8Array): boolean => {\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn false;\n\t}\n\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tconst uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\n\n\tconst hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\n\n\tfor (let i = 0; i < 12; i += 4) {\n\t\t// calculate bit position in bloom filter that must be active\n\t\tconst bitpos =\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t((parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16)) &\n\t\t\t2047;\n\n\t\t// test if bitpos in bloom is active\n\t\tconst code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst offset = 1 << bitpos % 4;\n\n\t\t// eslint-disable-next-line no-bitwise\n\t\tif ((code & offset) !== offset) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\nexport const isUserEthereumAddressInBloom = (bloom: string, ethereumAddress: string): boolean => {\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (!isAddress(ethereumAddress)) {\n\t\treturn false;\n\t}\n\n\t// you have to pad the ethereum address to 32 bytes\n\t// else the bloom filter does not work\n\t// this is only if your matching the USERS\n\t// ethereum address. Contract address do not need this\n\t// hence why we have 2 methods\n\t// (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n\n\tconst address = padLeft(ethereumAddress, 64);\n\n\treturn isInBloom(bloom, address);\n};\n\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\nexport const isContractAddressInBloom = (bloom: string, contractAddress: string): boolean => {\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (!isAddress(contractAddress)) {\n\t\treturn false;\n\t}\n\n\treturn isInBloom(bloom, contractAddress);\n};\n"]},"metadata":{},"sourceType":"module"}