{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initAccountsForContext = void 0;\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_eth_1 = require(\"web3-eth\");\n\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\n\n\nconst initAccountsForContext = context => {\n  const signTransactionWithContext = (transaction, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const tx = yield (0, web3_eth_1.prepareTransactionForSigning)(transaction, context);\n    const privateKeyBytes = (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, privateKey, web3_types_1.ETH_DATA_FORMAT);\n    return (0, web3_eth_accounts_1.signTransaction)(tx, privateKeyBytes);\n  });\n\n  const privateKeyToAccountWithContext = privateKey => {\n    const account = (0, web3_eth_accounts_1.privateKeyToAccount)(privateKey);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n\n  const decryptWithContext = (keystore, password, options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n\n    const account = yield (0, web3_eth_accounts_1.decrypt)(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  });\n\n  const createWithContext = () => {\n    const account = (0, web3_eth_accounts_1.create)();\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n\n  const wallet = new web3_eth_accounts_1.Wallet({\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext\n  });\n  return {\n    signTransaction: signTransactionWithContext,\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext,\n    recoverTransaction: web3_eth_accounts_1.recoverTransaction,\n    hashMessage: web3_eth_accounts_1.hashMessage,\n    sign: web3_eth_accounts_1.sign,\n    recover: web3_eth_accounts_1.recover,\n    encrypt: web3_eth_accounts_1.encrypt,\n    wallet\n  };\n};\n\nexports.initAccountsForContext = initAccountsForContext;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AACA;;AAEA;;AACA;AAaA;;;;;;;;;AAOO,MAAMA,sBAAsB,GAAIC,OAAD,IAA0C;EAC/E,MAAMC,0BAA0B,GAAG,CAAOC,WAAP,EAAiCC,UAAjC,KAAsDC;IACxF,MAAMC,EAAE,GAAG,MAAM,6CAA6BH,WAA7B,EAA0CF,OAA1C,CAAjB;IAEA,MAAMM,eAAe,GAAG,yBAAO;MAAEC,MAAM,EAAE;IAAV,CAAP,EAA4BJ,UAA5B,EAAwCK,4BAAxC,CAAxB;IAEA,OAAO,yCAAgBH,EAAhB,EAAoBC,eAApB,CAAP;EACA,CANwF,CAAzF;;EAQA,MAAMG,8BAA8B,GAAIN,UAAD,IAAoC;IAC1E,MAAMO,OAAO,GAAG,6CAAoBP,UAApB,CAAhB;IAEA,uCACIO,OADJ,GACW;MACVC,eAAe,EAAST,WAAP,IAAmCE;QACnD,iCAA0B,CAACF,WAAD,EAAcQ,OAAO,CAACP,UAAtB,CAA1B;MAA2D,CADR;IAD1C,CADX;EAKA,CARD;;EAUA,MAAMS,kBAAkB,GAAG,CAC1BC,QAD0B,EAE1BC,QAF0B,EAG1BC,OAH0B,KAIvBX;;;IACH,MAAMM,OAAO,GAAG,MAAM,iCAAQG,QAAR,EAAkBC,QAAlB,EAA4B,MAACC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,SAAV,MAA+B,IAA/B,IAA+BC,aAA/B,GAA+BA,EAA/B,GAAmC,IAA/D,CAAtB;IAEA,uCACIP,OADJ,GACW;MACVC,eAAe,EAAST,WAAP,IAAmCE;QACnD,iCAA0B,CAACF,WAAD,EAAcQ,OAAO,CAACP,UAAtB,CAA1B;MAA2D,CADR;IAD1C,CADX;EAKA,CARG,CAJJ;;EAcA,MAAMe,iBAAiB,GAAG,MAAK;IAC9B,MAAMR,OAAO,GAAG,iCAAhB;IAEA,uCACIA,OADJ,GACW;MACVC,eAAe,EAAST,WAAP,IAAmCE;QACnD,iCAA0B,CAACF,WAAD,EAAcQ,OAAO,CAACP,UAAtB,CAA1B;MAA2D,CADR;IAD1C,CADX;EAKA,CARD;;EAUA,MAAMgB,MAAM,GAAG,IAAIC,0BAAJ,CAAW;IACzBC,MAAM,EAAEH,iBADiB;IAEzBI,mBAAmB,EAAEb,8BAFI;IAGzBc,OAAO,EAAEX;EAHgB,CAAX,CAAf;EAMA,OAAO;IACND,eAAe,EAAEV,0BADX;IAENoB,MAAM,EAAEH,iBAFF;IAGNI,mBAAmB,EAAEb,8BAHf;IAINc,OAAO,EAAEX,kBAJH;IAKNY,kBAAkB,EAAlBJ,sCALM;IAMNK,WAAW,EAAXL,+BANM;IAONM,IAAI,EAAJN,wBAPM;IAQNO,OAAO,EAAPP,2BARM;IASNQ,OAAO,EAAPR,2BATM;IAUND;EAVM,CAAP;AAYA,CA7DM;;AAAMU,iCAAsB9B,sBAAtB","names":["initAccountsForContext","context","signTransactionWithContext","transaction","privateKey","__awaiter","tx","privateKeyBytes","format","web3_types_1","privateKeyToAccountWithContext","account","signTransaction","decryptWithContext","keystore","password","options","nonStrict","_a","createWithContext","wallet","web3_eth_accounts_1","create","privateKeyToAccount","decrypt","recoverTransaction","hashMessage","sign","recover","encrypt","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3/src/accounts.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EthExecutionAPI, Bytes, Transaction, KeyStore, ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { Web3Context } from 'web3-core';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\trecover,\n\trecoverTransaction,\n\tsignTransaction,\n\tsign,\n\tWallet,\n} from 'web3-eth-accounts';\n\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport const initAccountsForContext = (context: Web3Context<EthExecutionAPI>) => {\n\tconst signTransactionWithContext = async (transaction: Transaction, privateKey: Bytes) => {\n\t\tconst tx = await prepareTransactionForSigning(transaction, context);\n\n\t\tconst privateKeyBytes = format({ format: 'bytes' }, privateKey, ETH_DATA_FORMAT);\n\n\t\treturn signTransaction(tx, privateKeyBytes);\n\t};\n\n\tconst privateKeyToAccountWithContext = (privateKey: Uint8Array | string) => {\n\t\tconst account = privateKeyToAccount(privateKey);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst decryptWithContext = async (\n\t\tkeystore: KeyStore | string,\n\t\tpassword: string,\n\t\toptions?: Record<string, unknown>,\n\t) => {\n\t\tconst account = await decrypt(keystore, password, (options?.nonStrict as boolean) ?? true);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst createWithContext = () => {\n\t\tconst account = create();\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst wallet = new Wallet({\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t});\n\n\treturn {\n\t\tsignTransaction: signTransactionWithContext,\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t\trecoverTransaction,\n\t\thashMessage,\n\t\tsign,\n\t\trecover,\n\t\tencrypt,\n\t\twallet,\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}