{"ast":null,"code":"import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js'; // Polyfill for Safari 14\n\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n\n  const _32n = BigInt(32);\n\n  const _u32_max = BigInt(0xffffffff);\n\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n} // Base SHA2 class (RFC 6234)\n\n\nexport class SHA2 extends Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n\n  update(data) {\n    assert.exists(this);\n    const {\n      view,\n      buffer,\n      blockLen\n    } = this;\n    data = toBytes(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos); // Fast path: we have at least one block in input, cast it to view and process\n\n      if (take === blockLen) {\n        const dataView = createView(data);\n\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n\n        continue;\n      }\n\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n\n  digestInto(out) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true; // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this; // append the bit '1' to the message\n\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0); // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    } // Pad until full block byte with zeros\n\n\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0; // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n\n\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen; // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["assert","Hash","createView","toBytes","setBigUint64","view","byteOffset","value","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","SHA2","constructor","blockLen","outputLen","padOffset","buffer","Uint8Array","update","data","exists","len","length","pos","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","finished","fill","i","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","destroyed"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/hashes/src/_sha2.ts"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}