{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isNullish } from 'web3-validator';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js'; // check if code is a valid rpc server error code\n\nexport const isResponseRpcError = rpcError => {\n  const errorCode = rpcError.error.code;\n  return rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32000;\n};\nexport const isResponseWithResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && // JSON RPC consider \"null\" as valid response\n'result' in response && isNullish(response.error) && (typeof response.id === 'number' || typeof response.id === 'string'); // To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\n\nexport const isResponseWithError = response => !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && isNullish(response.result) && // JSON RPC consider \"null\" as valid response\n'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\nexport const isResponseWithNotification = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && !isNullish(response.params) && !isNullish(response.method);\nexport const isSubscriptionResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && 'id' in response && // JSON RPC consider \"null\" as valid response\n'result' in response;\nexport const validateResponse = response => isResponseWithResult(response) || isResponseWithError(response);\nexport const isValidResponse = response => Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);\nexport const isBatchResponse = response => Array.isArray(response) && response.length > 0 && isValidResponse(response); // internal optional variable to increment and use for the jsonrpc `id`\n\nlet requestIdSeed;\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\n\nexport const setRequestIdStart = start => {\n  requestIdSeed = start;\n};\nexport const toPayload = request => {\n  var _a, _b, _c, _d;\n\n  if (typeof requestIdSeed !== 'undefined') {\n    requestIdSeed += 1;\n  }\n\n  return {\n    jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : '2.0',\n    id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : uuidV4(),\n    method: request.method,\n    params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined\n  };\n};\nexport const toBatchPayload = requests => requests.map(request => toPayload(request));\nexport const isBatchRequest = request => Array.isArray(request) && request.length > 0;","map":{"version":3,"mappings":"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","names":["isNullish","rpcErrorsMap","uuidV4","isResponseRpcError","rpcError","errorCode","error","code","has","isResponseWithResult","response","Array","isArray","jsonrpc","id","isResponseWithError","result","isResponseWithNotification","params","method","isSubscriptionResult","validateResponse","isValidResponse","every","isBatchResponse","length","requestIdSeed","setRequestIdStart","start","toPayload","request","_a","_b","_c","_d","undefined","toBatchPayload","requests","map","isBatchRequest"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/json_rpc.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\nimport {\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tJsonRpcOptionalRequest,\n\tJsonRpcBatchRequest,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcSubscriptionResult,\n} from 'web3-types';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js';\n\n// check if code is a valid rpc server error code\nexport const isResponseRpcError = (rpcError: JsonRpcResponseWithError) => {\n\tconst errorCode = rpcError.error.code;\n\treturn rpcErrorsMap.has(errorCode) || (errorCode >= -32099 && errorCode <= -32000);\n};\n\nexport const isResponseWithResult = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithResult<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response &&\n\tisNullish(response.error) &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nexport const isResponseWithError = <Error = unknown, Result = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithError<Error> =>\n\t!Array.isArray(response) &&\n\tresponse.jsonrpc === '2.0' &&\n\t!!response &&\n\tisNullish(response.result) &&\n\t// JSON RPC consider \"null\" as valid response\n\t'error' in response &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\nexport const isResponseWithNotification = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcNotification<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t!isNullish(response.params) &&\n\t!isNullish(response.method);\n\nexport const isSubscriptionResult = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcSubscriptionResult =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t'id' in response &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response;\n\nexport const validateResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean => isResponseWithResult<Result>(response) || isResponseWithError<Error>(response);\n\nexport const isValidResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean =>\n\tArray.isArray(response) ? response.every(validateResponse) : validateResponse(response);\n\nexport const isBatchResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcBatchResponse<Result, Error> =>\n\tArray.isArray(response) && response.length > 0 && isValidResponse(response);\n\n// internal optional variable to increment and use for the jsonrpc `id`\nlet requestIdSeed: number | undefined;\n\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nexport const setRequestIdStart = (start: number | undefined) => {\n\trequestIdSeed = start;\n};\n\nexport const toPayload = <ParamType = unknown[]>(\n\trequest: JsonRpcOptionalRequest<ParamType>,\n): JsonRpcPayload<ParamType> => {\n\tif (typeof requestIdSeed !== 'undefined') {\n\t\trequestIdSeed += 1;\n\t}\n\treturn {\n\t\tjsonrpc: request.jsonrpc ?? '2.0',\n\t\tid: request.id ?? requestIdSeed ?? uuidV4(),\n\t\tmethod: request.method,\n\t\tparams: request.params ?? undefined,\n\t};\n};\n\nexport const toBatchPayload = (requests: JsonRpcOptionalRequest<unknown>[]): JsonRpcBatchRequest =>\n\trequests.map(request => toPayload<unknown>(request)) as JsonRpcBatchRequest;\n\nexport const isBatchRequest = (\n\trequest: JsonRpcBatchRequest | JsonRpcRequest<unknown> | JsonRpcOptionalRequest<unknown>,\n): request is JsonRpcBatchRequest => Array.isArray(request) && request.length > 0;\n"]},"metadata":{},"sourceType":"module"}