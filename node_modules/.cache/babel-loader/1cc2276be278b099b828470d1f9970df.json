{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors'; // eslint-disable-next-line import/no-cycle\n\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\n\nexport function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({\n      numberOfSeconds: web3Context.transactionSendTimeout / 1000,\n      transactionHash\n    }));\n    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);\n\n    try {\n      // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n      return yield Promise.race([sendTransactionFunc(), rejectOnTimeout, rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n      ]);\n    } finally {\n      clearTimeout(timeoutId);\n      blockTimeoutResourceCleaner.clean();\n    }\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAwBA,eAAxB,QAA+C,YAA/C;AACA,SAASC,2BAAT,QAA4C,aAA5C,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,8BAArC;AAEA;;;;;;;;AAOA,OAAM,SAAgBC,kBAAhB,CACLC,WADK,EAELC,mBAFK,EAGLC,eAHK,EAGkB;;IAEvB,MAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BR,eAAe,CACnDI,WAAW,CAACK,sBADuC,EAEnD,IAAIR,2BAAJ,CAAgC;MAC/BS,eAAe,EAAEN,WAAW,CAACK,sBAAZ,GAAqC,IADvB;MAE/BH;IAF+B,CAAhC,CAFmD,CAApD;IAQA,MAAM,CAACK,oBAAD,EAAuBC,2BAAvB,IAAsD,MAAMV,oBAAoB,CACrFE,WADqF,EAErFE,eAFqF,CAAtF;;IAKA,IAAI;MACH;MACA,OAAO,MAAMO,OAAO,CAACC,IAAR,CAAa,CACzBT,mBAAmB,EADM,EAEzBG,eAFyB,EAGzBG,oBAHyB,CAGH;MAHG,CAAb,CAAb;IAKA,CAPD,SAOU;MACTI,YAAY,CAACR,SAAD,CAAZ;MACAK,2BAA2B,CAACI,KAA5B;IACA;EACD;AAAA","names":["rejectIfTimeout","TransactionSendTimeoutError","rejectIfBlockTimeout","trySendTransaction","web3Context","sendTransactionFunc","transactionHash","timeoutId","rejectOnTimeout","transactionSendTimeout","numberOfSeconds","rejectOnBlockTimeout","blockTimeoutResourceCleaner","Promise","race","clearTimeout","clean"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/try_send_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context } from 'web3-core';\nimport { EthExecutionAPI, Bytes } from 'web3-types';\nimport { AsyncFunction, rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors';\n\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nexport async function trySendTransaction(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsendTransactionFunc: AsyncFunction<string>,\n\ttransactionHash?: Bytes,\n): Promise<string> {\n\tconst [timeoutId, rejectOnTimeout] = rejectIfTimeout(\n\t\tweb3Context.transactionSendTimeout,\n\t\tnew TransactionSendTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionSendTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tsendTransactionFunc(), // this is the function that will send the transaction\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Send Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tclearTimeout(timeoutId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}