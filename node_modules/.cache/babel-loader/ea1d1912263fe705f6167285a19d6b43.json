{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_CONN, ERR_CONN_INVALID, ERR_CONN_TIMEOUT, ERR_CONN_NOT_OPEN, ERR_CONN_CLOSE, ERR_CONN_MAX_ATTEMPTS, ERR_CONN_PENDING_REQUESTS, ERR_REQ_ALREADY_SENT } from '../error_codes.js';\nimport { BaseWeb3Error } from '../web3_error_base.js';\nexport class ConnectionError extends BaseWeb3Error {\n  constructor(message, event) {\n    super(message);\n    this.code = ERR_CONN;\n\n    if (event) {\n      this.errorCode = event.code;\n      this.errorReason = event.reason;\n    }\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      errorCode: this.errorCode,\n      errorReason: this.errorReason\n    });\n  }\n\n}\nexport class InvalidConnectionError extends ConnectionError {\n  constructor(host, event) {\n    super(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\n    this.host = host;\n    this.code = ERR_CONN_INVALID;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      host: this.host\n    });\n  }\n\n}\nexport class ConnectionTimeoutError extends ConnectionError {\n  constructor(duration) {\n    super(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\n    this.duration = duration;\n    this.code = ERR_CONN_TIMEOUT;\n  }\n\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      duration: this.duration\n    });\n  }\n\n}\nexport class ConnectionNotOpenError extends ConnectionError {\n  constructor(event) {\n    super('Connection not open', event);\n    this.code = ERR_CONN_NOT_OPEN;\n  }\n\n}\nexport class ConnectionCloseError extends ConnectionError {\n  constructor(event) {\n    var _a, _b;\n\n    super(`CONNECTION ERROR: The connection got closed with the close code ${(_a = event === null || event === void 0 ? void 0 : event.code) !== null && _a !== void 0 ? _a : ''} and the following reason string ${(_b = event === null || event === void 0 ? void 0 : event.reason) !== null && _b !== void 0 ? _b : ''}`, event);\n    this.code = ERR_CONN_CLOSE;\n  }\n\n}\nexport class MaxAttemptsReachedOnReconnectingError extends ConnectionError {\n  constructor(numberOfAttempts) {\n    super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\n    this.code = ERR_CONN_MAX_ATTEMPTS;\n  }\n\n}\nexport class PendingRequestsOnReconnectingError extends ConnectionError {\n  constructor() {\n    super('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n    this.code = ERR_CONN_PENDING_REQUESTS;\n  }\n\n}\nexport class RequestAlreadySentError extends ConnectionError {\n  constructor(id) {\n    super(`Request already sent with following id: ${id}`);\n    this.code = ERR_REQ_ALREADY_SENT;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,SACCA,QADD,EAECC,gBAFD,EAGCC,gBAHD,EAICC,iBAJD,EAKCC,cALD,EAMCC,qBAND,EAOCC,yBAPD,EAQCC,oBARD,QASO,mBATP;AAUA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAM,MAAOC,eAAP,SAA+BD,aAA/B,CAA4C;EAKjDE,YAAmBC,OAAnB,EAAoCC,KAApC,EAA2D;IAC1D,MAAMD,OAAN;IALM,YAAOX,QAAP;;IAON,IAAIY,KAAJ,EAAW;MACV,KAAKC,SAAL,GAAiBD,KAAK,CAACE,IAAvB;MACA,KAAKC,WAAL,GAAmBH,KAAK,CAACI,MAAzB;IACA;EACD;;EAEMC,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEJ,SAAS,EAAE,KAAKA,SAAlB;MAA6BE,WAAW,EAAE,KAAKA;IAA/C,CAA1B;EACA;;AAhBgD;AAmBlD,OAAM,MAAOG,sBAAP,SAAsCT,eAAtC,CAAqD;EAC1DC,YAA0BS,IAA1B,EAAwCP,KAAxC,EAA+D;IAC9D,MAAM,8CAA8CO,IAAI,GAAxD,EAA6DP,KAA7D;IADyB;IAEzB,KAAKE,IAAL,GAAYb,gBAAZ;EACA;;EAEMgB,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEE,IAAI,EAAE,KAAKA;IAAb,CAA1B;EACA;;AARyD;AAW3D,OAAM,MAAOC,sBAAP,SAAsCX,eAAtC,CAAqD;EAC1DC,YAA0BW,QAA1B,EAA0C;IACzC,MAAM,kCAAkCA,QAAQ,aAAhD;IADyB;IAEzB,KAAKP,IAAL,GAAYZ,gBAAZ;EACA;;EAEMe,MAAM;IACZ,uCAAY,MAAMA,MAAN,EAAZ,GAA0B;MAAEI,QAAQ,EAAE,KAAKA;IAAjB,CAA1B;EACA;;AARyD;AAW3D,OAAM,MAAOC,sBAAP,SAAsCb,eAAtC,CAAqD;EAC1DC,YAAmBE,KAAnB,EAA0C;IACzC,MAAM,qBAAN,EAA6BA,KAA7B;IACA,KAAKE,IAAL,GAAYX,iBAAZ;EACA;;AAJyD;AAO3D,OAAM,MAAOoB,oBAAP,SAAoCd,eAApC,CAAmD;EACxDC,YAAmBE,KAAnB,EAA0C;;;IACzC,MACC,mEACC,WAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEE,IAAP,MAAW,IAAX,IAAWU,aAAX,GAAWA,EAAX,GAAe,EAChB,oCAAoC,WAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAER,MAAP,MAAa,IAAb,IAAaS,aAAb,GAAaA,EAAb,GAAiB,EAAE,EAHxD,EAICb,KAJD;IAMA,KAAKE,IAAL,GAAYV,cAAZ;EACA;;AATuD;AAYzD,OAAM,MAAOsB,qCAAP,SAAqDjB,eAArD,CAAoE;EACzEC,YAAmBiB,gBAAnB,EAA2C;IAC1C,MAAM,kDAAkDA,gBAAgB,GAAxE;IACA,KAAKb,IAAL,GAAYT,qBAAZ;EACA;;AAJwE;AAO1E,OAAM,MAAOuB,kCAAP,SAAkDnB,eAAlD,CAAiE;EACtEC;IACC,MAAM,mFAAN;IACA,KAAKI,IAAL,GAAYR,yBAAZ;EACA;;AAJqE;AAOvE,OAAM,MAAOuB,uBAAP,SAAuCpB,eAAvC,CAAsD;EAC3DC,YAAmBoB,EAAnB,EAAsC;IACrC,MAAM,2CAA2CA,EAAE,EAAnD;IACA,KAAKhB,IAAL,GAAYP,oBAAZ;EACA;;AAJ0D","names":["ERR_CONN","ERR_CONN_INVALID","ERR_CONN_TIMEOUT","ERR_CONN_NOT_OPEN","ERR_CONN_CLOSE","ERR_CONN_MAX_ATTEMPTS","ERR_CONN_PENDING_REQUESTS","ERR_REQ_ALREADY_SENT","BaseWeb3Error","ConnectionError","constructor","message","event","errorCode","code","errorReason","reason","toJSON","InvalidConnectionError","host","ConnectionTimeoutError","duration","ConnectionNotOpenError","ConnectionCloseError","_a","_b","MaxAttemptsReachedOnReconnectingError","numberOfAttempts","PendingRequestsOnReconnectingError","RequestAlreadySentError","id"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-errors/src/errors/connection_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport { ConnectionEvent } from 'web3-types';\nimport {\n\tERR_CONN,\n\tERR_CONN_INVALID,\n\tERR_CONN_TIMEOUT,\n\tERR_CONN_NOT_OPEN,\n\tERR_CONN_CLOSE,\n\tERR_CONN_MAX_ATTEMPTS,\n\tERR_CONN_PENDING_REQUESTS,\n\tERR_REQ_ALREADY_SENT,\n} from '../error_codes.js';\nimport { BaseWeb3Error } from '../web3_error_base.js';\n\nexport class ConnectionError extends BaseWeb3Error {\n\tpublic code = ERR_CONN;\n\tpublic errorCode?: number;\n\tpublic errorReason?: string;\n\n\tpublic constructor(message: string, event?: ConnectionEvent) {\n\t\tsuper(message);\n\n\t\tif (event) {\n\t\t\tthis.errorCode = event.code;\n\t\t\tthis.errorReason = event.reason;\n\t\t}\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), errorCode: this.errorCode, errorReason: this.errorReason };\n\t}\n}\n\nexport class InvalidConnectionError extends ConnectionError {\n\tpublic constructor(public host: string, event?: ConnectionEvent) {\n\t\tsuper(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\n\t\tthis.code = ERR_CONN_INVALID;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), host: this.host };\n\t}\n}\n\nexport class ConnectionTimeoutError extends ConnectionError {\n\tpublic constructor(public duration: number) {\n\t\tsuper(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\n\t\tthis.code = ERR_CONN_TIMEOUT;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), duration: this.duration };\n\t}\n}\n\nexport class ConnectionNotOpenError extends ConnectionError {\n\tpublic constructor(event?: ConnectionEvent) {\n\t\tsuper('Connection not open', event);\n\t\tthis.code = ERR_CONN_NOT_OPEN;\n\t}\n}\n\nexport class ConnectionCloseError extends ConnectionError {\n\tpublic constructor(event?: ConnectionEvent) {\n\t\tsuper(\n\t\t\t`CONNECTION ERROR: The connection got closed with the close code ${\n\t\t\t\tevent?.code ?? ''\n\t\t\t} and the following reason string ${event?.reason ?? ''}`,\n\t\t\tevent,\n\t\t);\n\t\tthis.code = ERR_CONN_CLOSE;\n\t}\n}\n\nexport class MaxAttemptsReachedOnReconnectingError extends ConnectionError {\n\tpublic constructor(numberOfAttempts: number) {\n\t\tsuper(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\n\t\tthis.code = ERR_CONN_MAX_ATTEMPTS;\n\t}\n}\n\nexport class PendingRequestsOnReconnectingError extends ConnectionError {\n\tpublic constructor() {\n\t\tsuper('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n\t\tthis.code = ERR_CONN_PENDING_REQUESTS;\n\t}\n}\n\nexport class RequestAlreadySentError extends ConnectionError {\n\tpublic constructor(id: number | string) {\n\t\tsuper(`Request already sent with following id: ${id}`);\n\t\tthis.code = ERR_REQ_ALREADY_SENT;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}