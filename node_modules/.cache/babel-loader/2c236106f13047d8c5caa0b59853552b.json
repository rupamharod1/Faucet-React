{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Web3Context, Web3ConfigEvent } from 'web3-core';\nimport { ContractExecutionError, ContractTransactionDataAndInputError, SubscriptionError, Web3ContractError } from 'web3-errors';\nimport { createAccessList, call, estimateGas, getLogs, sendTransaction, decodeEventABI, NewHeadsSubscription, ALL_EVENTS, ALL_EVENTS_ABI } from 'web3-eth';\nimport { encodeEventSignature, encodeFunctionSignature, decodeContractErrorData, isAbiErrorFragment, isAbiEventFragment, isAbiFunctionFragment, jsonInterfaceMethodToString } from 'web3-eth-abi';\nimport { BlockTags, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { format, isDataFormat, keccak256, toChecksumAddress } from 'web3-utils';\nimport { isNullish, validator, utils as validatorUtils, Web3ValidatorError } from 'web3-validator';\nimport { decodeMethodReturn, encodeEventABI, encodeMethodABI } from './encoding.js';\nimport { LogsSubscription } from './log_subscription.js';\nimport { getCreateAccessListParams, getEstimateGasParams, getEthTxCallParams, getSendTxParams, isContractInitOptions, isWeb3ContractContext } from './utils.js';\nconst contractSubscriptions = {\n  logs: LogsSubscription,\n  newHeads: NewHeadsSubscription,\n  newBlockHeaders: NewHeadsSubscription\n};\n/**\n * The class designed to interact with smart contracts on the Ethereum blockchain.\n */\n\nexport class Contract extends Web3Context {\n  constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {\n    var _a, _b, _c; // eslint-disable-next-line no-nested-ternary\n\n\n    const options = isContractInitOptions(addressOrOptionsOrContext) ? addressOrOptionsOrContext : isContractInitOptions(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;\n    let contractContext;\n\n    if (isWeb3ContractContext(addressOrOptionsOrContext)) {\n      contractContext = addressOrOptionsOrContext;\n    } else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n      contractContext = optionsOrContextOrReturnFormat;\n    } else {\n      contractContext = contextOrReturnFormat;\n    }\n\n    let provider;\n\n    if (typeof addressOrOptionsOrContext === 'object' && 'provider' in addressOrOptionsOrContext) {\n      provider = addressOrOptionsOrContext.provider;\n    } else if (typeof optionsOrContextOrReturnFormat === 'object' && 'provider' in optionsOrContextOrReturnFormat) {\n      provider = optionsOrContextOrReturnFormat.provider;\n    } else if (typeof contextOrReturnFormat === 'object' && 'provider' in contextOrReturnFormat) {\n      provider = contextOrReturnFormat.provider;\n    } else {\n      provider = Contract.givenProvider;\n    }\n\n    super(Object.assign(Object.assign({}, contractContext), {\n      provider,\n      registeredSubscriptions: contractSubscriptions\n    }));\n    /**\n     * Set to true if you want contracts' defaults to sync with global defaults.\n     */\n\n    this.syncWithContext = false;\n    this._functions = {};\n    if (!isNullish(options) && !isNullish(options.data) && !isNullish(options.input) && this.config.contractDataInputFill !== 'both') throw new ContractTransactionDataAndInputError({\n      data: options.data,\n      input: options.input\n    });\n    this._overloadedMethodAbis = new Map(); // eslint-disable-next-line no-nested-ternary\n\n    const returnDataFormat = isDataFormat(contextOrReturnFormat) ? contextOrReturnFormat : isDataFormat(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : DEFAULT_RETURN_FORMAT;\n    const address = typeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n\n    if (this.config.contractDataInputFill === 'both') {\n      this._dataInputFill = this.config.contractDataInputFill;\n    } else {\n      this._dataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;\n    }\n\n    this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n\n    if (!isNullish(address)) {\n      this._parseAndSetAddress(address, returnDataFormat);\n    }\n\n    this.options = {\n      address,\n      jsonInterface: this._jsonInterface,\n      gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,\n      gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,\n      from: options === null || options === void 0 ? void 0 : options.from,\n      input: options === null || options === void 0 ? void 0 : options.input,\n      data: options === null || options === void 0 ? void 0 : options.data\n    };\n    this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;\n\n    if (contractContext instanceof Web3Context) {\n      this.subscribeToContextEvents(contractContext);\n    }\n\n    Object.defineProperty(this.options, 'address', {\n      set: value => this._parseAndSetAddress(value, returnDataFormat),\n      get: () => this._address\n    });\n    Object.defineProperty(this.options, 'jsonInterface', {\n      set: value => this._parseAndSetJsonInterface(value, returnDataFormat),\n      get: () => this._jsonInterface\n    });\n  }\n  /**\n   * Subscribe to an event.\n   *\n   * ```ts\n   * await myContract.events.MyEvent([options])\n   * ```\n   *\n   * There is a special event `allEvents` that can be used to subscribe all events.\n   *\n   * ```ts\n   * await myContract.events.allEvents([options])\n   * ```\n   *\n   * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n   */\n\n\n  get events() {\n    return this._events;\n  }\n  /**\n   * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n   *\n   * The methods of this smart contract are available through:\n   *\n   * The name: `myContract.methods.myMethod(123)`\n   * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n   * The signature `myContract.methods['0x58cf5f10'](123)`\n   *\n   * This allows calling functions with same name but different parameters from the JavaScript contract object.\n   *\n   * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n   *\n   * ```ts\n   * // calling a method\n   * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   *\n   * // or sending and using a promise\n   * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   *\n   * // or sending and using the events\n   * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n   * sendObject.on('transactionHash', function(hash){\n   *   ...\n   * });\n   * sendObject.on('receipt', function(receipt){\n   *   ...\n   * });\n   * sendObject.on('confirmation', function(confirmationNumber, receipt){\n   *   ...\n   * });\n   * sendObject.on('error', function(error, receipt) {\n   *   ...\n   * });\n   * ```\n   *\n   * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the {@doclink glossary/json_interface | json interface} of that contract.\n   */\n\n\n  get methods() {\n    return this._methods;\n  }\n  /**\n   * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n   *\n   * @returns - The new contract instance.\n   *\n   * ```ts\n   * const contract1 = new eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n   *\n   * const contract2 = contract1.clone();\n   * contract2.options.address = address2;\n   *\n   * (contract1.options.address !== contract2.options.address);\n   * > true\n   * ```\n   */\n\n\n  clone() {\n    let newContract;\n\n    if (this.options.address) {\n      newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], this.options.address, {\n        gas: this.options.gas,\n        gasPrice: this.options.gasPrice,\n        from: this.options.from,\n        input: this.options.input,\n        data: this.options.data,\n        provider: this.currentProvider,\n        syncWithContext: this.syncWithContext,\n        dataInputFill: this._dataInputFill\n      }, this.getContextObject());\n    } else {\n      newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], {\n        gas: this.options.gas,\n        gasPrice: this.options.gasPrice,\n        from: this.options.from,\n        input: this.options.input,\n        data: this.options.data,\n        provider: this.currentProvider,\n        syncWithContext: this.syncWithContext,\n        dataInputFill: this._dataInputFill\n      }, this.getContextObject());\n    }\n\n    if (this.context) newContract.subscribeToContextEvents(this.context);\n    return newContract;\n  }\n  /**\n   * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n   *\n   * ```ts\n   * myContract.deploy({\n   *   input: '0x12345...', // data keyword can be used, too. If input is used, data will be ignored.\n   *   arguments: [123, 'My String']\n   * })\n   * .send({\n   *   from: '0x1234567890123456789012345678901234567891',\n   *   gas: 1500000,\n   *   gasPrice: '30000000000000'\n   * }, function(error, transactionHash){ ... })\n   * .on('error', function(error){ ... })\n   * .on('transactionHash', function(transactionHash){ ... })\n   * .on('receipt', function(receipt){\n   *  console.log(receipt.contractAddress) // contains the new contract address\n   * })\n   * .on('confirmation', function(confirmationNumber, receipt){ ... })\n   * .then(function(newContractInstance){\n   *   console.log(newContractInstance.options.address) // instance with the new contract address\n   * });\n   *\n   *\n   * // When the data is already set as an option to the contract itself\n   * myContract.options.data = '0x12345...';\n   *\n   * myContract.deploy({\n   *   arguments: [123, 'My String']\n   * })\n   * .send({\n   *   from: '0x1234567890123456789012345678901234567891',\n   *   gas: 1500000,\n   *   gasPrice: '30000000000000'\n   * })\n   * .then(function(newContractInstance){\n   *   console.log(newContractInstance.options.address) // instance with the new contract address\n   * });\n   *\n   *\n   * // Simply encoding\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   arguments: [123, 'My String']\n   * })\n   * .encodeABI();\n   * > '0x12345...0000012345678765432'\n   *\n   *\n   * // Gas estimation\n   * myContract.deploy({\n   *   input: '0x12345...',\n   *   arguments: [123, 'My String']\n   * })\n   * .estimateGas(function(err, gas){\n   *   console.log(gas);\n   * });\n   * ```\n   *\n   * @returns - The transaction object\n   */\n\n\n  deploy(deployOptions) {\n    var _this = this;\n\n    var _a, _b, _c;\n\n    let abi = this._jsonInterface.find(j => j.type === 'constructor');\n\n    if (!abi) {\n      abi = {\n        type: 'constructor',\n        inputs: [],\n        stateMutability: ''\n      };\n    }\n\n    const _input = format({\n      format: 'bytes'\n    }, (_a = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.input) !== null && _a !== void 0 ? _a : this.options.input, DEFAULT_RETURN_FORMAT);\n\n    const _data = format({\n      format: 'bytes'\n    }, (_b = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.data) !== null && _b !== void 0 ? _b : this.options.data, DEFAULT_RETURN_FORMAT);\n\n    if ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {\n      throw new Web3ContractError('contract creation without any data provided.');\n    }\n\n    const args = (_c = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.arguments) !== null && _c !== void 0 ? _c : [];\n    const contractOptions = Object.assign(Object.assign({}, this.options), {\n      input: _input,\n      data: _data\n    });\n    const deployData = _input !== null && _input !== void 0 ? _input : _data;\n    return {\n      arguments: args,\n      send: options => {\n        const modifiedOptions = Object.assign({}, options); // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n        return this._contractMethodDeploySend(abi, args, modifiedOptions, contractOptions);\n      },\n      estimateGas: function (options) {\n        let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n        return __awaiter(_this, void 0, void 0, function* () {\n          const modifiedOptions = Object.assign({}, options);\n          return this._contractMethodEstimateGas({\n            abi: abi,\n            params: args,\n            returnFormat,\n            options: modifiedOptions,\n            contractOptions\n          });\n        });\n      },\n      encodeABI: () => encodeMethodABI(abi, args, format({\n        format: 'bytes'\n      }, deployData, DEFAULT_RETURN_FORMAT))\n    };\n  }\n\n  getPastEvents(param1, param2, param3) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n      const options = // eslint-disable-next-line no-nested-ternary\n      typeof param1 !== 'string' && !isDataFormat(param1) ? param1 : !isDataFormat(param2) ? param2 : {}; // eslint-disable-next-line no-nested-ternary\n\n      const returnFormat = isDataFormat(param1) ? param1 : isDataFormat(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : DEFAULT_RETURN_FORMAT;\n      const abi = eventName === 'allEvents' || eventName === ALL_EVENTS ? ALL_EVENTS_ABI : this._jsonInterface.find(j => 'name' in j && j.name === eventName);\n\n      if (!abi) {\n        throw new Web3ContractError(`Event ${eventName} not found.`);\n      }\n\n      const {\n        fromBlock,\n        toBlock,\n        topics,\n        address\n      } = encodeEventABI(this.options, abi, options !== null && options !== void 0 ? options : {});\n      const logs = yield getLogs(this, {\n        fromBlock,\n        toBlock,\n        topics,\n        address\n      }, returnFormat);\n      const decodedLogs = logs.map(log => typeof log === 'string' ? log : decodeEventABI(abi, log, this._jsonInterface, returnFormat));\n      const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n      const filterKeys = Object.keys(filter);\n\n      if (filterKeys.length > 0) {\n        return decodedLogs.filter(log => {\n          if (typeof log === 'string') return true;\n          return filterKeys.every(key => {\n            var _a;\n\n            if (Array.isArray(filter[key])) {\n              return filter[key].some(v => String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());\n            }\n\n            const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter(input => input.name === key)[0];\n\n            if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === 'string') {\n              const hashedIndexedString = keccak256(filter[key]);\n              if (hashedIndexedString === String(log.returnValues[key])) return true;\n            }\n\n            return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();\n          });\n        });\n      }\n\n      return decodedLogs;\n    });\n  }\n\n  _parseAndSetAddress(value) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    this._address = value ? toChecksumAddress(format({\n      format: 'address'\n    }, value, returnFormat)) : value;\n  }\n\n  _parseAndSetJsonInterface(abis) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n\n    var _a, _b, _c, _d, _e;\n\n    this._functions = {};\n    this._methods = {};\n    this._events = {};\n    let result = [];\n    const functionsAbi = abis.filter(abi => abi.type !== 'error');\n    const errorsAbi = abis.filter(abi => isAbiErrorFragment(abi));\n\n    for (const a of functionsAbi) {\n      const abi = Object.assign(Object.assign({}, a), {\n        signature: ''\n      });\n\n      if (isAbiFunctionFragment(abi)) {\n        const methodName = jsonInterfaceMethodToString(abi);\n        const methodSignature = encodeFunctionSignature(methodName);\n        abi.signature = methodSignature; // make constant and payable backwards compatible\n\n        abi.constant = (_b = (_a = abi.stateMutability === 'view') !== null && _a !== void 0 ? _a : abi.stateMutability === 'pure') !== null && _b !== void 0 ? _b : abi.constant;\n        abi.payable = (_c = abi.stateMutability === 'payable') !== null && _c !== void 0 ? _c : abi.payable;\n\n        this._overloadedMethodAbis.set(abi.name, [...((_d = this._overloadedMethodAbis.get(abi.name)) !== null && _d !== void 0 ? _d : []), abi]);\n\n        const abiFragment = (_e = this._overloadedMethodAbis.get(abi.name)) !== null && _e !== void 0 ? _e : [];\n\n        const contractMethod = this._createContractMethod(abiFragment, errorsAbi);\n\n        this._functions[methodName] = {\n          signature: methodSignature,\n          method: contractMethod\n        }; // We don't know a particular type of the Abi method so can't type check\n\n        this._methods[abi.name] = this._functions[methodName].method; // We don't know a particular type of the Abi method so can't type check\n\n        this._methods[methodName] = this._functions[methodName].method; // We don't know a particular type of the Abi method so can't type check\n\n        this._methods[methodSignature] = this._functions[methodName].method;\n      } else if (isAbiEventFragment(abi)) {\n        const eventName = jsonInterfaceMethodToString(abi);\n        const eventSignature = encodeEventSignature(eventName);\n\n        const event = this._createContractEvent(abi, returnFormat);\n\n        abi.signature = eventSignature;\n\n        if (!(eventName in this._events) || abi.name === 'bound') {\n          // It's a private type and we don't want to expose it and no need to check\n          this._events[eventName] = event;\n        } // It's a private type and we don't want to expose it and no need to check\n\n\n        this._events[abi.name] = event; // It's a private type and we don't want to expose it and no need to check\n\n        this._events[eventSignature] = event;\n      }\n\n      result = [...result, abi];\n    }\n\n    this._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n    this._jsonInterface = [...result];\n    this._errorsInterface = errorsAbi;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  _getAbiParams(abi, params) {\n    var _a;\n\n    try {\n      return validatorUtils.transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);\n    } catch (error) {\n      throw new Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);\n    }\n  }\n\n  _createContractMethod(abiArr, errorsAbis) {\n    var _this2 = this;\n\n    const abi = abiArr[abiArr.length - 1];\n    return function () {\n      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n        params[_key] = arguments[_key];\n      }\n\n      var _a, _b;\n\n      let abiParams;\n      const abis = (_a = _this2._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : [];\n      let methodAbi = abis[0];\n      const internalErrorsAbis = errorsAbis;\n      const arrayOfAbis = abis.filter(_abi => {\n        var _a;\n\n        return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;\n      });\n\n      if (abis.length === 1 || arrayOfAbis.length === 0) {\n        abiParams = _this2._getAbiParams(methodAbi, params);\n        validator.validate((_b = abi.inputs) !== null && _b !== void 0 ? _b : [], abiParams);\n      } else {\n        const errors = [];\n\n        for (const _abi of arrayOfAbis) {\n          try {\n            abiParams = _this2._getAbiParams(_abi, params);\n            validator.validate(_abi.inputs, abiParams);\n            methodAbi = _abi;\n            break;\n          } catch (e) {\n            errors.push(e);\n          }\n        }\n\n        if (errors.length === arrayOfAbis.length) {\n          throw new Web3ValidatorError(errors);\n        }\n      }\n\n      const methods = {\n        arguments: abiParams,\n        call: (options, block) => __awaiter(_this2, void 0, void 0, function* () {\n          return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);\n        }),\n        send: options => _this2._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n        estimateGas: function (options) {\n          let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n          return __awaiter(_this2, void 0, void 0, function* () {\n            return this._contractMethodEstimateGas({\n              abi: methodAbi,\n              params: abiParams,\n              returnFormat,\n              options\n            });\n          });\n        },\n        encodeABI: () => encodeMethodABI(methodAbi, abiParams),\n        createAccessList: (options, block) => __awaiter(_this2, void 0, void 0, function* () {\n          return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);\n        })\n      };\n\n      if (methodAbi.stateMutability === 'payable') {\n        return methods;\n      }\n\n      return methods;\n    };\n  }\n\n  _contractMethodCall(abi, params, errorsAbi, options, block) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = getEthTxCallParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this._dataInputFill\n        }),\n        contractOptions: Object.assign(Object.assign({}, this.options), {\n          from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n        })\n      });\n\n      try {\n        const result = yield call(this, tx, block, DEFAULT_RETURN_FORMAT);\n        return decodeMethodReturn(abi, result);\n      } catch (error) {\n        if (error instanceof ContractExecutionError) {\n          // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n          decodeContractErrorData(errorsAbi, error.innerError);\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = getCreateAccessListParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: Object.assign(Object.assign({}, this.options), {\n          from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n        })\n      });\n\n      try {\n        return createAccessList(this, tx, block, DEFAULT_RETURN_FORMAT);\n      } catch (error) {\n        if (error instanceof ContractExecutionError) {\n          // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n          decodeContractErrorData(errorsAbi, error.innerError);\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {\n    var _a, _b;\n\n    let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n    modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n      input: undefined,\n      from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n    });\n    const tx = getSendTxParams({\n      abi,\n      params,\n      options: Object.assign(Object.assign({}, options), {\n        dataInputFill: this.config.contractDataInputFill\n      }),\n      contractOptions: modifiedContractOptions\n    });\n    const transactionToSend = sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false,\n      contractAbi: this._jsonInterface\n    }); // eslint-disable-next-line no-void\n\n    void transactionToSend.on('error', error => {\n      if (error instanceof ContractExecutionError) {\n        // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n        decodeContractErrorData(errorsAbi, error.innerError);\n      }\n    });\n    return transactionToSend;\n  }\n\n  _contractMethodDeploySend(abi, params, options, contractOptions) {\n    var _a, _b;\n\n    let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n    modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n      from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n    });\n    const tx = getSendTxParams({\n      abi,\n      params,\n      options: Object.assign(Object.assign({}, options), {\n        dataInputFill: this.config.contractDataInputFill\n      }),\n      contractOptions: modifiedContractOptions\n    });\n    return sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n      transactionResolver: receipt => {\n        if (receipt.status === BigInt(0)) {\n          throw new Web3ContractError(\"code couldn't be stored\", receipt);\n        }\n\n        const newContract = this.clone(); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        newContract.options.address = receipt.contractAddress;\n        return newContract;\n      },\n      contractAbi: this._jsonInterface,\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false\n    });\n  }\n\n  _contractMethodEstimateGas(_ref) {\n    let {\n      abi,\n      params,\n      returnFormat,\n      options,\n      contractOptions\n    } = _ref;\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = getEstimateGasParams({\n        abi,\n        params,\n        options: Object.assign(Object.assign({}, options), {\n          dataInputFill: this.config.contractDataInputFill\n        }),\n        contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options\n      });\n      return estimateGas(this, tx, BlockTags.LATEST, returnFormat);\n    });\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  _createContractEvent(abi) {\n    var _this3 = this;\n\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return function () {\n      var _a;\n\n      const {\n        topics,\n        fromBlock\n      } = encodeEventABI(_this3.options, abi, arguments.length <= 0 ? undefined : arguments[0]);\n      const sub = new LogsSubscription({\n        address: _this3.options.address,\n        topics,\n        abi,\n        jsonInterface: _this3._jsonInterface\n      }, {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        subscriptionManager: _this3.subscriptionManager,\n        returnFormat\n      });\n\n      if (!isNullish(fromBlock)) {\n        // emit past events when fromBlock is defined\n        _this3.getPastEvents(abi.name, {\n          fromBlock,\n          topics\n        }, returnFormat).then(logs => {\n          logs.forEach(log => sub.emit('data', log));\n        }).catch(error => {\n          sub.emit('error', new SubscriptionError('Failed to get past events.', error));\n        });\n      }\n\n      (_a = _this3.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch(error => {\n        sub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n      });\n      return sub;\n    };\n  }\n\n  subscribeToContextEvents(context) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const contractThis = this;\n    this.context = context;\n\n    if (contractThis.syncWithContext) {\n      context.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n        contractThis.setConfig({\n          [event.name]: event.newValue\n        });\n      });\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Web3Context","Web3ConfigEvent","ContractExecutionError","ContractTransactionDataAndInputError","SubscriptionError","Web3ContractError","createAccessList","call","estimateGas","getLogs","sendTransaction","decodeEventABI","NewHeadsSubscription","ALL_EVENTS","ALL_EVENTS_ABI","encodeEventSignature","encodeFunctionSignature","decodeContractErrorData","isAbiErrorFragment","isAbiEventFragment","isAbiFunctionFragment","jsonInterfaceMethodToString","BlockTags","DEFAULT_RETURN_FORMAT","format","isDataFormat","keccak256","toChecksumAddress","isNullish","validator","utils","validatorUtils","Web3ValidatorError","decodeMethodReturn","encodeEventABI","encodeMethodABI","LogsSubscription","getCreateAccessListParams","getEstimateGasParams","getEthTxCallParams","getSendTxParams","isContractInitOptions","isWeb3ContractContext","contractSubscriptions","logs","newHeads","newBlockHeaders","Contract","constructor","jsonInterface","addressOrOptionsOrContext","optionsOrContextOrReturnFormat","contextOrReturnFormat","returnFormat","options","undefined","contractContext","provider","givenProvider","Object","registeredSubscriptions","data","input","config","contractDataInputFill","_overloadedMethodAbis","Map","returnDataFormat","address","_dataInputFill","dataInputFill","_a","_parseAndSetJsonInterface","_parseAndSetAddress","_jsonInterface","gas","_b","gasLimit","gasPrice","from","syncWithContext","_c","subscribeToContextEvents","defineProperty","set","value","get","_address","events","_events","methods","_methods","clone","newContract","_errorsInterface","currentProvider","getContextObject","context","deploy","deployOptions","abi","find","j","type","inputs","stateMutability","_input","_data","trim","args","arguments","contractOptions","deployData","send","modifiedOptions","_contractMethodDeploySend","__awaiter","_contractMethodEstimateGas","params","encodeABI","getPastEvents","param1","param2","param3","eventName","name","fromBlock","toBlock","topics","decodedLogs","map","log","filter","filterKeys","keys","length","every","key","Array","isArray","some","v","String","returnValues","toUpperCase","inputAbi","indexed","hashedIndexedString","abis","_functions","result","functionsAbi","errorsAbi","a","signature","methodName","methodSignature","constant","payable","_d","abiFragment","_e","contractMethod","_createContractMethod","method","eventSignature","event","_createContractEvent","allEvents","_getAbiParams","transformJsonDataToAbiFormat","error","message","abiArr","errorsAbis","abiParams","methodAbi","internalErrorsAbis","arrayOfAbis","_abi","validate","errors","e","push","block","_contractMethodCall","_contractMethodSend","_contractMethodCreateAccessList","tx","defaultAccount","innerError","modifiedContractOptions","transactionToSend","checkRevertBeforeSending","contractAbi","on","transactionResolver","receipt","status","BigInt","contractAddress","LATEST","sub","subscriptionManager","then","forEach","emit","catch","addSubscription","contractThis","CONFIG_CHANGE","setConfig","newValue"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-contract/src/contract.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tWeb3Context,\n\tWeb3EventEmitter,\n\tWeb3PromiEvent,\n\tWeb3ConfigEvent,\n\tWeb3SubscriptionManager,\n} from 'web3-core';\nimport {\n\tContractExecutionError,\n\tContractTransactionDataAndInputError,\n\tSubscriptionError,\n\tWeb3ContractError,\n} from 'web3-errors';\nimport {\n\tcreateAccessList,\n\tcall,\n\testimateGas,\n\tgetLogs,\n\tsendTransaction,\n\tdecodeEventABI,\n\tNewHeadsSubscription,\n\tALL_EVENTS,\n\tALL_EVENTS_ABI,\n\tSendTransactionEvents,\n} from 'web3-eth';\nimport {\n\tencodeEventSignature,\n\tencodeFunctionSignature,\n\tdecodeContractErrorData,\n\tisAbiErrorFragment,\n\tisAbiEventFragment,\n\tisAbiFunctionFragment,\n\tjsonInterfaceMethodToString,\n} from 'web3-eth-abi';\nimport {\n\tAbiConstructorFragment,\n\tAbiErrorFragment,\n\tAbiEventFragment,\n\tAbiFragment,\n\tAbiFunctionFragment,\n\tContractAbi,\n\tContractConstructorArgs,\n\tContractEvent,\n\tContractEvents,\n\tContractMethod,\n\tContractMethodInputParameters,\n\tContractMethodOutputParameters,\n\tAddress,\n\tBlockNumberOrTag,\n\tBlockTags,\n\tBytes,\n\tEthExecutionAPI,\n\tFilter,\n\tFilterAbis,\n\tHexString,\n\tLogsInput,\n\tMutable,\n\tContractInitOptions,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tNumbers,\n\tWeb3ValidationErrorObject,\n\tEventLog,\n\tContractAbiWithSignature,\n\tContractOptions,\n} from 'web3-types';\nimport { format, isDataFormat, keccak256, toChecksumAddress } from 'web3-utils';\nimport {\n\tisNullish,\n\tvalidator,\n\tutils as validatorUtils,\n\tValidationSchemaInput,\n\tWeb3ValidatorError,\n} from 'web3-validator';\nimport { decodeMethodReturn, encodeEventABI, encodeMethodABI } from './encoding.js';\nimport { LogsSubscription } from './log_subscription.js';\nimport {\n\tContractEventOptions,\n\tNonPayableMethodObject,\n\tNonPayableTxOptions,\n\tPayableMethodObject,\n\tPayableTxOptions,\n\tWeb3ContractContext,\n} from './types.js';\nimport {\n\tgetCreateAccessListParams,\n\tgetEstimateGasParams,\n\tgetEthTxCallParams,\n\tgetSendTxParams,\n\tisContractInitOptions,\n\tisWeb3ContractContext,\n} from './utils.js';\n\ntype ContractBoundMethod<\n\tAbi extends AbiFunctionFragment,\n\tMethod extends ContractMethod<Abi> = ContractMethod<Abi>,\n> = (\n\t...args: Method['Inputs']\n) => Method['Abi']['stateMutability'] extends 'payable' | 'pure'\n\t? PayableMethodObject<Method['Inputs'], Method['Outputs']>\n\t: NonPayableMethodObject<Method['Inputs'], Method['Outputs']>;\n\nexport type ContractOverloadedMethodInputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodInputParameters<A['inputs']> | ContractOverloadedMethodInputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\nexport type ContractOverloadedMethodOutputs<AbiArr extends ReadonlyArray<unknown>> = NonNullable<\n\tAbiArr extends readonly []\n\t\t? undefined\n\t\t: AbiArr extends readonly [infer A, ...infer R]\n\t\t? A extends AbiFunctionFragment\n\t\t\t? ContractMethodOutputParameters<A['outputs']> | ContractOverloadedMethodOutputs<R>\n\t\t\t: undefined\n\t\t: undefined\n>;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractMethodsInterface<Abi extends ContractAbi> = {\n\t[MethodAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'function' }\n\t> as MethodAbi['name']]: ContractBoundMethod<MethodAbi>;\n\t// To allow users to use method signatures\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n} & { [key: string]: ContractBoundMethod<any> };\n\n/**\n * The event object can be accessed from `myContract.events.myEvent`.\n *\n * \\> Remember: To subscribe to an event, your provider must have support for subscriptions.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent([options])\n * ```\n *\n * @param options - The options used to subscribe for the event\n * @returns - A Promise resolved with {@link LogsSubscription} object\n */\nexport type ContractBoundEvent = (options?: ContractEventOptions) => LogsSubscription;\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventsInterface<\n\tAbi extends ContractAbi,\n\tEvents extends ContractEvents<Abi> = ContractEvents<Abi>,\n> = {\n\t[Name in keyof Events | 'allEvents']: ContractBoundEvent;\n} & {\n\t[key: string]: ContractBoundEvent;\n};\n\n// To avoid circular dependency between types and encoding, declared these types here.\nexport type ContractEventEmitterInterface<Abi extends ContractAbi> = {\n\t[EventAbi in FilterAbis<\n\t\tAbi,\n\t\tAbiFunctionFragment & { type: 'event' }\n\t> as EventAbi['name']]: ContractEvent<EventAbi>['Inputs'];\n};\n\ntype EventParameters = Parameters<typeof encodeEventABI>[2];\n\nconst contractSubscriptions = {\n\tlogs: LogsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tnewBlockHeaders: NewHeadsSubscription,\n};\n\n/**\n * The class designed to interact with smart contracts on the Ethereum blockchain.\n */\nexport class Contract<Abi extends ContractAbi>\n\textends Web3Context<EthExecutionAPI, typeof contractSubscriptions>\n\timplements Web3EventEmitter<ContractEventEmitterInterface<Abi>>\n{\n\t/**\n\t * The options `object` for the contract instance. `from`, `gas` and `gasPrice` are used as fallback values when sending transactions.\n\t *\n\t * ```ts\n\t * myContract.options;\n\t * > {\n\t *     address: '0x1234567890123456789012345678901234567891',\n\t *     jsonInterface: [...],\n\t *     from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n\t *     gasPrice: '10000000000000',\n\t *     gas: 1000000\n\t * }\n\t *\n\t * myContract.options.from = '0x1234567890123456789012345678901234567891'; // default from address\n\t * myContract.options.gasPrice = '20000000000000'; // default gas price in wei\n\t * myContract.options.gas = 5000000; // provide as fallback always 5M gas\n\t * ```\n\t */\n\n\tpublic readonly options: ContractOptions;\n\n\t/**\n\t * Set to true if you want contracts' defaults to sync with global defaults.\n\t */\n\tpublic syncWithContext = false;\n\n\tprivate _errorsInterface!: AbiErrorFragment[];\n\tprivate _jsonInterface!: ContractAbiWithSignature;\n\tprivate _address?: Address;\n\tprivate _functions: Record<\n\t\tstring,\n\t\t{\n\t\t\tsignature: string;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\tmethod: ContractBoundMethod<any>;\n\t\t}\n\t> = {};\n\tprivate readonly _overloadedMethodAbis: Map<string, AbiFunctionFragment[]>;\n\tprivate _methods!: ContractMethodsInterface<Abi>;\n\tprivate _events!: ContractEventsInterface<Abi>;\n\t/**\n\t * Set property to `data`, `input`, or `both` to change the property of the contract being sent to the\n\t * RPC provider when using contract methods.\n\t * Default is `input`\n\t */\n\tprivate readonly _dataInputFill?: 'data' | 'input' | 'both';\n\n\tprivate context?: Web3Context;\n\t/**\n\t * Creates a new contract instance with all its methods and events defined in its {@doclink glossary/json_interface | json interface} object.\n\t *\n\t * ```ts\n\t * new web3.eth.Contract(jsonInterface[, address][, options])\n\t * ```\n\t *\n\t * @param jsonInterface - The JSON interface for the contract to instantiate.\n\t * @param address - The address of the smart contract to call.\n\t * @param options - The options of the contract. Some are used as fallbacks for calls and transactions.\n\t * @param context - The context of the contract used for customizing the behavior of the contract.\n\t * @returns - The contract instance with all its methods and events.\n\t *\n\t * ```ts title=\"Example\"\n\t * var myContract = new web3.eth.Contract([...], '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe', {\n\t *   from: '0x1234567890123456789012345678901234567891', // default from address\n\t *   gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case\n\t * });\n\t * ```\n\t *\n\t * To use the type safe interface for these contracts you have to include the ABI definitions in your Typescript project and then declare these as `const`.\n\t *\n\t * ```ts title=\"Example\"\n\t * const myContractAbi = [....] as const; // ABI definitions\n\t * const myContract = new web3.eth.Contract(myContractAbi, '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe');\n\t * ```\n\t */\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\tcontext?: Web3ContractContext | Web3Context,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress?: Address,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\toptions?: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddress: Address | undefined,\n\t\toptions: ContractInitOptions,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t);\n\tpublic constructor(\n\t\tjsonInterface: Abi,\n\t\taddressOrOptionsOrContext?:\n\t\t\t| Address\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context,\n\t\toptionsOrContextOrReturnFormat?:\n\t\t\t| ContractInitOptions\n\t\t\t| Web3ContractContext\n\t\t\t| Web3Context\n\t\t\t| DataFormat,\n\t\tcontextOrReturnFormat?: Web3ContractContext | Web3Context | DataFormat,\n\t\treturnFormat?: DataFormat,\n\t) {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst options = isContractInitOptions(addressOrOptionsOrContext)\n\t\t\t? addressOrOptionsOrContext\n\t\t\t: isContractInitOptions(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: undefined;\n\n\t\tlet contractContext;\n\t\tif (isWeb3ContractContext(addressOrOptionsOrContext)) {\n\t\t\tcontractContext = addressOrOptionsOrContext;\n\t\t} else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {\n\t\t\tcontractContext = optionsOrContextOrReturnFormat;\n\t\t} else {\n\t\t\tcontractContext = contextOrReturnFormat;\n\t\t}\n\n\t\tlet provider;\n\t\tif (\n\t\t\ttypeof addressOrOptionsOrContext === 'object' &&\n\t\t\t'provider' in addressOrOptionsOrContext\n\t\t) {\n\t\t\tprovider = addressOrOptionsOrContext.provider;\n\t\t} else if (\n\t\t\ttypeof optionsOrContextOrReturnFormat === 'object' &&\n\t\t\t'provider' in optionsOrContextOrReturnFormat\n\t\t) {\n\t\t\tprovider = optionsOrContextOrReturnFormat.provider;\n\t\t} else if (\n\t\t\ttypeof contextOrReturnFormat === 'object' &&\n\t\t\t'provider' in contextOrReturnFormat\n\t\t) {\n\t\t\tprovider = contextOrReturnFormat.provider;\n\t\t} else {\n\t\t\tprovider = Contract.givenProvider;\n\t\t}\n\n\t\tsuper({\n\t\t\t...contractContext,\n\t\t\tprovider,\n\t\t\tregisteredSubscriptions: contractSubscriptions,\n\t\t});\n\t\tif (\n\t\t\t!isNullish(options) &&\n\t\t\t!isNullish(options.data) &&\n\t\t\t!isNullish(options.input) &&\n\t\t\tthis.config.contractDataInputFill !== 'both'\n\t\t)\n\t\t\tthrow new ContractTransactionDataAndInputError({\n\t\t\t\tdata: options.data as HexString,\n\t\t\t\tinput: options.input as HexString,\n\t\t\t});\n\t\tthis._overloadedMethodAbis = new Map<string, AbiFunctionFragment[]>();\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnDataFormat = isDataFormat(contextOrReturnFormat)\n\t\t\t? contextOrReturnFormat\n\t\t\t: isDataFormat(optionsOrContextOrReturnFormat)\n\t\t\t? optionsOrContextOrReturnFormat\n\t\t\t: returnFormat ?? DEFAULT_RETURN_FORMAT;\n\n\t\tconst address =\n\t\t\ttypeof addressOrOptionsOrContext === 'string' ? addressOrOptionsOrContext : undefined;\n\n\t\tif (this.config.contractDataInputFill === 'both') {\n\t\t\tthis._dataInputFill = this.config.contractDataInputFill;\n\t\t} else {\n\t\t\tthis._dataInputFill =\n\t\t\t\t(options as ContractInitOptions)?.dataInputFill ??\n\t\t\t\tthis.config.contractDataInputFill;\n\t\t}\n\t\tthis._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n\n\t\tif (!isNullish(address)) {\n\t\t\tthis._parseAndSetAddress(address, returnDataFormat);\n\t\t}\n\n\t\tthis.options = {\n\t\t\taddress,\n\t\t\tjsonInterface: this._jsonInterface,\n\t\t\tgas: options?.gas ?? options?.gasLimit,\n\t\t\tgasPrice: options?.gasPrice,\n\t\t\tfrom: options?.from,\n\t\t\tinput: options?.input,\n\t\t\tdata: options?.data,\n\t\t};\n\n\t\tthis.syncWithContext = (options as ContractInitOptions)?.syncWithContext ?? false;\n\t\tif (contractContext instanceof Web3Context) {\n\t\t\tthis.subscribeToContextEvents(contractContext);\n\t\t}\n\t\tObject.defineProperty(this.options, 'address', {\n\t\t\tset: (value: Address) => this._parseAndSetAddress(value, returnDataFormat),\n\t\t\tget: () => this._address,\n\t\t});\n\n\t\tObject.defineProperty(this.options, 'jsonInterface', {\n\t\t\tset: (value: ContractAbi) => this._parseAndSetJsonInterface(value, returnDataFormat),\n\t\t\tget: () => this._jsonInterface,\n\t\t});\n\t}\n\n\t/**\n\t * Subscribe to an event.\n\t *\n\t * ```ts\n\t * await myContract.events.MyEvent([options])\n\t * ```\n\t *\n\t * There is a special event `allEvents` that can be used to subscribe all events.\n\t *\n\t * ```ts\n\t * await myContract.events.allEvents([options])\n\t * ```\n\t *\n\t * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n\t */\n\tpublic get events() {\n\t\treturn this._events;\n\t}\n\n\t/**\n\t * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n\t *\n\t * The methods of this smart contract are available through:\n\t *\n\t * The name: `myContract.methods.myMethod(123)`\n\t * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n\t * The signature `myContract.methods['0x58cf5f10'](123)`\n\t *\n\t * This allows calling functions with same name but different parameters from the JavaScript contract object.\n\t *\n\t * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n\t *\n\t * ```ts\n\t * // calling a method\n\t * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using a promise\n\t * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t *\n\t * // or sending and using the events\n\t * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n\t * sendObject.on('transactionHash', function(hash){\n\t *   ...\n\t * });\n\t * sendObject.on('receipt', function(receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('confirmation', function(confirmationNumber, receipt){\n\t *   ...\n\t * });\n\t * sendObject.on('error', function(error, receipt) {\n\t *   ...\n\t * });\n\t * ```\n\t *\n\t * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the {@doclink glossary/json_interface | json interface} of that contract.\n\t */\n\tpublic get methods() {\n\t\treturn this._methods;\n\t}\n\n\t/**\n\t * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n\t *\n\t * @returns - The new contract instance.\n\t *\n\t * ```ts\n\t * const contract1 = new eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n\t *\n\t * const contract2 = contract1.clone();\n\t * contract2.options.address = address2;\n\t *\n\t * (contract1.options.address !== contract2.options.address);\n\t * > true\n\t * ```\n\t */\n\tpublic clone() {\n\t\tlet newContract: Contract<any>;\n\t\tif (this.options.address) {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\tthis.options.address,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this._dataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t} else {\n\t\t\tnewContract = new Contract<Abi>(\n\t\t\t\t[...this._jsonInterface, ...this._errorsInterface] as unknown as Abi,\n\t\t\t\t{\n\t\t\t\t\tgas: this.options.gas,\n\t\t\t\t\tgasPrice: this.options.gasPrice,\n\t\t\t\t\tfrom: this.options.from,\n\t\t\t\t\tinput: this.options.input,\n\t\t\t\t\tdata: this.options.data,\n\t\t\t\t\tprovider: this.currentProvider,\n\t\t\t\t\tsyncWithContext: this.syncWithContext,\n\t\t\t\t\tdataInputFill: this._dataInputFill,\n\t\t\t\t},\n\t\t\t\tthis.getContextObject(),\n\t\t\t);\n\t\t}\n\t\tif (this.context) newContract.subscribeToContextEvents(this.context);\n\n\t\treturn newContract;\n\t}\n\n\t/**\n\t * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n\t *\n\t * ```ts\n\t * myContract.deploy({\n\t *   input: '0x12345...', // data keyword can be used, too. If input is used, data will be ignored.\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * }, function(error, transactionHash){ ... })\n\t * .on('error', function(error){ ... })\n\t * .on('transactionHash', function(transactionHash){ ... })\n\t * .on('receipt', function(receipt){\n\t *  console.log(receipt.contractAddress) // contains the new contract address\n\t * })\n\t * .on('confirmation', function(confirmationNumber, receipt){ ... })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // When the data is already set as an option to the contract itself\n\t * myContract.options.data = '0x12345...';\n\t *\n\t * myContract.deploy({\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .send({\n\t *   from: '0x1234567890123456789012345678901234567891',\n\t *   gas: 1500000,\n\t *   gasPrice: '30000000000000'\n\t * })\n\t * .then(function(newContractInstance){\n\t *   console.log(newContractInstance.options.address) // instance with the new contract address\n\t * });\n\t *\n\t *\n\t * // Simply encoding\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .encodeABI();\n\t * > '0x12345...0000012345678765432'\n\t *\n\t *\n\t * // Gas estimation\n\t * myContract.deploy({\n\t *   input: '0x12345...',\n\t *   arguments: [123, 'My String']\n\t * })\n\t * .estimateGas(function(err, gas){\n\t *   console.log(gas);\n\t * });\n\t * ```\n\t *\n\t * @returns - The transaction object\n\t */\n\tpublic deploy(deployOptions?: {\n\t\t/**\n\t\t * The byte code of the contract.\n\t\t */\n\t\tdata?: HexString;\n\t\tinput?: HexString;\n\t\t/**\n\t\t * The arguments which get passed to the constructor on deployment.\n\t\t */\n\t\targuments?: ContractConstructorArgs<Abi>;\n\t}) {\n\t\tlet abi = this._jsonInterface.find(j => j.type === 'constructor') as AbiConstructorFragment;\n\t\tif (!abi) {\n\t\t\tabi = {\n\t\t\t\ttype: 'constructor',\n\t\t\t\tinputs: [],\n\t\t\t\tstateMutability: '',\n\t\t\t} as AbiConstructorFragment;\n\t\t}\n\n\t\tconst _input = format(\n\t\t\t{ format: 'bytes' },\n\t\t\tdeployOptions?.input ?? this.options.input,\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\tconst _data = format(\n\t\t\t{ format: 'bytes' },\n\t\t\tdeployOptions?.data ?? this.options.data,\n\t\t\tDEFAULT_RETURN_FORMAT,\n\t\t);\n\n\t\tif ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {\n\t\t\tthrow new Web3ContractError('contract creation without any data provided.');\n\t\t}\n\n\t\tconst args = deployOptions?.arguments ?? [];\n\n\t\tconst contractOptions: ContractOptions = { ...this.options, input: _input, data: _data };\n\t\tconst deployData = _input ?? _data;\n\t\treturn {\n\t\t\targuments: args,\n\t\t\tsend: (\n\t\t\t\toptions?: PayableTxOptions,\n\t\t\t): Web3PromiEvent<\n\t\t\t\tContract<Abi>,\n\t\t\t\tSendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>\n\t\t\t> => {\n\t\t\t\tconst modifiedOptions = { ...options };\n\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\t\treturn this._contractMethodDeploySend(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\targs as unknown[],\n\t\t\t\t\tmodifiedOptions,\n\t\t\t\t\tcontractOptions,\n\t\t\t\t);\n\t\t\t},\n\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\toptions?: PayableCallOptions,\n\t\t\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t\t\t) => {\n\t\t\t\tconst modifiedOptions = { ...options };\n\t\t\t\treturn this._contractMethodEstimateGas({\n\t\t\t\t\tabi: abi as AbiFunctionFragment,\n\t\t\t\t\tparams: args as unknown[],\n\t\t\t\t\treturnFormat,\n\t\t\t\t\toptions: modifiedOptions,\n\t\t\t\t\tcontractOptions,\n\t\t\t\t});\n\t\t\t},\n\t\t\tencodeABI: () =>\n\t\t\t\tencodeMethodABI(\n\t\t\t\t\tabi as AbiFunctionFragment,\n\t\t\t\t\targs as unknown[],\n\t\t\t\t\tformat({ format: 'bytes' }, deployData as Bytes, DEFAULT_RETURN_FORMAT),\n\t\t\t\t),\n\t\t};\n\t}\n\n\t/**\n\t * Gets past events for this contract.\n\t *\n\t * ```ts\n\t * const events = await myContract.getPastEvents('MyEvent', {\n\t *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n\t *   fromBlock: 0,\n\t *   toBlock: 'latest'\n\t * });\n\t *\n\t * > [{\n\t *   returnValues: {\n\t *       myIndexedParam: 20,\n\t *       myOtherIndexedParam: '0x123456789...',\n\t *       myNonIndexParam: 'My String'\n\t *   },\n\t *   raw: {\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *   },\n\t *   event: 'MyEvent',\n\t *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   logIndex: 0,\n\t *   transactionIndex: 0,\n\t *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *   blockNumber: 1234,\n\t *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t * },{\n\t *   ...\n\t * }]\n\t * ```\n\t *\n\t * @param eventName - The name of the event in the contract, or `allEvents` to get all events.\n\t * @param filter - The filter options used to get events.\n\t * @param returnFormat - Return format\n\t * @returns - An array with the past event `Objects`, matching the given event name and filter.\n\t */\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\teventName: keyof ContractEvents<Abi> | 'allEvents' | 'ALLEVENTS',\n\t\tfilter: Omit<Filter, 'address'>,\n\t\treturnFormat?: ReturnFormat,\n\t): Promise<(string | EventLog)[]>;\n\tpublic async getPastEvents<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tparam1?:\n\t\t\t| keyof ContractEvents<Abi>\n\t\t\t| 'allEvents'\n\t\t\t| 'ALLEVENTS'\n\t\t\t| Omit<Filter, 'address'>\n\t\t\t| ReturnFormat,\n\t\tparam2?: Omit<Filter, 'address'> | ReturnFormat,\n\t\tparam3?: ReturnFormat,\n\t): Promise<(string | EventLog)[]> {\n\t\tconst eventName = typeof param1 === 'string' ? param1 : ALL_EVENTS;\n\n\t\tconst options =\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\ttypeof param1 !== 'string' && !isDataFormat(param1)\n\t\t\t\t? param1\n\t\t\t\t: !isDataFormat(param2)\n\t\t\t\t? param2\n\t\t\t\t: {};\n\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\tconst returnFormat = isDataFormat(param1)\n\t\t\t? param1\n\t\t\t: isDataFormat(param2)\n\t\t\t? param2\n\t\t\t: param3 ?? DEFAULT_RETURN_FORMAT;\n\n\t\tconst abi =\n\t\t\teventName === 'allEvents' || eventName === ALL_EVENTS\n\t\t\t\t? ALL_EVENTS_ABI\n\t\t\t\t: (this._jsonInterface.find(\n\t\t\t\t\t\tj => 'name' in j && j.name === eventName,\n\t\t\t\t  ) as AbiEventFragment & { signature: string });\n\n\t\tif (!abi) {\n\t\t\tthrow new Web3ContractError(`Event ${eventName} not found.`);\n\t\t}\n\n\t\tconst { fromBlock, toBlock, topics, address } = encodeEventABI(\n\t\t\tthis.options,\n\t\t\tabi,\n\t\t\toptions ?? {},\n\t\t);\n\n\t\tconst logs = await getLogs(this, { fromBlock, toBlock, topics, address }, returnFormat);\n\t\tconst decodedLogs = logs.map(log =>\n\t\t\ttypeof log === 'string'\n\t\t\t\t? log\n\t\t\t\t: decodeEventABI(abi, log as LogsInput, this._jsonInterface, returnFormat),\n\t\t);\n\n\t\tconst filter = options?.filter ?? {};\n\t\tconst filterKeys = Object.keys(filter);\n\n\t\tif (filterKeys.length > 0) {\n\t\t\treturn decodedLogs.filter(log => {\n\t\t\t\tif (typeof log === 'string') return true;\n\n\t\t\t\treturn filterKeys.every((key: string) => {\n\t\t\t\t\tif (Array.isArray(filter[key])) {\n\t\t\t\t\t\treturn (filter[key] as Numbers[]).some(\n\t\t\t\t\t\t\t(v: Numbers) =>\n\t\t\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\t\t\tString(v).toUpperCase(),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst inputAbi = abi.inputs?.filter(input => input.name === key)[0];\n\t\t\t\t\tif (inputAbi?.indexed && inputAbi.type === 'string') {\n\t\t\t\t\t\tconst hashedIndexedString = keccak256(filter[key] as string);\n\t\t\t\t\t\tif (hashedIndexedString === String(log.returnValues[key])) return true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\tString(log.returnValues[key]).toUpperCase() ===\n\t\t\t\t\t\tString(filter[key]).toUpperCase()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn decodedLogs;\n\t}\n\n\tprivate _parseAndSetAddress(value?: Address, returnFormat: DataFormat = DEFAULT_RETURN_FORMAT) {\n\t\tthis._address = value\n\t\t\t? toChecksumAddress(format({ format: 'address' }, value, returnFormat))\n\t\t\t: value;\n\t}\n\n\tprivate _parseAndSetJsonInterface(\n\t\tabis: ContractAbi,\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t) {\n\t\tthis._functions = {};\n\t\tthis._methods = {} as ContractMethodsInterface<Abi>;\n\t\tthis._events = {} as ContractEventsInterface<Abi>;\n\n\t\tlet result: ContractAbi = [];\n\n\t\tconst functionsAbi = abis.filter(abi => abi.type !== 'error');\n\t\tconst errorsAbi = abis.filter(abi =>\n\t\t\tisAbiErrorFragment(abi),\n\t\t) as unknown as AbiErrorFragment[];\n\n\t\tfor (const a of functionsAbi) {\n\t\t\tconst abi: Mutable<AbiFragment & { signature: HexString }> = {\n\t\t\t\t...a,\n\t\t\t\tsignature: '',\n\t\t\t};\n\n\t\t\tif (isAbiFunctionFragment(abi)) {\n\t\t\t\tconst methodName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst methodSignature = encodeFunctionSignature(methodName);\n\t\t\t\tabi.signature = methodSignature;\n\n\t\t\t\t// make constant and payable backwards compatible\n\t\t\t\tabi.constant =\n\t\t\t\t\tabi.stateMutability === 'view' ??\n\t\t\t\t\tabi.stateMutability === 'pure' ??\n\t\t\t\t\tabi.constant;\n\n\t\t\t\tabi.payable = abi.stateMutability === 'payable' ?? abi.payable;\n\t\t\t\tthis._overloadedMethodAbis.set(abi.name, [\n\t\t\t\t\t...(this._overloadedMethodAbis.get(abi.name) ?? []),\n\t\t\t\t\tabi,\n\t\t\t\t]);\n\t\t\t\tconst abiFragment = this._overloadedMethodAbis.get(abi.name) ?? [];\n\t\t\t\tconst contractMethod = this._createContractMethod<\n\t\t\t\t\ttypeof abiFragment,\n\t\t\t\t\tAbiErrorFragment\n\t\t\t\t>(abiFragment, errorsAbi);\n\n\t\t\t\tthis._functions[methodName] = {\n\t\t\t\t\tsignature: methodSignature,\n\t\t\t\t\tmethod: contractMethod,\n\t\t\t\t};\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[abi.name as keyof ContractMethodsInterface<Abi>] = this._functions[\n\t\t\t\t\tmethodName\n\t\t\t\t].method as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodName as keyof ContractMethodsInterface<Abi>] = this._functions[\n\t\t\t\t\tmethodName\n\t\t\t\t].method as never;\n\n\t\t\t\t// We don't know a particular type of the Abi method so can't type check\n\t\t\t\tthis._methods[methodSignature as keyof ContractMethodsInterface<Abi>] = this\n\t\t\t\t\t._functions[methodName].method as never;\n\t\t\t} else if (isAbiEventFragment(abi)) {\n\t\t\t\tconst eventName = jsonInterfaceMethodToString(abi);\n\t\t\t\tconst eventSignature = encodeEventSignature(eventName);\n\t\t\t\tconst event = this._createContractEvent(abi, returnFormat);\n\t\t\t\tabi.signature = eventSignature;\n\n\t\t\t\tif (!(eventName in this._events) || abi.name === 'bound') {\n\t\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\t\tthis._events[eventName as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t}\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[abi.name as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t\t// It's a private type and we don't want to expose it and no need to check\n\t\t\t\tthis._events[eventSignature as keyof ContractEventsInterface<Abi>] = event as never;\n\t\t\t}\n\n\t\t\tresult = [...result, abi];\n\t\t}\n\n\t\tthis._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);\n\t\tthis._jsonInterface = [...result] as unknown as ContractAbiWithSignature;\n\t\tthis._errorsInterface = errorsAbi;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _getAbiParams(abi: AbiFunctionFragment, params: unknown[]): Array<unknown> {\n\t\ttry {\n\t\t\treturn validatorUtils.transformJsonDataToAbiFormat(abi.inputs ?? [], params);\n\t\t} catch (error) {\n\t\t\tthrow new Web3ContractError(\n\t\t\t\t`Invalid parameters for method ${abi.name}: ${(error as Error).message}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _createContractMethod<T extends AbiFunctionFragment[], E extends AbiErrorFragment>(\n\t\tabiArr: T,\n\t\terrorsAbis: E[],\n\t): ContractBoundMethod<T[0]> {\n\t\tconst abi = abiArr[abiArr.length - 1];\n\t\treturn (...params: unknown[]) => {\n\t\t\tlet abiParams!: Array<unknown>;\n\t\t\tconst abis = this._overloadedMethodAbis.get(abi.name) ?? [];\n\t\t\tlet methodAbi: AbiFunctionFragment = abis[0];\n\t\t\tconst internalErrorsAbis = errorsAbis;\n\n\t\t\tconst arrayOfAbis: AbiFunctionFragment[] = abis.filter(\n\t\t\t\t_abi => (_abi.inputs ?? []).length === params.length,\n\t\t\t);\n\n\t\t\tif (abis.length === 1 || arrayOfAbis.length === 0) {\n\t\t\t\tabiParams = this._getAbiParams(methodAbi, params);\n\t\t\t\tvalidator.validate(abi.inputs ?? [], abiParams);\n\t\t\t} else {\n\t\t\t\tconst errors: Web3ValidationErrorObject[] = [];\n\n\t\t\t\tfor (const _abi of arrayOfAbis) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tabiParams = this._getAbiParams(_abi, params);\n\t\t\t\t\t\tvalidator.validate(\n\t\t\t\t\t\t\t_abi.inputs as unknown as ValidationSchemaInput,\n\t\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmethodAbi = _abi;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\terrors.push(e as Web3ValidationErrorObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (errors.length === arrayOfAbis.length) {\n\t\t\t\t\tthrow new Web3ValidatorError(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst methods = {\n\t\t\t\targuments: abiParams,\n\n\t\t\t\tcall: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCall(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\n\t\t\t\tsend: (options?: PayableTxOptions | NonPayableTxOptions) =>\n\t\t\t\t\tthis._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n\n\t\t\t\testimateGas: async <ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodEstimateGas({\n\t\t\t\t\t\tabi: methodAbi,\n\t\t\t\t\t\tparams: abiParams,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t}),\n\n\t\t\t\tencodeABI: () => encodeMethodABI(methodAbi, abiParams),\n\n\t\t\t\tcreateAccessList: async (\n\t\t\t\t\toptions?: PayableCallOptions | NonPayableCallOptions,\n\t\t\t\t\tblock?: BlockNumberOrTag,\n\t\t\t\t) =>\n\t\t\t\t\tthis._contractMethodCreateAccessList(\n\t\t\t\t\t\tmethodAbi,\n\t\t\t\t\t\tabiParams,\n\t\t\t\t\t\tinternalErrorsAbis,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tblock,\n\t\t\t\t\t),\n\t\t\t};\n\n\t\t\tif (methodAbi.stateMutability === 'payable') {\n\t\t\t\treturn methods as PayableMethodObject<\n\t\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t\t>;\n\t\t\t}\n\t\t\treturn methods as NonPayableMethodObject<\n\t\t\t\tContractOverloadedMethodInputs<T>,\n\t\t\t\tContractOverloadedMethodOutputs<T>\n\t\t\t>;\n\t\t};\n\t}\n\n\tprivate async _contractMethodCall<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getEthTxCallParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\tdataInputFill: this._dataInputFill,\n\t\t\t},\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\t\ttry {\n\t\t\tconst result = await call(this, tx, block, DEFAULT_RETURN_FORMAT);\n\t\t\treturn decodeMethodReturn(abi, result);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.innerError);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _contractMethodCreateAccessList<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tblock?: BlockNumberOrTag,\n\t) {\n\t\tconst tx = getCreateAccessListParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: {\n\t\t\t\t...this.options,\n\t\t\t\tfrom: this.options.from ?? this.config.defaultAccount,\n\t\t\t},\n\t\t});\n\n\t\ttry {\n\t\t\treturn createAccessList(this, tx, block, DEFAULT_RETURN_FORMAT);\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.innerError);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate _contractMethodSend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\terrorsAbi: AbiErrorFragment[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tinput: undefined,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\t\tconst transactionToSend = sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n\t\t\t// TODO Should make this configurable by the user\n\t\t\tcheckRevertBeforeSending: false,\n\t\t\tcontractAbi: this._jsonInterface,\n\t\t});\n\n\t\t// eslint-disable-next-line no-void\n\t\tvoid transactionToSend.on('error', (error: unknown) => {\n\t\t\tif (error instanceof ContractExecutionError) {\n\t\t\t\t// this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n\t\t\t\tdecodeContractErrorData(errorsAbi, error.innerError);\n\t\t\t}\n\t\t});\n\t\treturn transactionToSend;\n\t}\n\n\tprivate _contractMethodDeploySend<Options extends PayableCallOptions | NonPayableCallOptions>(\n\t\tabi: AbiFunctionFragment,\n\t\tparams: unknown[],\n\t\toptions?: Options,\n\t\tcontractOptions?: ContractOptions,\n\t) {\n\t\tlet modifiedContractOptions = contractOptions ?? this.options;\n\t\tmodifiedContractOptions = {\n\t\t\t...modifiedContractOptions,\n\t\t\tfrom: modifiedContractOptions.from ?? this.defaultAccount ?? undefined,\n\t\t};\n\t\tconst tx = getSendTxParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: modifiedContractOptions,\n\t\t});\n\t\treturn sendTransaction(this, tx, DEFAULT_RETURN_FORMAT, {\n\t\t\ttransactionResolver: receipt => {\n\t\t\t\tif (receipt.status === BigInt(0)) {\n\t\t\t\t\tthrow new Web3ContractError(\"code couldn't be stored\", receipt);\n\t\t\t\t}\n\n\t\t\t\tconst newContract = this.clone();\n\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tnewContract.options.address = receipt.contractAddress;\n\t\t\t\treturn newContract;\n\t\t\t},\n\t\t\tcontractAbi: this._jsonInterface,\n\t\t\t// TODO Should make this configurable by the user\n\t\t\tcheckRevertBeforeSending: false,\n\t\t});\n\t}\n\n\tprivate async _contractMethodEstimateGas<\n\t\tOptions extends PayableCallOptions | NonPayableCallOptions,\n\t\tReturnFormat extends DataFormat,\n\t>({\n\t\tabi,\n\t\tparams,\n\t\treturnFormat,\n\t\toptions,\n\t\tcontractOptions,\n\t}: {\n\t\tabi: AbiFunctionFragment;\n\t\tparams: unknown[];\n\t\treturnFormat: ReturnFormat;\n\t\toptions?: Options;\n\t\tcontractOptions?: ContractOptions;\n\t}) {\n\t\tconst tx = getEstimateGasParams({\n\t\t\tabi,\n\t\t\tparams,\n\t\t\toptions: { ...options, dataInputFill: this.config.contractDataInputFill },\n\t\t\tcontractOptions: contractOptions ?? this.options,\n\t\t});\n\t\treturn estimateGas(this, tx, BlockTags.LATEST, returnFormat);\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _createContractEvent(\n\t\tabi: AbiEventFragment & { signature: HexString },\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t): ContractBoundEvent {\n\t\treturn (...params: unknown[]) => {\n\t\t\tconst { topics, fromBlock } = encodeEventABI(\n\t\t\t\tthis.options,\n\t\t\t\tabi,\n\t\t\t\tparams[0] as EventParameters,\n\t\t\t);\n\t\t\tconst sub = new LogsSubscription(\n\t\t\t\t{\n\t\t\t\t\taddress: this.options.address,\n\t\t\t\t\ttopics,\n\t\t\t\t\tabi,\n\t\t\t\t\tjsonInterface: this._jsonInterface,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tsubscriptionManager: this.subscriptionManager as Web3SubscriptionManager<\n\t\t\t\t\t\tunknown,\n\t\t\t\t\t\tany\n\t\t\t\t\t>,\n\t\t\t\t\treturnFormat,\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!isNullish(fromBlock)) {\n\t\t\t\t// emit past events when fromBlock is defined\n\t\t\t\tthis.getPastEvents(abi.name, { fromBlock, topics }, returnFormat)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tlogs.forEach(log => sub.emit('data', log as EventLog));\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error: Error) => {\n\t\t\t\t\t\tsub.emit(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\tnew SubscriptionError('Failed to get past events.', error),\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tthis.subscriptionManager?.addSubscription(sub).catch((error: Error) => {\n\t\t\t\tsub.emit('error', new SubscriptionError('Failed to subscribe.', error));\n\t\t\t});\n\n\t\t\treturn sub;\n\t\t};\n\t}\n\n\tprotected subscribeToContextEvents<T extends Web3Context>(context: T): void {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst contractThis = this;\n\t\tthis.context = context;\n\n\t\tif (contractThis.syncWithContext) {\n\t\t\tcontext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n\t\t\t\tcontractThis.setConfig({ [event.name]: event.newValue });\n\t\t\t});\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}