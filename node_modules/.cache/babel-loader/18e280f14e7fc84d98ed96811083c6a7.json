{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBatchRequest = exports.toBatchPayload = exports.toPayload = exports.setRequestIdStart = exports.isBatchResponse = exports.isValidResponse = exports.validateResponse = exports.isSubscriptionResult = exports.isResponseWithNotification = exports.isResponseWithError = exports.isResponseWithResult = exports.isResponseRpcError = void 0;\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst uuid_js_1 = require(\"./uuid.js\"); // check if code is a valid rpc server error code\n\n\nconst isResponseRpcError = rpcError => {\n  const errorCode = rpcError.error.code;\n  return web3_errors_1.rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32000;\n};\n\nexports.isResponseRpcError = isResponseRpcError;\n\nconst isResponseWithResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && // JSON RPC consider \"null\" as valid response\n'result' in response && (0, web3_validator_1.isNullish)(response.error) && (typeof response.id === 'number' || typeof response.id === 'string');\n\nexports.isResponseWithResult = isResponseWithResult; // To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\n\nconst isResponseWithError = response => !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && (0, web3_validator_1.isNullish)(response.result) && // JSON RPC consider \"null\" as valid response\n'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\n\nexports.isResponseWithError = isResponseWithError;\n\nconst isResponseWithNotification = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && !(0, web3_validator_1.isNullish)(response.params) && !(0, web3_validator_1.isNullish)(response.method);\n\nexports.isResponseWithNotification = isResponseWithNotification;\n\nconst isSubscriptionResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && 'id' in response && // JSON RPC consider \"null\" as valid response\n'result' in response;\n\nexports.isSubscriptionResult = isSubscriptionResult;\n\nconst validateResponse = response => (0, exports.isResponseWithResult)(response) || (0, exports.isResponseWithError)(response);\n\nexports.validateResponse = validateResponse;\n\nconst isValidResponse = response => Array.isArray(response) ? response.every(exports.validateResponse) : (0, exports.validateResponse)(response);\n\nexports.isValidResponse = isValidResponse;\n\nconst isBatchResponse = response => Array.isArray(response) && response.length > 0 && (0, exports.isValidResponse)(response);\n\nexports.isBatchResponse = isBatchResponse; // internal optional variable to increment and use for the jsonrpc `id`\n\nlet requestIdSeed;\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\n\nconst setRequestIdStart = start => {\n  requestIdSeed = start;\n};\n\nexports.setRequestIdStart = setRequestIdStart;\n\nconst toPayload = request => {\n  var _a, _b, _c, _d;\n\n  if (typeof requestIdSeed !== 'undefined') {\n    requestIdSeed += 1;\n  }\n\n  return {\n    jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : '2.0',\n    id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : (0, uuid_js_1.uuidV4)(),\n    method: request.method,\n    params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined\n  };\n};\n\nexports.toPayload = toPayload;\n\nconst toBatchPayload = requests => requests.map(request => (0, exports.toPayload)(request));\n\nexports.toBatchPayload = toBatchPayload;\n\nconst isBatchRequest = request => Array.isArray(request) && request.length > 0;\n\nexports.isBatchRequest = isBatchRequest;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAaA;;AACA,uC,CAEA;;;AACO,MAAMA,kBAAkB,GAAIC,QAAD,IAAuC;EACxE,MAAMC,SAAS,GAAGD,QAAQ,CAACE,KAAT,CAAeC,IAAjC;EACA,OAAOC,2BAAaC,GAAb,CAAiBJ,SAAjB,KAAgCA,SAAS,IAAI,CAAC,KAAd,IAAuBA,SAAS,IAAI,CAAC,KAA5E;AACA,CAHM;;AAAMK,6BAAkBP,kBAAlB;;AAKN,MAAMQ,oBAAoB,GAChCC,QADmC,IAGnC,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,IACA,CAAC,CAACA,QADF,IAEAA,QAAQ,CAACG,OAAT,KAAqB,KAFrB,IAGA;AACA,YAAYH,QAJZ,IAKA,gCAAUA,QAAQ,CAACN,KAAnB,CALA,KAMC,OAAOM,QAAQ,CAACI,EAAhB,KAAuB,QAAvB,IAAmC,OAAOJ,QAAQ,CAACI,EAAhB,KAAuB,QAN3D,CAHM;;AAAMN,+BAAoBC,oBAApB,C,CAWb;;AACO,MAAMM,mBAAmB,GAC/BL,QADkC,IAGlC,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,IACAA,QAAQ,CAACG,OAAT,KAAqB,KADrB,IAEA,CAAC,CAACH,QAFF,IAGA,gCAAUA,QAAQ,CAACM,MAAnB,CAHA,IAIA;AACA,WAAWN,QALX,KAMC,OAAOA,QAAQ,CAACI,EAAhB,KAAuB,QAAvB,IAAmC,OAAOJ,QAAQ,CAACI,EAAhB,KAAuB,QAN3D,CAHM;;AAAMN,8BAAmBO,mBAAnB;;AAWN,MAAME,0BAA0B,GACtCP,QADyC,IAGzC,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,IACA,CAAC,CAACA,QADF,IAEAA,QAAQ,CAACG,OAAT,KAAqB,KAFrB,IAGA,CAAC,gCAAUH,QAAQ,CAACQ,MAAnB,CAHD,IAIA,CAAC,gCAAUR,QAAQ,CAACS,MAAnB,CAPK;;AAAMX,qCAA0BS,0BAA1B;;AASN,MAAMG,oBAAoB,GAChCV,QADmC,IAGnC,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAD,IACA,CAAC,CAACA,QADF,IAEAA,QAAQ,CAACG,OAAT,KAAqB,KAFrB,IAGA,QAAQH,QAHR,IAIA;AACA,YAAYA,QARN;;AAAMF,+BAAoBY,oBAApB;;AAUN,MAAMC,gBAAgB,GAC5BX,QAD+B,IAElB,kCAA6BA,QAA7B,KAA0C,iCAA2BA,QAA3B,CAFjD;;AAAMF,2BAAgBa,gBAAhB;;AAIN,MAAMC,eAAe,GAC3BZ,QAD8B,IAG9BC,KAAK,CAACC,OAAN,CAAcF,QAAd,IAA0BA,QAAQ,CAACa,KAAT,CAAef,wBAAf,CAA1B,GAA6D,8BAAiBE,QAAjB,CAHvD;;AAAMF,0BAAec,eAAf;;AAKN,MAAME,eAAe,GAC3Bd,QAD8B,IAG9BC,KAAK,CAACC,OAAN,CAAcF,QAAd,KAA2BA,QAAQ,CAACe,MAAT,GAAkB,CAA7C,IAAkD,6BAAgBf,QAAhB,CAH5C;;AAAMF,0BAAegB,eAAf,C,CAKb;;AACA,IAAIE,aAAJ;AAEA;;;;;;;;;AAQO,MAAMC,iBAAiB,GAAIC,KAAD,IAA8B;EAC9DF,aAAa,GAAGE,KAAhB;AACA,CAFM;;AAAMpB,4BAAiBmB,iBAAjB;;AAIN,MAAME,SAAS,GACrBC,OADwB,IAEM;;;EAC9B,IAAI,OAAOJ,aAAP,KAAyB,WAA7B,EAA0C;IACzCA,aAAa,IAAI,CAAjB;EACA;;EACD,OAAO;IACNb,OAAO,EAAE,aAAO,CAACA,OAAR,MAAe,IAAf,IAAekB,aAAf,GAAeA,EAAf,GAAmB,KADtB;IAENjB,EAAE,EAAE,mBAAO,CAACA,EAAR,MAAU,IAAV,IAAUkB,aAAV,GAAUA,EAAV,GAAcN,aAAd,MAA2B,IAA3B,IAA2BO,aAA3B,GAA2BA,EAA3B,GAA+B,uBAF7B;IAGNd,MAAM,EAAEW,OAAO,CAACX,MAHV;IAIND,MAAM,EAAE,aAAO,CAACA,MAAR,MAAc,IAAd,IAAcgB,aAAd,GAAcA,EAAd,GAAkBC;EAJpB,CAAP;AAMA,CAZM;;AAAM3B,oBAASqB,SAAT;;AAcN,MAAMO,cAAc,GAAIC,QAAD,IAC7BA,QAAQ,CAACC,GAAT,CAAaR,OAAO,IAAI,uBAAmBA,OAAnB,CAAxB,CADM;;AAAMtB,yBAAc4B,cAAd;;AAGN,MAAMG,cAAc,GAC1BT,OAD6B,IAEOnB,KAAK,CAACC,OAAN,CAAckB,OAAd,KAA0BA,OAAO,CAACL,MAAR,GAAiB,CAFzE;;AAAMjB,yBAAc+B,cAAd","names":["isResponseRpcError","rpcError","errorCode","error","code","web3_errors_1","has","exports","isResponseWithResult","response","Array","isArray","jsonrpc","id","isResponseWithError","result","isResponseWithNotification","params","method","isSubscriptionResult","validateResponse","isValidResponse","every","isBatchResponse","length","requestIdSeed","setRequestIdStart","start","toPayload","request","_a","_b","_c","_d","undefined","toBatchPayload","requests","map","isBatchRequest"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/json_rpc.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\nimport {\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tJsonRpcOptionalRequest,\n\tJsonRpcBatchRequest,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcSubscriptionResult,\n} from 'web3-types';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js';\n\n// check if code is a valid rpc server error code\nexport const isResponseRpcError = (rpcError: JsonRpcResponseWithError) => {\n\tconst errorCode = rpcError.error.code;\n\treturn rpcErrorsMap.has(errorCode) || (errorCode >= -32099 && errorCode <= -32000);\n};\n\nexport const isResponseWithResult = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithResult<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response &&\n\tisNullish(response.error) &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nexport const isResponseWithError = <Error = unknown, Result = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithError<Error> =>\n\t!Array.isArray(response) &&\n\tresponse.jsonrpc === '2.0' &&\n\t!!response &&\n\tisNullish(response.result) &&\n\t// JSON RPC consider \"null\" as valid response\n\t'error' in response &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\nexport const isResponseWithNotification = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcNotification<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t!isNullish(response.params) &&\n\t!isNullish(response.method);\n\nexport const isSubscriptionResult = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcSubscriptionResult =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t'id' in response &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response;\n\nexport const validateResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean => isResponseWithResult<Result>(response) || isResponseWithError<Error>(response);\n\nexport const isValidResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean =>\n\tArray.isArray(response) ? response.every(validateResponse) : validateResponse(response);\n\nexport const isBatchResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcBatchResponse<Result, Error> =>\n\tArray.isArray(response) && response.length > 0 && isValidResponse(response);\n\n// internal optional variable to increment and use for the jsonrpc `id`\nlet requestIdSeed: number | undefined;\n\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nexport const setRequestIdStart = (start: number | undefined) => {\n\trequestIdSeed = start;\n};\n\nexport const toPayload = <ParamType = unknown[]>(\n\trequest: JsonRpcOptionalRequest<ParamType>,\n): JsonRpcPayload<ParamType> => {\n\tif (typeof requestIdSeed !== 'undefined') {\n\t\trequestIdSeed += 1;\n\t}\n\treturn {\n\t\tjsonrpc: request.jsonrpc ?? '2.0',\n\t\tid: request.id ?? requestIdSeed ?? uuidV4(),\n\t\tmethod: request.method,\n\t\tparams: request.params ?? undefined,\n\t};\n};\n\nexport const toBatchPayload = (requests: JsonRpcOptionalRequest<unknown>[]): JsonRpcBatchRequest =>\n\trequests.map(request => toPayload<unknown>(request)) as JsonRpcBatchRequest;\n\nexport const isBatchRequest = (\n\trequest: JsonRpcBatchRequest | JsonRpcRequest<unknown> | JsonRpcOptionalRequest<unknown>,\n): request is JsonRpcBatchRequest => Array.isArray(request) && request.length > 0;\n"]},"metadata":{},"sourceType":"script"}