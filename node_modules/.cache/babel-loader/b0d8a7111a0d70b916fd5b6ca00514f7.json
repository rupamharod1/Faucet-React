{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBytes = exports.encodeBytes = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst utils_js_1 = require(\"../utils.js\");\n\nconst number_js_1 = require(\"./number.js\");\n\nconst MAX_STATIC_BYTES_COUNT = 32;\n\nfunction encodeBytes(param, input) {\n  // hack for odd length hex strings\n  if (typeof input === 'string' && input.length % 2 !== 0) {\n    // eslint-disable-next-line no-param-reassign\n    input += '0';\n  }\n\n  if (!(0, web3_validator_1.isBytes)(input)) {\n    throw new web3_errors_1.AbiError('provided input is not valid bytes value', {\n      type: param.type,\n      value: input,\n      name: param.name\n    });\n  }\n\n  const bytes = (0, web3_utils_1.bytesToUint8Array)(input);\n  const [, size] = param.type.split('bytes'); // fixed size\n\n  if (size) {\n    if (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) {\n      throw new web3_errors_1.AbiError('invalid bytes type. Static byte type can have between 1 and 32 bytes', {\n        type: param.type\n      });\n    }\n\n    if (Number(size) < bytes.length) {\n      throw new web3_errors_1.AbiError('provided input size is different than type size', {\n        type: param.type,\n        value: input,\n        name: param.name\n      });\n    }\n\n    const encoded = (0, utils_js_1.alloc)(utils_js_1.WORD_SIZE);\n    encoded.set(bytes);\n    return {\n      dynamic: false,\n      encoded\n    };\n  }\n\n  const partsLength = Math.ceil(bytes.length / utils_js_1.WORD_SIZE); // one word for length of data + WORD for each part of actual data\n\n  const encoded = (0, utils_js_1.alloc)(utils_js_1.WORD_SIZE + partsLength * utils_js_1.WORD_SIZE);\n  encoded.set((0, number_js_1.encodeNumber)({\n    type: 'uint32',\n    name: ''\n  }, bytes.length).encoded);\n  encoded.set(bytes, utils_js_1.WORD_SIZE);\n  return {\n    dynamic: true,\n    encoded\n  };\n}\n\nexports.encodeBytes = encodeBytes;\n\nfunction decodeBytes(param, bytes) {\n  const [, sizeString] = param.type.split('bytes');\n  let size = Number(sizeString);\n  let remainingBytes = bytes;\n  let partsCount = 1;\n  let consumed = 0;\n\n  if (!size) {\n    // dynamic bytes\n    const result = (0, number_js_1.decodeNumber)({\n      type: 'uint32',\n      name: ''\n    }, remainingBytes);\n    size = Number(result.result);\n    consumed += result.consumed;\n    remainingBytes = result.encoded;\n    partsCount = Math.ceil(size / utils_js_1.WORD_SIZE);\n  }\n\n  if (size > bytes.length) {\n    throw new web3_errors_1.AbiError('there is not enough data to decode', {\n      type: param.type,\n      encoded: bytes,\n      size\n    });\n  }\n\n  return {\n    result: (0, web3_utils_1.bytesToHex)(remainingBytes.subarray(0, size)),\n    encoded: remainingBytes.subarray(partsCount * utils_js_1.WORD_SIZE),\n    consumed: consumed + partsCount * utils_js_1.WORD_SIZE\n  };\n}\n\nexports.decodeBytes = decodeBytes;","map":{"version":3,"mappings":"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","names":["MAX_STATIC_BYTES_COUNT","encodeBytes","param","input","length","web3_errors_1","type","value","name","bytes","size","split","Number","encoded","utils_js_1","set","dynamic","partsLength","Math","ceil","exports","decodeBytes","sizeString","remainingBytes","partsCount","consumed","result","subarray"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/coders/base/bytes.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { AbiParameter, Bytes } from 'web3-types';\nimport { bytesToHex, bytesToUint8Array } from 'web3-utils';\nimport { isBytes, ValidInputTypes } from 'web3-validator';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { alloc, WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\n\nconst MAX_STATIC_BYTES_COUNT = 32;\n\nexport function encodeBytes(param: AbiParameter, input: unknown): EncoderResult {\n\t// hack for odd length hex strings\n\tif (typeof input === 'string' && input.length % 2 !== 0) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tinput += '0';\n\t}\n\tif (!isBytes(input as ValidInputTypes)) {\n\t\tthrow new AbiError('provided input is not valid bytes value', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t});\n\t}\n\tconst bytes = bytesToUint8Array(input as Bytes);\n\tconst [, size] = param.type.split('bytes');\n\t// fixed size\n\tif (size) {\n\t\tif (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) {\n\t\t\tthrow new AbiError(\n\t\t\t\t'invalid bytes type. Static byte type can have between 1 and 32 bytes',\n\t\t\t\t{\n\t\t\t\t\ttype: param.type,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tif (Number(size) < bytes.length) {\n\t\t\tthrow new AbiError('provided input size is different than type size', {\n\t\t\t\ttype: param.type,\n\t\t\t\tvalue: input,\n\t\t\t\tname: param.name,\n\t\t\t});\n\t\t}\n\t\tconst encoded = alloc(WORD_SIZE);\n\t\tencoded.set(bytes);\n\t\treturn {\n\t\t\tdynamic: false,\n\t\t\tencoded,\n\t\t};\n\t}\n\n\tconst partsLength = Math.ceil(bytes.length / WORD_SIZE);\n\t// one word for length of data + WORD for each part of actual data\n\tconst encoded = alloc(WORD_SIZE + partsLength * WORD_SIZE);\n\n\tencoded.set(encodeNumber({ type: 'uint32', name: '' }, bytes.length).encoded);\n\tencoded.set(bytes, WORD_SIZE);\n\treturn {\n\t\tdynamic: true,\n\t\tencoded,\n\t};\n}\n\nexport function decodeBytes(param: AbiParameter, bytes: Uint8Array): DecoderResult<string> {\n\tconst [, sizeString] = param.type.split('bytes');\n\tlet size = Number(sizeString);\n\tlet remainingBytes = bytes;\n\tlet partsCount = 1;\n\tlet consumed = 0;\n\tif (!size) {\n\t\t// dynamic bytes\n\t\tconst result = decodeNumber({ type: 'uint32', name: '' }, remainingBytes);\n\t\tsize = Number(result.result);\n\t\tconsumed += result.consumed;\n\t\tremainingBytes = result.encoded;\n\t\tpartsCount = Math.ceil(size / WORD_SIZE);\n\t}\n\tif (size > bytes.length) {\n\t\tthrow new AbiError('there is not enough data to decode', {\n\t\t\ttype: param.type,\n\t\t\tencoded: bytes,\n\t\t\tsize,\n\t\t});\n\t}\n\n\treturn {\n\t\tresult: bytesToHex(remainingBytes.subarray(0, size)),\n\t\tencoded: remainingBytes.subarray(partsCount * WORD_SIZE),\n\t\tconsumed: consumed + partsCount * WORD_SIZE,\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}