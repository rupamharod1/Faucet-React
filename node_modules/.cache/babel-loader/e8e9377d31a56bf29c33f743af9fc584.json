{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { mergeDeep, format, bytesToHex, toHex } from 'web3-utils';\nimport { TransactionDataAndInputError } from 'web3-errors';\nimport { transactionInfoSchema } from '../schemas.js';\nexport function formatTransaction(transaction) {\n  let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    transactionSchema: transactionInfoSchema,\n    fillInputAndData: false\n  };\n\n  var _a, _b;\n\n  let formattedTransaction = mergeDeep({}, transaction);\n\n  if (!isNullish(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {\n    formattedTransaction.common = Object.assign({}, transaction.common);\n    if (!isNullish((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain)) formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);\n  }\n\n  formattedTransaction = format((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : transactionInfoSchema, formattedTransaction, returnFormat);\n  if (!isNullish(formattedTransaction.data) && !isNullish(formattedTransaction.input) && // Converting toHex is accounting for data and input being Uint8Arrays\n  // since comparing Uint8Array is not as straightforward as comparing strings\n  toHex(formattedTransaction.data) !== toHex(formattedTransaction.input)) throw new TransactionDataAndInputError({\n    data: bytesToHex(formattedTransaction.data),\n    input: bytesToHex(formattedTransaction.input)\n  });\n\n  if (options.fillInputAndData) {\n    if (!isNullish(formattedTransaction.data)) {\n      formattedTransaction.input = formattedTransaction.data;\n    } else if (!isNullish(formattedTransaction.input)) {\n      formattedTransaction.data = formattedTransaction.input;\n    }\n  }\n\n  if (!isNullish(formattedTransaction.gasLimit)) {\n    formattedTransaction.gas = formattedTransaction.gasLimit;\n    delete formattedTransaction.gasLimit;\n  }\n\n  return formattedTransaction;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,qBAAlC,QAA2E,YAA3E;AACA,SAASC,SAAT,QAAiD,gBAAjD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,EAAwCC,KAAxC,QAAqD,YAArD;AACA,SAASC,4BAAT,QAA6C,aAA7C;AAEA,SAASC,qBAAT,QAAyD,eAAzD;AAEA,OAAM,SAAUC,iBAAV,CAILC,WAJK,EAYJ;EAAA,IAPDC,YAOC,uEAP4BV,qBAO5B;EAAA,IANDW,OAMC,uEAHG;IACHC,iBAAiB,EAAEL,qBADhB;IAEHM,gBAAgB,EAAE;EAFf,CAGH;;;;EAED,IAAIC,oBAAoB,GAAGZ,SAAS,CAAC,EAAD,EAAKO,WAAL,CAApC;;EACA,IAAI,CAACR,SAAS,CAACQ,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEM,MAAd,CAAd,EAAqC;IACpCD,oBAAoB,CAACC,MAArB,GAA2BC,kBAAQP,WAAW,CAACM,MAApB,CAA3B;IACA,IAAI,CAACd,SAAS,CAAC,iBAAW,CAACc,MAAZ,MAAkB,IAAlB,IAAkBE,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEC,WAArB,CAAd,EACCJ,oBAAoB,CAACC,MAArB,CAA4BG,WAA5B,GAAuCF,kBAAQP,WAAW,CAACM,MAAZ,CAAmBG,WAA3B,CAAvC;EACD;;EACDJ,oBAAoB,GAAGX,MAAM,CAC5B,aAAO,CAACS,iBAAR,MAAyB,IAAzB,IAAyBO,aAAzB,GAAyBA,EAAzB,GAA6BZ,qBADD,EAE5BO,oBAF4B,EAG5BJ,YAH4B,CAA7B;EAKA,IACC,CAACT,SAAS,CAACa,oBAAoB,CAACM,IAAtB,CAAV,IACA,CAACnB,SAAS,CAACa,oBAAoB,CAACO,KAAtB,CADV,IAEA;EACA;EACAhB,KAAK,CAACS,oBAAoB,CAACM,IAAtB,CAAL,KAAqCf,KAAK,CAACS,oBAAoB,CAACO,KAAtB,CAL3C,EAOC,MAAM,IAAIf,4BAAJ,CAAiC;IACtCc,IAAI,EAAEhB,UAAU,CAACU,oBAAoB,CAACM,IAAtB,CADsB;IAEtCC,KAAK,EAAEjB,UAAU,CAACU,oBAAoB,CAACO,KAAtB;EAFqB,CAAjC,CAAN;;EAKD,IAAIV,OAAO,CAACE,gBAAZ,EAA8B;IAC7B,IAAI,CAACZ,SAAS,CAACa,oBAAoB,CAACM,IAAtB,CAAd,EAA2C;MAC1CN,oBAAoB,CAACO,KAArB,GAA6BP,oBAAoB,CAACM,IAAlD;IACA,CAFD,MAEO,IAAI,CAACnB,SAAS,CAACa,oBAAoB,CAACO,KAAtB,CAAd,EAA4C;MAClDP,oBAAoB,CAACM,IAArB,GAA4BN,oBAAoB,CAACO,KAAjD;IACA;EACD;;EAED,IAAI,CAACpB,SAAS,CAACa,oBAAoB,CAACQ,QAAtB,CAAd,EAA+C;IAC9CR,oBAAoB,CAACS,GAArB,GAA2BT,oBAAoB,CAACQ,QAAhD;IACA,OAAOR,oBAAoB,CAACQ,QAA5B;EACA;;EAED,OAAOR,oBAAP;AACA","names":["DEFAULT_RETURN_FORMAT","isNullish","mergeDeep","format","bytesToHex","toHex","TransactionDataAndInputError","transactionInfoSchema","formatTransaction","transaction","returnFormat","options","transactionSchema","fillInputAndData","formattedTransaction","common","Object","_a","customChain","_b","data","input","gasLimit","gas"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/format_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Transaction, DataFormat, DEFAULT_RETURN_FORMAT, FormatType } from 'web3-types';\nimport { isNullish, ValidationSchemaInput } from 'web3-validator';\nimport { mergeDeep, format, bytesToHex, toHex } from 'web3-utils';\nimport { TransactionDataAndInputError } from 'web3-errors';\n\nimport { transactionInfoSchema, transactionSchema } from '../schemas.js';\n\nexport function formatTransaction<\n\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\tTransactionType extends Transaction = Transaction,\n>(\n\ttransaction: TransactionType,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\toptions: {\n\t\ttransactionSchema?: ValidationSchemaInput | typeof transactionSchema;\n\t\tfillInputAndData?: boolean;\n\t} = {\n\t\ttransactionSchema: transactionInfoSchema,\n\t\tfillInputAndData: false,\n\t},\n): FormatType<TransactionType, ReturnFormat> {\n\tlet formattedTransaction = mergeDeep({}, transaction as Record<string, unknown>) as Transaction;\n\tif (!isNullish(transaction?.common)) {\n\t\tformattedTransaction.common = { ...transaction.common };\n\t\tif (!isNullish(transaction.common?.customChain))\n\t\t\tformattedTransaction.common.customChain = { ...transaction.common.customChain };\n\t}\n\tformattedTransaction = format(\n\t\toptions.transactionSchema ?? transactionInfoSchema,\n\t\tformattedTransaction,\n\t\treturnFormat,\n\t);\n\tif (\n\t\t!isNullish(formattedTransaction.data) &&\n\t\t!isNullish(formattedTransaction.input) &&\n\t\t// Converting toHex is accounting for data and input being Uint8Arrays\n\t\t// since comparing Uint8Array is not as straightforward as comparing strings\n\t\ttoHex(formattedTransaction.data) !== toHex(formattedTransaction.input)\n\t)\n\t\tthrow new TransactionDataAndInputError({\n\t\t\tdata: bytesToHex(formattedTransaction.data),\n\t\t\tinput: bytesToHex(formattedTransaction.input),\n\t\t});\n\n\tif (options.fillInputAndData) {\n\t\tif (!isNullish(formattedTransaction.data)) {\n\t\t\tformattedTransaction.input = formattedTransaction.data;\n\t\t} else if (!isNullish(formattedTransaction.input)) {\n\t\t\tformattedTransaction.data = formattedTransaction.input;\n\t\t}\n\t}\n\n\tif (!isNullish(formattedTransaction.gasLimit)) {\n\t\tformattedTransaction.gas = formattedTransaction.gasLimit;\n\t\tdelete formattedTransaction.gasLimit;\n\t}\n\n\treturn formattedTransaction as FormatType<TransactionType, ReturnFormat>;\n}\n"]},"metadata":{},"sourceType":"module"}