{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBool = exports.encodeBoolean = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst utils_js_1 = require(\"../utils.js\");\n\nconst number_js_1 = require(\"./number.js\");\n\nfunction encodeBoolean(param, input) {\n  let value;\n\n  try {\n    value = (0, web3_utils_1.toBool)(input);\n  } catch (e) {\n    if (e instanceof web3_errors_1.InvalidBooleanError) {\n      throw new web3_errors_1.AbiError('provided input is not valid boolean value', {\n        type: param.type,\n        value: input,\n        name: param.name\n      });\n    }\n  }\n\n  return (0, number_js_1.encodeNumber)({\n    type: 'uint8',\n    name: ''\n  }, Number(value));\n}\n\nexports.encodeBoolean = encodeBoolean;\n\nfunction decodeBool(_param, bytes) {\n  const numberResult = (0, number_js_1.decodeNumber)({\n    type: 'uint8',\n    name: ''\n  }, bytes);\n\n  if (numberResult.result > 1 || numberResult.result < 0) {\n    throw new web3_errors_1.AbiError('Invalid boolean value encoded', {\n      boolBytes: bytes.subarray(0, utils_js_1.WORD_SIZE),\n      numberResult\n    });\n  }\n\n  return {\n    result: numberResult.result === BigInt(1),\n    encoded: numberResult.encoded,\n    consumed: utils_js_1.WORD_SIZE\n  };\n}\n\nexports.decodeBool = decodeBool;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AAEA;;AACA;;AAEA,SAAgBA,aAAhB,CAA8BC,KAA9B,EAAmDC,KAAnD,EAAiE;EAChE,IAAIC,KAAJ;;EACA,IAAI;IACHA,KAAK,GAAG,yBAAOD,KAAP,CAAR;EACA,CAFD,CAEE,OAAOE,CAAP,EAAU;IACX,IAAIA,CAAC,YAAYC,iCAAjB,EAAsC;MACrC,MAAM,IAAIA,sBAAJ,CAAa,2CAAb,EAA0D;QAC/DC,IAAI,EAAEL,KAAK,CAACK,IADmD;QAE/DH,KAAK,EAAED,KAFwD;QAG/DK,IAAI,EAAEN,KAAK,CAACM;MAHmD,CAA1D,CAAN;IAKA;EACD;;EAED,OAAO,8BAAa;IAAED,IAAI,EAAE,OAAR;IAAiBC,IAAI,EAAE;EAAvB,CAAb,EAA0CC,MAAM,CAACL,KAAD,CAAhD,CAAP;AACA;;AAfDM;;AAiBA,SAAgBC,UAAhB,CAA2BC,MAA3B,EAAiDC,KAAjD,EAAkE;EACjE,MAAMC,YAAY,GAAG,8BAAa;IAAEP,IAAI,EAAE,OAAR;IAAiBC,IAAI,EAAE;EAAvB,CAAb,EAA0CK,KAA1C,CAArB;;EACA,IAAIC,YAAY,CAACC,MAAb,GAAsB,CAAtB,IAA2BD,YAAY,CAACC,MAAb,GAAsB,CAArD,EAAwD;IACvD,MAAM,IAAIT,sBAAJ,CAAa,+BAAb,EAA8C;MACnDU,SAAS,EAAEH,KAAK,CAACI,QAAN,CAAe,CAAf,EAAkBC,oBAAlB,CADwC;MAEnDJ;IAFmD,CAA9C,CAAN;EAIA;;EACD,OAAO;IACNC,MAAM,EAAED,YAAY,CAACC,MAAb,KAAwBI,MAAM,CAAC,CAAD,CADhC;IAENC,OAAO,EAAEN,YAAY,CAACM,OAFhB;IAGNC,QAAQ,EAAEH;EAHJ,CAAP;AAKA;;AAbDR","names":["encodeBoolean","param","input","value","e","web3_errors_1","type","name","Number","exports","decodeBool","_param","bytes","numberResult","result","boolBytes","subarray","utils_js_1","BigInt","encoded","consumed"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/coders/base/bool.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError, InvalidBooleanError } from 'web3-errors';\nimport { AbiParameter } from 'web3-types';\nimport { toBool } from 'web3-utils';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\n\nexport function encodeBoolean(param: AbiParameter, input: unknown): EncoderResult {\n\tlet value;\n\ttry {\n\t\tvalue = toBool(input);\n\t} catch (e) {\n\t\tif (e instanceof InvalidBooleanError) {\n\t\t\tthrow new AbiError('provided input is not valid boolean value', {\n\t\t\t\ttype: param.type,\n\t\t\t\tvalue: input,\n\t\t\t\tname: param.name,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn encodeNumber({ type: 'uint8', name: '' }, Number(value));\n}\n\nexport function decodeBool(_param: AbiParameter, bytes: Uint8Array): DecoderResult<boolean> {\n\tconst numberResult = decodeNumber({ type: 'uint8', name: '' }, bytes);\n\tif (numberResult.result > 1 || numberResult.result < 0) {\n\t\tthrow new AbiError('Invalid boolean value encoded', {\n\t\t\tboolBytes: bytes.subarray(0, WORD_SIZE),\n\t\t\tnumberResult,\n\t\t});\n\t}\n\treturn {\n\t\tresult: numberResult.result === BigInt(1),\n\t\tencoded: numberResult.encoded,\n\t\tconsumed: WORD_SIZE,\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}