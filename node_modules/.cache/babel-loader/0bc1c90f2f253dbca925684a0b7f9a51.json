{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAddress = exports.checkAddressCheckSum = void 0;\n\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\n\nconst utils_js_1 = require(\"ethereum-cryptography/utils.js\");\n\nconst utils_js_2 = require(\"../utils.js\");\n\nconst string_js_1 = require(\"./string.js\");\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n */\n\n\nconst checkAddressCheckSum = data => {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;\n  const address = data.slice(2);\n  const updatedData = (0, utils_js_1.utf8ToBytes)(address.toLowerCase());\n  const addressHash = (0, utils_js_2.uint8ArrayToHexString)((0, keccak_js_1.keccak256)(updatedData)).slice(2);\n\n  for (let i = 0; i < 40; i += 1) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.checkAddressCheckSum = checkAddressCheckSum;\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n */\n\nconst isAddress = function (value) {\n  let checkChecksum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (typeof value !== 'string' && !(value instanceof Uint8Array)) {\n    return false;\n  }\n\n  let valueToCheck;\n\n  if (value instanceof Uint8Array) {\n    valueToCheck = (0, utils_js_2.uint8ArrayToHexString)(value);\n  } else if (typeof value === 'string' && !(0, string_js_1.isHexStrict)(value)) {\n    valueToCheck = value.toLowerCase().startsWith('0x') ? value : `0x${value}`;\n  } else {\n    valueToCheck = value;\n  } // check if it has the basic requirements of an address\n\n\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {\n    return false;\n  } // If it's ALL lowercase or ALL upppercase\n\n\n  if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) || /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) {\n    return true; // Otherwise check each case\n  }\n\n  return checkChecksum ? (0, exports.checkAddressCheckSum)(valueToCheck) : true;\n};\n\nexports.isAddress = isAddress;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AACA;;AAEA;;AACA;AAEA;;;;;AAGO,MAAMA,oBAAoB,GAAIC,IAAD,IAA0B;EAC7D,IAAI,CAAC,uBAAuBC,IAAvB,CAA4BD,IAA5B,CAAL,EAAwC,OAAO,KAAP;EACxC,MAAME,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAhB;EACA,MAAMC,WAAW,GAAG,4BAAYF,OAAO,CAACG,WAAR,EAAZ,CAApB;EAEA,MAAMC,WAAW,GAAG,sCAAsB,2BAAUF,WAAV,CAAtB,EAA8CD,KAA9C,CAAoD,CAApD,CAApB;;EAEA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;IAC/B;IACA,IACEC,QAAQ,CAACF,WAAW,CAACC,CAAD,CAAZ,EAAiB,EAAjB,CAAR,GAA+B,CAA/B,IAAoCL,OAAO,CAACK,CAAD,CAAP,CAAWE,WAAX,OAA6BP,OAAO,CAACK,CAAD,CAAzE,IACCC,QAAQ,CAACF,WAAW,CAACC,CAAD,CAAZ,EAAiB,EAAjB,CAAR,IAAgC,CAAhC,IAAqCL,OAAO,CAACK,CAAD,CAAP,CAAWF,WAAX,OAA6BH,OAAO,CAACK,CAAD,CAF3E,EAGE;MACD,OAAO,KAAP;IACA;EACD;;EACD,OAAO,IAAP;AACA,CAjBM;;AAAMG,+BAAoBX,oBAApB;AAmBb;;;;AAGO,MAAMY,SAAS,GAAG,UAACC,KAAD,EAAiD;EAAA,IAAxBC,aAAwB,uEAAR,IAAQ;;EACzE,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,EAAEA,KAAK,YAAYE,UAAnB,CAAjC,EAAiE;IAChE,OAAO,KAAP;EACA;;EAED,IAAIC,YAAJ;;EAEA,IAAIH,KAAK,YAAYE,UAArB,EAAiC;IAChCC,YAAY,GAAG,sCAAsBH,KAAtB,CAAf;EACA,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAAC,6BAAYA,KAAZ,CAAlC,EAAsD;IAC5DG,YAAY,GAAGH,KAAK,CAACP,WAAN,GAAoBW,UAApB,CAA+B,IAA/B,IAAuCJ,KAAvC,GAA+C,KAAKA,KAAK,EAAxE;EACA,CAFM,MAEA;IACNG,YAAY,GAAGH,KAAf;EACA,CAbwE,CAezE;;;EACA,IAAI,CAAC,uBAAuBX,IAAvB,CAA4Bc,YAA5B,CAAL,EAAgD;IAC/C,OAAO,KAAP;EACA,CAlBwE,CAmBzE;;;EACA,IACC,yBAAyBd,IAAzB,CAA8Bc,YAA9B,KACA,yBAAyBd,IAAzB,CAA8Bc,YAA9B,CAFD,EAGE;IACD,OAAO,IAAP,CADC,CAED;EACA;;EACD,OAAOF,aAAa,GAAG,kCAAqBE,YAArB,CAAH,GAAwC,IAA5D;AACA,CA5BM;;AAAML,oBAASC,SAAT","names":["checkAddressCheckSum","data","test","address","slice","updatedData","toLowerCase","addressHash","i","parseInt","toUpperCase","exports","isAddress","value","checkChecksum","Uint8Array","valueToCheck","startsWith"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-validator/src/validation/address.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { ValidInputTypes } from '../types.js';\nimport { uint8ArrayToHexString } from '../utils.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n */\nexport const checkAddressCheckSum = (data: string): boolean => {\n\tif (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;\n\tconst address = data.slice(2);\n\tconst updatedData = utf8ToBytes(address.toLowerCase());\n\n\tconst addressHash = uint8ArrayToHexString(keccak256(updatedData)).slice(2);\n\n\tfor (let i = 0; i < 40; i += 1) {\n\t\t// the nth letter should be uppercase if the nth digit of casemap is 1\n\t\tif (\n\t\t\t(parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n\t\t\t(parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n */\nexport const isAddress = (value: ValidInputTypes, checkChecksum = true) => {\n\tif (typeof value !== 'string' && !(value instanceof Uint8Array)) {\n\t\treturn false;\n\t}\n\n\tlet valueToCheck: string;\n\n\tif (value instanceof Uint8Array) {\n\t\tvalueToCheck = uint8ArrayToHexString(value);\n\t} else if (typeof value === 'string' && !isHexStrict(value)) {\n\t\tvalueToCheck = value.toLowerCase().startsWith('0x') ? value : `0x${value}`;\n\t} else {\n\t\tvalueToCheck = value;\n\t}\n\n\t// check if it has the basic requirements of an address\n\tif (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {\n\t\treturn false;\n\t}\n\t// If it's ALL lowercase or ALL upppercase\n\tif (\n\t\t/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) ||\n\t\t/^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)\n\t) {\n\t\treturn true;\n\t\t// Otherwise check each case\n\t}\n\treturn checkChecksum ? checkAddressCheckSum(valueToCheck) : true;\n};\n"]},"metadata":{},"sourceType":"script"}