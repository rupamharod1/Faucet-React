{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeNumber = exports.encodeNumber = void 0;\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst utils_js_1 = require(\"../utils.js\");\n\nconst numbersLimits_js_1 = require(\"./numbersLimits.js\"); // eslint-disable-next-line no-bitwise\n\n\nconst mask = BigInt(1) << BigInt(256);\n\nfunction bigIntToUint8Array(value) {\n  let byteLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : utils_js_1.WORD_SIZE;\n  let hexValue;\n\n  if (value < 0) {\n    hexValue = (mask + value).toString(16);\n  } else {\n    hexValue = value.toString(16);\n  }\n\n  hexValue = (0, web3_utils_1.padLeft)(hexValue, byteLength * 2);\n  return web3_validator_1.utils.hexToUint8Array(hexValue);\n}\n\nfunction uint8ArrayToBigInt(value, max) {\n  const hexValue = web3_validator_1.utils.uint8ArrayToHexString(value);\n  const result = BigInt(hexValue);\n  if (result <= max) return result;\n  return result - mask;\n}\n\nfunction encodeNumber(param, input) {\n  let value;\n\n  try {\n    value = (0, web3_utils_1.toBigInt)(input);\n  } catch (e) {\n    throw new web3_errors_1.AbiError('provided input is not number value', {\n      type: param.type,\n      value: input,\n      name: param.name\n    });\n  }\n\n  const limit = numbersLimits_js_1.numberLimits.get(param.type);\n\n  if (!limit) {\n    throw new web3_errors_1.AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n\n  if (value < limit.min) {\n    throw new web3_errors_1.AbiError('provided input is less then minimum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n\n  if (value > limit.max) {\n    throw new web3_errors_1.AbiError('provided input is greater then maximum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n\n  return {\n    dynamic: false,\n    encoded: bigIntToUint8Array(value)\n  };\n}\n\nexports.encodeNumber = encodeNumber;\n\nfunction decodeNumber(param, bytes) {\n  if (bytes.length < utils_js_1.WORD_SIZE) {\n    throw new web3_errors_1.AbiError('Not enough bytes left to decode', {\n      param,\n      bytesLeft: bytes.length\n    });\n  }\n\n  const boolBytes = bytes.subarray(0, utils_js_1.WORD_SIZE);\n  const limit = numbersLimits_js_1.numberLimits.get(param.type);\n\n  if (!limit) {\n    throw new web3_errors_1.AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n\n  const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n\n  if (numberResult < limit.min) {\n    throw new web3_errors_1.AbiError('decoded value is less then minimum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n\n  if (numberResult > limit.max) {\n    throw new web3_errors_1.AbiError('decoded value is greater then maximum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n\n  return {\n    result: numberResult,\n    encoded: bytes.subarray(utils_js_1.WORD_SIZE),\n    consumed: utils_js_1.WORD_SIZE\n  };\n}\n\nexports.decodeNumber = decodeNumber;","map":{"version":3,"mappings":"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","names":["mask","BigInt","bigIntToUint8Array","value","byteLength","utils_js_1","hexValue","toString","web3_validator_1","hexToUint8Array","uint8ArrayToBigInt","max","uint8ArrayToHexString","result","encodeNumber","param","input","e","web3_errors_1","type","name","limit","numbersLimits_js_1","get","min","minimum","maximum","dynamic","encoded","exports","decodeNumber","bytes","length","bytesLeft","boolBytes","subarray","numberResult","consumed"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-abi/src/coders/base/number.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiError } from 'web3-errors';\nimport type { AbiParameter } from 'web3-types';\nimport { padLeft, toBigInt } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { numberLimits } from './numbersLimits.js';\n\n// eslint-disable-next-line no-bitwise\nconst mask = BigInt(1) << BigInt(256);\n\nfunction bigIntToUint8Array(value: bigint, byteLength = WORD_SIZE): Uint8Array {\n\tlet hexValue;\n\tif (value < 0) {\n\t\thexValue = (mask + value).toString(16);\n\t} else {\n\t\thexValue = value.toString(16);\n\t}\n\thexValue = padLeft(hexValue, byteLength * 2);\n\treturn utils.hexToUint8Array(hexValue);\n}\n\nfunction uint8ArrayToBigInt(value: Uint8Array, max: bigint): bigint {\n\tconst hexValue = utils.uint8ArrayToHexString(value);\n\tconst result = BigInt(hexValue);\n\tif (result <= max) return result;\n\treturn result - mask;\n}\n\nexport function encodeNumber(param: AbiParameter, input: unknown): EncoderResult {\n\tlet value;\n\ttry {\n\t\tvalue = toBigInt(input);\n\t} catch (e) {\n\t\tthrow new AbiError('provided input is not number value', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t});\n\t}\n\tconst limit = numberLimits.get(param.type);\n\tif (!limit) {\n\t\tthrow new AbiError('provided abi contains invalid number datatype', { type: param.type });\n\t}\n\tif (value < limit.min) {\n\t\tthrow new AbiError('provided input is less then minimum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t\tminimum: limit.min.toString(),\n\t\t});\n\t}\n\tif (value > limit.max) {\n\t\tthrow new AbiError('provided input is greater then maximum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t\tmaximum: limit.max.toString(),\n\t\t});\n\t}\n\treturn {\n\t\tdynamic: false,\n\t\tencoded: bigIntToUint8Array(value),\n\t};\n}\n\nexport function decodeNumber(param: AbiParameter, bytes: Uint8Array): DecoderResult<bigint> {\n\tif (bytes.length < WORD_SIZE) {\n\t\tthrow new AbiError('Not enough bytes left to decode', { param, bytesLeft: bytes.length });\n\t}\n\tconst boolBytes = bytes.subarray(0, WORD_SIZE);\n\tconst limit = numberLimits.get(param.type);\n\tif (!limit) {\n\t\tthrow new AbiError('provided abi contains invalid number datatype', { type: param.type });\n\t}\n\tconst numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n\n\tif (numberResult < limit.min) {\n\t\tthrow new AbiError('decoded value is less then minimum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: numberResult,\n\t\t\tname: param.name,\n\t\t\tminimum: limit.min.toString(),\n\t\t});\n\t}\n\tif (numberResult > limit.max) {\n\t\tthrow new AbiError('decoded value is greater then maximum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: numberResult,\n\t\t\tname: param.name,\n\t\t\tmaximum: limit.max.toString(),\n\t\t});\n\t}\n\treturn {\n\t\tresult: numberResult,\n\t\tencoded: bytes.subarray(WORD_SIZE),\n\t\tconsumed: WORD_SIZE,\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}