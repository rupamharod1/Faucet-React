{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar _a;\n\nimport { OperationTimeoutError } from 'web3-errors';\n/**\n * The class is a simple implementation of a deferred promise with optional timeout functionality,\n * which can be useful when dealing with asynchronous tasks.\n *\n */\n\nexport class Web3DeferredPromise {\n  /**\n   *\n   * @param timeout - (optional) The timeout in milliseconds.\n   * @param eagerStart - (optional) If true, the timer starts as soon as the promise is created.\n   * @param timeoutMessage - (optional) The message to include in the timeout erro that is thrown when the promise times out.\n   */\n  constructor() {\n    let {\n      timeout,\n      eagerStart,\n      timeoutMessage\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      timeout: 0,\n      eagerStart: false,\n      timeoutMessage: 'DeferredPromise timed out'\n    };\n    // public tag to treat object as promise by different libs\n    // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    this[_a] = 'Promise';\n    this._state = 'pending';\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this._timeoutMessage = timeoutMessage;\n    this._timeoutInterval = timeout;\n\n    if (eagerStart) {\n      this.startTimer();\n    }\n  }\n  /**\n   * Returns the current state of the promise.\n   * @returns 'pending' | 'fulfilled' | 'rejected'\n   */\n\n\n  get state() {\n    return this._state;\n  }\n  /**\n   *\n   * @param onfulfilled - (optional) The callback to execute when the promise is fulfilled.\n   * @param onrejected  - (optional) The callback to execute when the promise is rejected.\n   * @returns\n   */\n\n\n  then(onfulfilled, onrejected) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._promise.then(onfulfilled, onrejected);\n    });\n  }\n  /**\n   *\n   * @param onrejected - (optional) The callback to execute when the promise is rejected.\n   * @returns\n   */\n\n\n  catch( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onrejected) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._promise.catch(onrejected);\n    });\n  }\n  /**\n   *\n   * @param onfinally - (optional) The callback to execute when the promise is settled (fulfilled or rejected).\n   * @returns\n   */\n\n\n  finally(onfinally) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._promise.finally(onfinally);\n    });\n  }\n  /**\n   * Resolves the current promise.\n   * @param value - The value to resolve the promise with.\n   */\n\n\n  resolve(value) {\n    this._resolve(value);\n\n    this._state = 'fulfilled';\n\n    this._clearTimeout();\n  }\n  /**\n   * Rejects the current promise.\n   * @param reason - The reason to reject the promise with.\n   */\n\n\n  reject(reason) {\n    this._reject(reason);\n\n    this._state = 'rejected';\n\n    this._clearTimeout();\n  }\n  /**\n   * Starts the timeout timer for the promise.\n   */\n\n\n  startTimer() {\n    if (this._timeoutInterval && this._timeoutInterval > 0) {\n      this._timeoutId = setTimeout(this._checkTimeout.bind(this), this._timeoutInterval);\n    }\n  }\n\n  _checkTimeout() {\n    if (this._state === 'pending' && this._timeoutId) {\n      this.reject(new OperationTimeoutError(this._timeoutMessage));\n    }\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n}\n_a = Symbol.toStringTag;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,qBAAT,QAAsC,aAAtC;AAIA;;;;;;AAKA,OAAM,MAAOC,mBAAP,CAA0B;EAa/B;;;;;;EAMAC,cASE;IAAA,IARD;MACCC,OADD;MAECC,UAFD;MAGCC;IAHD,CAQC,uEAJqE;MACrEF,OAAO,EAAE,CAD4D;MAErEC,UAAU,EAAE,KAFyD;MAGrEC,cAAc,EAAE;IAHqD,CAIrE;IA3BF;IACA;IACO,WAAkC,SAAlC;IAKC,cAA+C,SAA/C;IAsBP,KAAKC,QAAL,GAAgB,IAAIC,OAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV,KAAoB;MAClD,KAAKC,QAAL,GAAgBF,OAAhB;MACA,KAAKG,OAAL,GAAeF,MAAf;IACA,CAHe,CAAhB;IAKA,KAAKG,eAAL,GAAuBP,cAAvB;IACA,KAAKQ,gBAAL,GAAwBV,OAAxB;;IAEA,IAAIC,UAAJ,EAAgB;MACf,KAAKU,UAAL;IACA;EACD;EACD;;;;;;EAIgB,IAALC,KAAK;IACf,OAAO,KAAKC,MAAZ;EACA;EACD;;;;;;;;EAMaC,IAAI,CAChBC,WADgB,EAEhBC,UAFgB,EAEkD;;MAElE,OAAO,KAAKb,QAAL,CAAcW,IAAd,CAAmBC,WAAnB,EAAgCC,UAAhC,CAAP;IACA;EAAA;EACD;;;;;;;EAKaC,KAAK,EACjB;EACAD,UAFiB,EAE2C;;MAE5D,OAAO,KAAKb,QAAL,CAAcc,KAAd,CAAoBD,UAApB,CAAP;IACA;EAAA;EAED;;;;;;;EAKaE,OAAO,CAACC,SAAD,EAAqC;;MACxD,OAAO,KAAKhB,QAAL,CAAce,OAAd,CAAsBC,SAAtB,CAAP;IACA;EAAA;EAED;;;;;;EAIOd,OAAO,CAACe,KAAD,EAA0B;IACvC,KAAKb,QAAL,CAAca,KAAd;;IACA,KAAKP,MAAL,GAAc,WAAd;;IACA,KAAKQ,aAAL;EACA;EAED;;;;;;EAIOf,MAAM,CAACgB,MAAD,EAAiB;IAC7B,KAAKd,OAAL,CAAac,MAAb;;IACA,KAAKT,MAAL,GAAc,UAAd;;IACA,KAAKQ,aAAL;EACA;EAED;;;;;EAGOV,UAAU;IAChB,IAAI,KAAKD,gBAAL,IAAyB,KAAKA,gBAAL,GAAwB,CAArD,EAAwD;MACvD,KAAKa,UAAL,GAAkBC,UAAU,CAAC,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAD,EAAgC,KAAKhB,gBAArC,CAA5B;IACA;EACD;;EAEOe,aAAa;IACpB,IAAI,KAAKZ,MAAL,KAAgB,SAAhB,IAA6B,KAAKU,UAAtC,EAAkD;MACjD,KAAKjB,MAAL,CAAY,IAAIT,qBAAJ,CAA0B,KAAKY,eAA/B,CAAZ;IACA;EACD;;EAEOY,aAAa;IACpB,IAAI,KAAKE,UAAT,EAAqB;MACpBI,YAAY,CAAC,KAAKJ,UAAN,CAAZ;IACA;EACD;;AAzH8B;KAGvBK,MAAM,CAACC","names":["OperationTimeoutError","Web3DeferredPromise","constructor","timeout","eagerStart","timeoutMessage","_promise","Promise","resolve","reject","_resolve","_reject","_timeoutMessage","_timeoutInterval","startTimer","state","_state","then","onfulfilled","onrejected","catch","finally","onfinally","value","_clearTimeout","reason","_timeoutId","setTimeout","_checkTimeout","bind","clearTimeout","Symbol","toStringTag"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/web3_deferred_promise.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { OperationTimeoutError } from 'web3-errors';\nimport { Web3DeferredPromiseInterface } from 'web3-types';\nimport { Timeout } from './promise_helpers.js';\n\n/**\n * The class is a simple implementation of a deferred promise with optional timeout functionality,\n * which can be useful when dealing with asynchronous tasks.\n *\n */\nexport class Web3DeferredPromise<T> implements Promise<T>, Web3DeferredPromiseInterface<T> {\n\t// public tag to treat object as promise by different libs\n\t// eslint-disable-next-line @typescript-eslint/prefer-as-const\n\tpublic [Symbol.toStringTag]: 'Promise' = 'Promise';\n\n\tprivate readonly _promise: Promise<T>;\n\tprivate _resolve!: (value: T | PromiseLike<T>) => void;\n\tprivate _reject!: (reason?: unknown) => void;\n\tprivate _state: 'pending' | 'fulfilled' | 'rejected' = 'pending';\n\tprivate _timeoutId?: Timeout;\n\tprivate readonly _timeoutInterval?: number;\n\tprivate readonly _timeoutMessage: string;\n\n\t/**\n\t *\n\t * @param timeout - (optional) The timeout in milliseconds.\n\t * @param eagerStart - (optional) If true, the timer starts as soon as the promise is created.\n\t * @param timeoutMessage - (optional) The message to include in the timeout erro that is thrown when the promise times out.\n\t */\n\tpublic constructor(\n\t\t{\n\t\t\ttimeout,\n\t\t\teagerStart,\n\t\t\ttimeoutMessage,\n\t\t}: { timeout: number; eagerStart: boolean; timeoutMessage: string } = {\n\t\t\ttimeout: 0,\n\t\t\teagerStart: false,\n\t\t\ttimeoutMessage: 'DeferredPromise timed out',\n\t\t},\n\t) {\n\t\tthis._promise = new Promise<T>((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\t\t});\n\n\t\tthis._timeoutMessage = timeoutMessage;\n\t\tthis._timeoutInterval = timeout;\n\n\t\tif (eagerStart) {\n\t\t\tthis.startTimer();\n\t\t}\n\t}\n\t/**\n\t * Returns the current state of the promise.\n\t * @returns 'pending' | 'fulfilled' | 'rejected'\n\t */\n\tpublic get state(): 'pending' | 'fulfilled' | 'rejected' {\n\t\treturn this._state;\n\t}\n\t/**\n\t *\n\t * @param onfulfilled - (optional) The callback to execute when the promise is fulfilled.\n\t * @param onrejected  - (optional) The callback to execute when the promise is rejected.\n\t * @returns\n\t */\n\tpublic async then<TResult1, TResult2>(\n\t\tonfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n\t\tonrejected?: (reason: unknown) => TResult2 | PromiseLike<TResult2>,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this._promise.then(onfulfilled, onrejected);\n\t}\n\t/**\n\t *\n\t * @param onrejected - (optional) The callback to execute when the promise is rejected.\n\t * @returns\n\t */\n\tpublic async catch<TResult>(\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tonrejected?: (reason: any) => TResult | PromiseLike<TResult>,\n\t): Promise<T | TResult> {\n\t\treturn this._promise.catch(onrejected);\n\t}\n\n\t/**\n\t *\n\t * @param onfinally - (optional) The callback to execute when the promise is settled (fulfilled or rejected).\n\t * @returns\n\t */\n\tpublic async finally(onfinally?: (() => void) | undefined): Promise<T> {\n\t\treturn this._promise.finally(onfinally);\n\t}\n\n\t/**\n\t * Resolves the current promise.\n\t * @param value - The value to resolve the promise with.\n\t */\n\tpublic resolve(value: T | PromiseLike<T>): void {\n\t\tthis._resolve(value);\n\t\tthis._state = 'fulfilled';\n\t\tthis._clearTimeout();\n\t}\n\n\t/**\n\t * Rejects the current promise.\n\t * @param reason - The reason to reject the promise with.\n\t */\n\tpublic reject(reason?: unknown): void {\n\t\tthis._reject(reason);\n\t\tthis._state = 'rejected';\n\t\tthis._clearTimeout();\n\t}\n\n\t/**\n\t * Starts the timeout timer for the promise.\n\t */\n\tpublic startTimer() {\n\t\tif (this._timeoutInterval && this._timeoutInterval > 0) {\n\t\t\tthis._timeoutId = setTimeout(this._checkTimeout.bind(this), this._timeoutInterval);\n\t\t}\n\t}\n\n\tprivate _checkTimeout() {\n\t\tif (this._state === 'pending' && this._timeoutId) {\n\t\t\tthis.reject(new OperationTimeoutError(this._timeoutMessage));\n\t\t}\n\t}\n\n\tprivate _clearTimeout() {\n\t\tif (this._timeoutId) {\n\t\t\tclearTimeout(this._timeoutId);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}