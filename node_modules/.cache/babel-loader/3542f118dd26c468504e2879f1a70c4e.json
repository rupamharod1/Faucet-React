{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter, bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\nconst {\n  buf: crc32Uint8Array\n} = pkg;\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\n\nexport class Common extends EventEmitter {\n  constructor(opts) {\n    var _a, _b;\n\n    super();\n    this._eips = [];\n    this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];\n    this._chainParams = this.setChain(opts.chain);\n    this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Merge; // Assign hardfork changes in the sequence of the applied hardforks\n\n    this.HARDFORK_CHANGES = this.hardforks().map(hf => [hf.name, HARDFORK_SPECS[hf.name]]);\n    this._hardfork = this.DEFAULT_HARDFORK;\n\n    if (opts.hardfork !== undefined) {\n      this.setHardfork(opts.hardfork);\n    }\n\n    if (opts.eips) {\n      this.setEIPs(opts.eips);\n    }\n  }\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `web3-utils/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n\n\n  static custom(chainParamsOrName) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    const baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n    const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));\n    standardChainParams.name = 'custom-chain';\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common(Object.assign({\n        chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName)\n      }, opts));\n    }\n\n    if (chainParamsOrName === CustomChain.PolygonMainnet) {\n      return Common.custom({\n        name: CustomChain.PolygonMainnet,\n        chainId: 137,\n        networkId: 137\n      }, opts);\n    }\n\n    if (chainParamsOrName === CustomChain.PolygonMumbai) {\n      return Common.custom({\n        name: CustomChain.PolygonMumbai,\n        chainId: 80001,\n        networkId: 80001\n      }, opts);\n    }\n\n    if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n      return Common.custom({\n        name: CustomChain.ArbitrumRinkebyTestnet,\n        chainId: 421611,\n        networkId: 421611\n      }, opts);\n    }\n\n    if (chainParamsOrName === CustomChain.ArbitrumOne) {\n      return Common.custom({\n        name: CustomChain.ArbitrumOne,\n        chainId: 42161,\n        networkId: 42161\n      }, opts);\n    }\n\n    if (chainParamsOrName === CustomChain.xDaiChain) {\n      return Common.custom({\n        name: CustomChain.xDaiChain,\n        chainId: 100,\n        networkId: 100\n      }, opts);\n    }\n\n    if (chainParamsOrName === CustomChain.OptimisticKovan) {\n      return Common.custom({\n        name: CustomChain.OptimisticKovan,\n        chainId: 69,\n        networkId: 69\n      }, Object.assign({\n        hardfork: Hardfork.Berlin\n      }, opts));\n    }\n\n    if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n      return Common.custom({\n        name: CustomChain.OptimisticEthereum,\n        chainId: 10,\n        networkId: 10\n      }, Object.assign({\n        hardfork: Hardfork.Berlin\n      }, opts));\n    } // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\n\n    throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n  }\n  /**\n   * Static method to load and set common from a geth genesis json\n   * @param genesisJson json of geth configuration\n   * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n   * @returns Common\n   */\n\n\n  static fromGethGenesis(genesisJson, _ref) {\n    let {\n      chain,\n      eips,\n      genesisHash,\n      hardfork,\n      mergeForkIdPostMerge\n    } = _ref;\n\n    var _a;\n\n    const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n    const common = new Common({\n      chain: (_a = genesisParams.name) !== null && _a !== void 0 ? _a : 'custom',\n      customChains: [genesisParams],\n      eips,\n      hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork\n    });\n\n    if (genesisHash !== undefined) {\n      common.setForkHashes(genesisHash);\n    }\n\n    return common;\n  }\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId bigint id (`1`) of a standard chain\n   * @returns boolean\n   */\n\n\n  static isSupportedChainId(chainId) {\n    const initializedChains = this._getInitializedChains();\n\n    return Boolean(initializedChains.names[chainId.toString()]);\n  }\n\n  static _getChainParams(_chain, customChains) {\n    let chain = _chain;\n\n    const initializedChains = this._getInitializedChains(customChains);\n\n    if (typeof chain === 'number' || typeof chain === 'bigint') {\n      chain = chain.toString();\n\n      if (initializedChains.names[chain]) {\n        const name = initializedChains.names[chain];\n        return initializedChains[name];\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`);\n    }\n\n    if (initializedChains[chain] !== undefined) {\n      return initializedChains[chain];\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`);\n  }\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain representation.\n   *              Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n\n\n  setChain(chain) {\n    if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain, this._customChains);\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n      }\n\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\n      for (const param of required) {\n        if (!(param in chain)) {\n          throw new Error(`Missing required chain parameter: ${param}`);\n        }\n      }\n\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n\n    for (const hf of this.hardforks()) {\n      if (hf.block === undefined) {\n        throw new Error(`Hardfork cannot have undefined block number`);\n      }\n    }\n\n    return this._chainParams;\n  }\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n\n\n  setHardfork(hardfork) {\n    let existing = false;\n\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork;\n          this.emit('hardforkChanged', hardfork);\n        }\n\n        existing = true;\n      }\n    }\n\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`);\n    }\n  }\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n   * @param timestamp: timestamp in seconds at which block was/is to be minted\n   * @returns The name of the HF\n   */\n\n\n  getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const td = toType(_td, TypeOutput.BigInt);\n    const timestamp = toType(_timestamp, TypeOutput.Number); // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n\n    const hfs = this.hardforks().filter(hf => // eslint-disable-next-line no-null/no-null\n    hf.block !== null || // eslint-disable-next-line no-null/no-null\n    hf.ttd !== null && hf.ttd !== undefined || hf.timestamp !== undefined); // eslint-disable-next-line no-null/no-null\n\n    const mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n    const doubleTTDHF = hfs.slice(mergeIndex + 1) // eslint-disable-next-line no-null/no-null\n    .findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\n    if (doubleTTDHF >= 0) {\n      throw Error(`More than one merge hardforks found with ttd specified`);\n    } // Find the first hardfork that has a block number greater than `blockNumber`\n    // (skips the merge hardfork since it cannot have a block number specified).\n    // If timestamp is not provided, it also skips timestamps hardforks to continue\n    // discovering/checking number hardforks.\n\n\n    let hfIndex = hfs.findIndex(hf => // eslint-disable-next-line no-null/no-null\n    hf.block !== null && hf.block > blockNumber || timestamp !== undefined && Number(hf.timestamp) > timestamp);\n\n    if (hfIndex === -1) {\n      // all hardforks apply, set hfIndex to the last one as that's the candidate\n      hfIndex = hfs.length;\n    } else if (hfIndex === 0) {\n      // cannot have a case where a block number is before all applied hardforks\n      // since the chain has to start with a hardfork\n      throw Error('Must have at least one hardfork at block 0');\n    } // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n\n\n    if (timestamp === undefined) {\n      const stepBack = hfs.slice(0, hfIndex).reverse() // eslint-disable-next-line no-null/no-null\n      .findIndex(hf => hf.block !== null || hf.ttd !== undefined);\n      hfIndex -= stepBack;\n    } // Move hfIndex one back to arrive at candidate hardfork\n\n\n    hfIndex -= 1; // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n    // hardforks. so it will now be needed to rollback\n    // eslint-disable-next-line no-null/no-null\n\n    if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n      // We're on the merge hardfork.  Let's check the TTD\n      // eslint-disable-next-line no-null/no-null\n      if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n        // Merge ttd greater than current td so we're on hardfork before merge\n        hfIndex -= 1;\n      } // eslint-disable-next-line no-null/no-null\n\n    } else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n      if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n        throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n      } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {\n        throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n      }\n    }\n\n    const hfStartIndex = hfIndex; // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n    // This won't anyway be the case with Merge hfs\n\n    for (; hfIndex < hfs.length - 1; hfIndex += 1) {\n      // break out if hfIndex + 1 is not scheduled at hfIndex\n      if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n        break;\n      }\n    }\n\n    if (timestamp) {\n      const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf) => {\n        var _a;\n\n        return Math.max(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : '0'), acc);\n      }, 0);\n\n      if (minTimeStamp > timestamp) {\n        throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n      }\n\n      const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf) => {\n        var _a;\n\n        return Math.min(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : timestamp), acc);\n      }, timestamp);\n\n      if (maxTimeStamp < timestamp) {\n        throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n      }\n    }\n\n    const hardfork = hfs[hfIndex];\n    return hardfork.name;\n  }\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @param timestamp\n   * @returns The name of the HF set\n   */\n\n\n  setHardforkByBlockNumber(blockNumber, td, timestamp) {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n    this.setHardfork(hardfork);\n    return hardfork;\n  }\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params or null if hardfork not on chain\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  _getHardfork(hardfork) {\n    const hfs = this.hardforks();\n\n    for (const hf of hfs) {\n      if (hf.name === hardfork) return hf;\n    } // eslint-disable-next-line no-null/no-null\n\n\n    return null;\n  }\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n\n\n  setEIPs() {\n    let eips = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`);\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\n\n      const minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n\n      if (!minHF) {\n        throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n      if (EIPs[eip].requiredEIPs !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        for (const elem of EIPs[eip].requiredEIPs) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            `${eip} requires EIP ${elem}, but is not included in the EIP list`);\n          }\n        }\n      }\n    }\n\n    this._eips = eips;\n  }\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precedence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n\n\n  param(topic, name) {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value;\n\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip);\n      if (value !== undefined) return value;\n    }\n\n    return this.paramByHardfork(topic, name, this._hardfork);\n  }\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `BigInt(0)` if not found\n   */\n\n\n  paramByHardfork(topic, name, hardfork) {\n    // eslint-disable-next-line no-null/no-null\n    let value = null;\n\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        const hfEIPs = hfChanges[1].eips;\n\n        for (const eip of hfEIPs) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          const valueEIP = this.paramByEIP(topic, name, eip); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n          value = typeof valueEIP === 'bigint' ? valueEIP : value;\n        } // Parameter-inlining HF file (e.g. istanbul.json)\n\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (hfChanges[1][topic] === undefined) {\n          throw new Error(`Topic ${topic} not defined`);\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n        if (hfChanges[1][topic][name] !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n          value = hfChanges[1][topic][name].v;\n        }\n      }\n\n      if (hfChanges[0] === hardfork) break;\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n\n    return BigInt(value !== null && value !== void 0 ? value : 0);\n  }\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `undefined` if not found\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  paramByEIP(topic, name, eip) {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`);\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n    const eipParams = EIPs[eip];\n\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`);\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n    if (eipParams[topic][name] === undefined) {\n      return undefined;\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\n\n    const value = eipParams[topic][name].v; // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n    return BigInt(value);\n  }\n  /**\n   * Returns a parameter for the hardfork active on block number or\n   * optional provided total difficulty (Merge HF)\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   * @param td Total difficulty\n   *    * @returns The value requested or `BigInt(0)` if not found\n   */\n\n\n  paramByBlock(topic, name, blockNumber, td, timestamp) {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n    return this.paramByHardfork(topic, name, hardfork);\n  }\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n\n\n  isActivatedEIP(eip) {\n    if (this.eips().includes(eip)) {\n      return true;\n    }\n\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const hf = hfChanges[1]; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\n      if (this.gteHardfork(hf.name) && 'eips' in hf) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (hf.eips.includes(eip)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n\n\n  hardforkIsActiveOnBlock( // eslint-disable-next-line @typescript-eslint/ban-types\n  _hardfork, _blockNumber) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const hfBlock = this.hardforkBlock(hardfork);\n\n    if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @returns True if HF is active on block number\n   */\n\n\n  activeOnBlock(blockNumber) {\n    // eslint-disable-next-line no-null/no-null\n    return this.hardforkIsActiveOnBlock(null, blockNumber);\n  }\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n\n\n  hardforkGteHardfork( // eslint-disable-next-line @typescript-eslint/ban-types\n  _hardfork1, hardfork2) {\n    const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;\n    const hardforks = this.hardforks();\n    let posHf1 = -1;\n    let posHf2 = -1;\n    let index = 0;\n\n    for (const hf of hardforks) {\n      if (hf.name === hardfork1) posHf1 = index;\n      if (hf.name === hardfork2) posHf2 = index;\n      index += 1;\n    }\n\n    return posHf1 >= posHf2 && posHf2 !== -1;\n  }\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n\n\n  gteHardfork(hardfork) {\n    // eslint-disable-next-line no-null/no-null\n    return this.hardforkGteHardfork(null, hardfork);\n  }\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  hardforkBlock(_hardfork) {\n    var _a;\n\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const block = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.block; // eslint-disable-next-line no-null/no-null\n\n    if (block === undefined || block === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n\n    return BigInt(block);\n  } // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  hardforkTimestamp(_hardfork) {\n    var _a;\n\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const timestamp = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.timestamp; // eslint-disable-next-line no-null/no-null\n\n    if (timestamp === undefined || timestamp === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n\n    return BigInt(timestamp);\n  }\n  /**\n   * Returns the hardfork change block for eip\n   * @param eip EIP number\n   * @returns Block number or null if unscheduled\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  eipBlock(eip) {\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const hf = hfChanges[1];\n\n      if ('eips' in hf) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        if (hf.eips.includes(eip)) {\n          return this.hardforkBlock(typeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0]);\n        }\n      }\n    } // eslint-disable-next-line no-null/no-null\n\n\n    return null;\n  }\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  hardforkTTD(_hardfork) {\n    var _a;\n\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const ttd = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.ttd; // eslint-disable-next-line no-null/no-null\n\n    if (ttd === undefined || ttd === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n\n    return BigInt(ttd);\n  }\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n\n\n  isHardforkBlock(_blockNumber, _hardfork) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const block = this.hardforkBlock(hardfork);\n    return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n  }\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block timestamp, number or null if not available\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  nextHardforkBlockOrTimestamp(_hardfork) {\n    var _a, _b;\n\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    const hfs = this.hardforks();\n    let hfIndex = hfs.findIndex(hf => hf.name === hardfork); // If the current hardfork is merge, go one behind as merge hf is not part of these\n    // calcs even if the merge hf block is set\n\n    if (hardfork === Hardfork.Merge) {\n      hfIndex -= 1;\n    } // Hardfork not found\n\n\n    if (hfIndex < 0) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n\n    let currHfTimeOrBlock = (_a = hfs[hfIndex].timestamp) !== null && _a !== void 0 ? _a : hfs[hfIndex].block;\n    currHfTimeOrBlock = // eslint-disable-next-line no-null/no-null\n    currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined ? Number(currHfTimeOrBlock) : // eslint-disable-next-line no-null/no-null\n    null;\n    const nextHf = hfs.slice(hfIndex + 1).find(hf => {\n      var _a;\n\n      let hfTimeOrBlock = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n      hfTimeOrBlock = // eslint-disable-next-line no-null/no-null\n      hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : // eslint-disable-next-line no-null/no-null\n      null;\n      return hf.name !== Hardfork.Merge && // eslint-disable-next-line no-null/no-null\n      hfTimeOrBlock !== null && hfTimeOrBlock !== undefined && hfTimeOrBlock !== currHfTimeOrBlock;\n    }); // If no next hf found with valid block or timestamp return null\n\n    if (nextHf === undefined) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n\n    const nextHfBlock = (_b = nextHf.timestamp) !== null && _b !== void 0 ? _b : nextHf.block; // eslint-disable-next-line no-null/no-null\n\n    if (nextHfBlock === null || nextHfBlock === undefined) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    }\n\n    return BigInt(nextHfBlock);\n  }\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  nextHardforkBlock(_hardfork) {\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n    let hfBlock = this.hardforkBlock(hardfork); // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n    // to find the nextHardforkBlock\n    // eslint-disable-next-line no-null/no-null\n\n    if (hfBlock === null && hardfork === Hardfork.Merge) {\n      const hfs = this.hardforks(); // eslint-disable-next-line no-null/no-null\n\n      const mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\n      if (mergeIndex < 0) {\n        throw Error(`Merge hardfork should have been found`);\n      }\n\n      hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n    } // eslint-disable-next-line no-null/no-null\n\n\n    if (hfBlock === null) {\n      // eslint-disable-next-line no-null/no-null\n      return null;\n    } // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    // eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n\n\n    const nextHfBlock = this.hardforks().reduce((acc, hf) => {\n      // We need to ignore the merge block in our next hardfork calc\n      const block = BigInt( // eslint-disable-next-line no-null/no-null\n      hf.block === null || hf.ttd !== undefined && hf.ttd !== null ? 0 : hf.block); // Typescript can't seem to follow that the hfBlock is not null at this point\n      // eslint-disable-next-line no-null/no-null\n\n      return block > hfBlock && acc === null ? block : acc; // eslint-disable-next-line no-null/no-null\n    }, null);\n    return nextHfBlock;\n  }\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   * @deprecated\n   */\n\n\n  isNextHardforkBlock(_blockNumber, _hardfork) {\n    const blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork; // eslint-disable-next-line deprecation/deprecation\n\n    const nextHardforkBlock = this.nextHardforkBlock(hardfork); // eslint-disable-next-line no-null/no-null\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n  }\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @param genesisHash Genesis block hash of the chain\n   * @returns Fork hash as hex string\n   */\n\n\n  _calcForkHash(hardfork, genesisHash) {\n    let hfUint8Array = new Uint8Array();\n    let prevBlockOrTime = 0;\n\n    for (const hf of this.hardforks()) {\n      const {\n        block,\n        timestamp,\n        name\n      } = hf; // Timestamp to be used for timestamp based hfs even if we may bundle\n      // block number with them retrospectively\n\n      let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block; // eslint-disable-next-line no-null/no-null\n\n      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null; // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same blockOrTime HFs\n      // and on the merge since forkhash doesn't change on merge hf\n\n      if (typeof blockOrTime === 'number' && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== Hardfork.Merge) {\n        const hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n        hfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n        prevBlockOrTime = blockOrTime;\n      }\n\n      if (hf.name === hardfork) break;\n    }\n\n    const inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array); // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    // eslint-disable-next-line no-bitwise\n\n    const forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n    return forkhash;\n  }\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n   */\n\n\n  forkHash(_hardfork, genesisHash) {\n    const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n\n    const data = this._getHardfork(hardfork);\n\n    if ( // eslint-disable-next-line no-null/no-null\n    data === null || // eslint-disable-next-line no-null/no-null\n    (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === undefined && (data === null || data === void 0 ? void 0 : data.ttd) === undefined) {\n      const msg = 'No fork hash calculation possible for future hardfork';\n      throw new Error(msg);\n    } // eslint-disable-next-line no-null/no-null\n\n\n    if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== undefined) {\n      return data.forkHash;\n    }\n\n    if (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n    return this._calcForkHash(hardfork, genesisHash);\n  }\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  hardforkForForkHash(forkHash) {\n    const resArray = this.hardforks().filter(hf => hf.forkHash === forkHash); // eslint-disable-next-line no-null/no-null\n\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n  }\n  /**\n   * Sets any missing forkHashes on the passed-in {@link Common} instance\n   * @param common The {@link Common} to set the forkHashes for\n   * @param genesisHash The genesis block hash\n   */\n\n\n  setForkHashes(genesisHash) {\n    var _a;\n\n    for (const hf of this.hardforks()) {\n      const blockOrTime = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n\n      if ( // eslint-disable-next-line no-null/no-null\n      (hf.forkHash === null || hf.forkHash === undefined) && ( // eslint-disable-next-line no-null/no-null\n      blockOrTime !== null && blockOrTime !== undefined || typeof hf.ttd !== 'undefined')) {\n        hf.forkHash = this.forkHash(hf.name, genesisHash);\n      }\n    }\n  }\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n\n\n  genesis() {\n    return this._chainParams.genesis;\n  }\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n\n\n  hardforks() {\n    return this._chainParams.hardforks;\n  }\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n\n\n  bootstrapNodes() {\n    return this._chainParams.bootstrapNodes;\n  }\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n\n\n  dnsNetworks() {\n    return this._chainParams.dnsNetworks;\n  }\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n\n\n  hardfork() {\n    return this._hardfork;\n  }\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n\n\n  chainId() {\n    return BigInt(this._chainParams.chainId);\n  }\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n\n\n  chainName() {\n    return this._chainParams.name;\n  }\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n\n\n  networkId() {\n    return BigInt(this._chainParams.networkId);\n  }\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n\n\n  eips() {\n    return this._eips;\n  }\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a Hardfork.\n   */\n\n\n  consensusType() {\n    const hardfork = this.hardfork();\n    let value;\n\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        value = hfChanges[1].consensus.type;\n      }\n\n      if (hfChanges[0] === hardfork) break;\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n\n    return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;\n  }\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a Hardfork.\n   */\n\n\n  consensusAlgorithm() {\n    const hardfork = this.hardfork();\n    let value;\n\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        value = hfChanges[1].consensus.algorithm;\n      }\n\n      if (hfChanges[0] === hardfork) break;\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n\n    return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;\n  }\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: empty object\n   * clique: period, epoch\n   * casper: empty object\n   *\n   * Note: This value can update along a Hardfork.\n   */\n\n\n  consensusConfig() {\n    var _a;\n\n    const hardfork = this.hardfork();\n    let value;\n\n    for (const hfChanges of this.HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n      }\n\n      if (hfChanges[0] === hardfork) break;\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n\n    return (_a = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a !== void 0 ? _a : {};\n  }\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n\n\n  copy() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\n    copy.removeAllListeners(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n    return copy;\n  }\n\n  static _getInitializedChains(customChains) {\n    const names = {};\n\n    for (const [name, id] of Object.entries(Chain)) {\n      names[id] = name.toLowerCase();\n    }\n\n    const chains = {\n      mainnet,\n      goerli,\n      sepolia\n    };\n\n    if (customChains) {\n      for (const chain of customChains) {\n        const {\n          name\n        } = chain;\n        names[chain.chainId.toString()] = name;\n        chains[name] = chain;\n      }\n    }\n\n    chains.names = names;\n    return chains;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["pkg","EventEmitter","bytesToHex","hexToBytes","uint8ArrayConcat","TypeOutput","intToUint8Array","toType","parseGethGenesis","goerli","mainnet","sepolia","EIPs","Chain","CustomChain","Hardfork","hardforks","HARDFORK_SPECS","buf","crc32Uint8Array","Common","constructor","opts","_customChains","customChains","_a","_chainParams","setChain","chain","DEFAULT_HARDFORK","defaultHardfork","_b","Merge","HARDFORK_CHANGES","map","hf","name","_hardfork","hardfork","undefined","setHardfork","eips","setEIPs","custom","chainParamsOrName","baseChain","standardChainParams","_getChainParams","Object","PolygonMainnet","chainId","networkId","PolygonMumbai","ArbitrumRinkebyTestnet","ArbitrumOne","xDaiChain","OptimisticKovan","Berlin","OptimisticEthereum","Error","fromGethGenesis","genesisJson","genesisHash","mergeForkIdPostMerge","genesisParams","common","setForkHashes","isSupportedChainId","initializedChains","_getInitializedChains","Boolean","names","toString","_chain","length","required","param","block","existing","hfChanges","emit","getHardforkByBlockNumber","_blockNumber","_td","_timestamp","blockNumber","BigInt","td","timestamp","Number","hfs","filter","ttd","mergeIndex","findIndex","doubleTTDHF","slice","hfIndex","stepBack","reverse","hfStartIndex","minTimeStamp","reduce","acc","max","maxTimeStamp","min","setHardforkByBlockNumber","_getHardfork","eip","minHF","gteHardfork","minimumHardfork","requiredEIPs","elem","includes","isActivatedEIP","_eips","topic","value","paramByEIP","paramByHardfork","hfEIPs","valueEIP","v","eipParams","paramByBlock","hardforkIsActiveOnBlock","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","_hardfork1","hardfork2","hardfork1","posHf1","posHf2","index","hardforkTimestamp","eipBlock","String","hardforkTTD","isHardforkBlock","nextHardforkBlockOrTimestamp","currHfTimeOrBlock","nextHf","find","hfTimeOrBlock","nextHfBlock","nextHardforkBlock","isNextHardforkBlock","_calcForkHash","hfUint8Array","Uint8Array","prevBlockOrTime","blockOrTime","hfBlockUint8Array","padStart","inputUint8Array","forkhash","forkHash","data","msg","hardforkForForkHash","resArray","genesis","bootstrapNodes","dnsNetworks","chainName","consensusType","consensus","type","consensusAlgorithm","algorithm","consensusConfig","copy","assign","create","getPrototypeOf","removeAllListeners","id","entries","toLowerCase","chains"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/common/common.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter, bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport type { Numbers } from 'web3-types';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport type { ConsensusAlgorithm, ConsensusType } from './enums.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\n\nimport type {\n\tBootstrapNodeConfig,\n\tCasperConfig,\n\tChainConfig,\n\tChainName,\n\tChainsConfig,\n\tCliqueConfig,\n\tCommonOpts,\n\tCustomCommonOpts,\n\tEthashConfig,\n\tGenesisBlockConfig,\n\tGethConfigOpts,\n\tHardforkConfig,\n} from './types.js';\n\nconst { buf: crc32Uint8Array } = pkg;\n\ntype HardforkSpecKeys = keyof typeof HARDFORK_SPECS;\ntype HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys];\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n\tpublic readonly DEFAULT_HARDFORK: string | Hardfork;\n\n\tprivate _chainParams: ChainConfig;\n\tprivate _hardfork: string | Hardfork;\n\tprivate _eips: number[] = [];\n\tprivate readonly _customChains: ChainConfig[];\n\n\tprivate readonly HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][];\n\n\t/**\n\t * Creates a {@link Common} object for a custom chain, based on a standard one.\n\t *\n\t * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n\t * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n\t *\n\t * ```javascript\n\t * Common.custom({chainId: 123})\n\t * ```\n\t *\n\t * There are also selected supported custom chains which can be initialized by using one of the\n\t * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n\t *\n\t * ```javascript\n\t * Common.custom(CustomChains.MaticMumbai)\n\t * ```\n\t *\n\t * Note that these supported custom chains only provide some base parameters (usually the chain and\n\t * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n\t * the `web3-utils/tx` library to a Layer-2 chain).\n\t *\n\t * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n\t * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n\t */\n\tpublic static custom(\n\t\tchainParamsOrName: Partial<ChainConfig> | CustomChain,\n\t\topts: CustomCommonOpts = {},\n\t): Common {\n\t\tconst baseChain = opts.baseChain ?? 'mainnet';\n\t\tconst standardChainParams = { ...Common._getChainParams(baseChain) };\n\t\tstandardChainParams.name = 'custom-chain';\n\n\t\tif (typeof chainParamsOrName !== 'string') {\n\t\t\treturn new Common({\n\t\t\t\tchain: {\n\t\t\t\t\t...standardChainParams,\n\t\t\t\t\t...chainParamsOrName,\n\t\t\t\t},\n\t\t\t\t...opts,\n\t\t\t});\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMainnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMainnet,\n\t\t\t\t\tchainId: 137,\n\t\t\t\t\tnetworkId: 137,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMumbai) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMumbai,\n\t\t\t\t\tchainId: 80001,\n\t\t\t\t\tnetworkId: 80001,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumRinkebyTestnet,\n\t\t\t\t\tchainId: 421611,\n\t\t\t\t\tnetworkId: 421611,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumOne) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumOne,\n\t\t\t\t\tchainId: 42161,\n\t\t\t\t\tnetworkId: 42161,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.xDaiChain) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.xDaiChain,\n\t\t\t\t\tchainId: 100,\n\t\t\t\t\tnetworkId: 100,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticKovan) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticKovan,\n\t\t\t\t\tchainId: 69,\n\t\t\t\t\tnetworkId: 69,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticEthereum) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticEthereum,\n\t\t\t\t\tchainId: 10,\n\t\t\t\t\tnetworkId: 10,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Custom chain ${chainParamsOrName} not supported`);\n\t}\n\n\t/**\n\t * Static method to load and set common from a geth genesis json\n\t * @param genesisJson json of geth configuration\n\t * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n\t * @returns Common\n\t */\n\tpublic static fromGethGenesis(\n\t\tgenesisJson: any,\n\t\t{ chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts,\n\t): Common {\n\t\tconst genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n\t\tconst common = new Common({\n\t\t\tchain: genesisParams.name ?? 'custom',\n\t\t\tcustomChains: [genesisParams],\n\t\t\teips,\n\t\t\thardfork: hardfork ?? genesisParams.hardfork,\n\t\t});\n\t\tif (genesisHash !== undefined) {\n\t\t\tcommon.setForkHashes(genesisHash);\n\t\t}\n\t\treturn common;\n\t}\n\n\t/**\n\t * Static method to determine if a {@link chainId} is supported as a standard chain\n\t * @param chainId bigint id (`1`) of a standard chain\n\t * @returns boolean\n\t */\n\tpublic static isSupportedChainId(chainId: bigint): boolean {\n\t\tconst initializedChains = this._getInitializedChains();\n\t\treturn Boolean((initializedChains.names as ChainName)[chainId.toString()]);\n\t}\n\n\tprivate static _getChainParams(\n\t\t_chain: string | number | Chain | bigint,\n\t\tcustomChains?: ChainConfig[],\n\t): ChainConfig {\n\t\tlet chain = _chain;\n\t\tconst initializedChains = this._getInitializedChains(customChains);\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint') {\n\t\t\tchain = chain.toString();\n\n\t\t\tif ((initializedChains.names as ChainName)[chain]) {\n\t\t\t\tconst name: string = (initializedChains.names as ChainName)[chain];\n\t\t\t\treturn initializedChains[name] as ChainConfig;\n\t\t\t}\n\n\t\t\tthrow new Error(`Chain with ID ${chain} not supported`);\n\t\t}\n\n\t\tif (initializedChains[chain] !== undefined) {\n\t\t\treturn initializedChains[chain] as ChainConfig;\n\t\t}\n\n\t\tthrow new Error(`Chain with name ${chain} not supported`);\n\t}\n\n\tpublic constructor(opts: CommonOpts) {\n\t\tsuper();\n\t\tthis._customChains = opts.customChains ?? [];\n\t\tthis._chainParams = this.setChain(opts.chain);\n\t\tthis.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Merge;\n\t\t// Assign hardfork changes in the sequence of the applied hardforks\n\t\tthis.HARDFORK_CHANGES = this.hardforks().map(hf => [\n\t\t\thf.name as HardforkSpecKeys,\n\t\t\tHARDFORK_SPECS[hf.name as HardforkSpecKeys],\n\t\t]);\n\t\tthis._hardfork = this.DEFAULT_HARDFORK;\n\t\tif (opts.hardfork !== undefined) {\n\t\t\tthis.setHardfork(opts.hardfork);\n\t\t}\n\t\tif (opts.eips) {\n\t\t\tthis.setEIPs(opts.eips);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the chain\n\t * @param chain String ('mainnet') or Number (1) chain representation.\n\t *              Or, a Dictionary of chain parameters for a private network.\n\t * @returns The dictionary with parameters set as chain\n\t */\n\tpublic setChain(chain: string | number | Chain | bigint | object): ChainConfig {\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n\t\t\tthis._chainParams = Common._getChainParams(chain, this._customChains);\n\t\t} else if (typeof chain === 'object') {\n\t\t\tif (this._customChains.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Chain must be a string, number, or bigint when initialized with customChains passed in',\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\t\t\tfor (const param of required) {\n\t\t\t\tif (!(param in chain)) {\n\t\t\t\t\tthrow new Error(`Missing required chain parameter: ${param}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._chainParams = chain as ChainConfig;\n\t\t} else {\n\t\t\tthrow new Error('Wrong input format');\n\t\t}\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tif (hf.block === undefined) {\n\t\t\t\tthrow new Error(`Hardfork cannot have undefined block number`);\n\t\t\t}\n\t\t}\n\t\treturn this._chainParams;\n\t}\n\n\t/**\n\t * Sets the hardfork to get params for\n\t * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n\t */\n\tpublic setHardfork(hardfork: string | Hardfork): void {\n\t\tlet existing = false;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif (hfChanges[0] === hardfork) {\n\t\t\t\tif (this._hardfork !== hardfork) {\n\t\t\t\t\tthis._hardfork = hardfork;\n\t\t\t\t\tthis.emit('hardforkChanged', hardfork);\n\t\t\t\t}\n\t\t\t\texisting = true;\n\t\t\t}\n\t\t}\n\t\tif (!existing) {\n\t\t\tthrow new Error(`Hardfork with name ${hardfork} not supported`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n\t * @param timestamp: timestamp in seconds at which block was/is to be minted\n\t * @returns The name of the HF\n\t */\n\tpublic getHardforkByBlockNumber(\n\t\t_blockNumber: Numbers,\n\t\t_td?: Numbers,\n\t\t_timestamp?: Numbers,\n\t): string {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst td = toType(_td, TypeOutput.BigInt);\n\t\tconst timestamp = toType(_timestamp, TypeOutput.Number);\n\n\t\t// Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n\t\tconst hfs = this.hardforks().filter(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block !== null ||\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.ttd !== null && hf.ttd !== undefined) ||\n\t\t\t\thf.timestamp !== undefined,\n\t\t);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tconst doubleTTDHF = hfs\n\t\t\t.slice(mergeIndex + 1)\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tif (doubleTTDHF >= 0) {\n\t\t\tthrow Error(`More than one merge hardforks found with ttd specified`);\n\t\t}\n\n\t\t// Find the first hardfork that has a block number greater than `blockNumber`\n\t\t// (skips the merge hardfork since it cannot have a block number specified).\n\t\t// If timestamp is not provided, it also skips timestamps hardforks to continue\n\t\t// discovering/checking number hardforks.\n\t\tlet hfIndex = hfs.findIndex(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.block !== null && hf.block > blockNumber) ||\n\t\t\t\t(timestamp !== undefined && Number(hf.timestamp) > timestamp),\n\t\t);\n\n\t\tif (hfIndex === -1) {\n\t\t\t// all hardforks apply, set hfIndex to the last one as that's the candidate\n\t\t\thfIndex = hfs.length;\n\t\t} else if (hfIndex === 0) {\n\t\t\t// cannot have a case where a block number is before all applied hardforks\n\t\t\t// since the chain has to start with a hardfork\n\t\t\tthrow Error('Must have at least one hardfork at block 0');\n\t\t}\n\n\t\t// If timestamp is not provided, we need to rollback to the last hf with block or ttd\n\t\tif (timestamp === undefined) {\n\t\t\tconst stepBack = hfs\n\t\t\t\t.slice(0, hfIndex)\n\t\t\t\t.reverse()\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t.findIndex(hf => hf.block !== null || hf.ttd !== undefined);\n\t\t\thfIndex -= stepBack;\n\t\t}\n\t\t// Move hfIndex one back to arrive at candidate hardfork\n\t\thfIndex -= 1;\n\n\t\t// If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n\t\t// hardforks. so it will now be needed to rollback\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n\t\t\t// We're on the merge hardfork.  Let's check the TTD\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tif (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {\n\t\t\t\t// Merge ttd greater than current td so we're on hardfork before merge\n\t\t\t\thfIndex -= 1;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t} else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n\t\t\tif (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Maximum HF determined by total difficulty is lower than the block number HF',\n\t\t\t\t);\n\t\t\t} else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) <= td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'HF determined by block number is lower than the minimum total difficulty HF',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst hfStartIndex = hfIndex;\n\t\t// Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n\t\t// This won't anyway be the case with Merge hfs\n\t\tfor (; hfIndex < hfs.length - 1; hfIndex += 1) {\n\t\t\t// break out if hfIndex + 1 is not scheduled at hfIndex\n\t\t\tif (\n\t\t\t\thfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n\t\t\t\thfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (timestamp) {\n\t\t\tconst minTimeStamp = hfs\n\t\t\t\t.slice(0, hfStartIndex)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) => Math.max(Number(hf.timestamp ?? '0'), acc),\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\tif (minTimeStamp > timestamp) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Maximum HF determined by timestamp is lower than the block number/ttd HF`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst maxTimeStamp = hfs\n\t\t\t\t.slice(hfIndex + 1)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) =>\n\t\t\t\t\t\tMath.min(Number(hf.timestamp ?? timestamp), acc),\n\t\t\t\t\ttimestamp,\n\t\t\t\t);\n\t\t\tif (maxTimeStamp < timestamp) {\n\t\t\t\tthrow Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n\t\t\t}\n\t\t}\n\t\tconst hardfork = hfs[hfIndex];\n\t\treturn hardfork.name;\n\t}\n\n\t/**\n\t * Sets a new hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td\n\t * @param timestamp\n\t * @returns The name of the HF set\n\t */\n\tpublic setHardforkByBlockNumber(\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): string {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\tthis.setHardfork(hardfork);\n\t\treturn hardfork;\n\t}\n\n\t/**\n\t * Internal helper function, returns the params for the given hardfork for the chain set\n\t * @param hardfork Hardfork name\n\t * @returns Dictionary with hardfork params or null if hardfork not on chain\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic _getHardfork(hardfork: string | Hardfork): HardforkConfig | null {\n\t\tconst hfs = this.hardforks();\n\t\tfor (const hf of hfs) {\n\t\t\tif (hf.name === hardfork) return hf;\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the active EIPs\n\t * @param eips\n\t */\n\tpublic setEIPs(eips: number[] = []) {\n\t\tfor (const eip of eips) {\n\t\t\tif (!(eip in EIPs)) {\n\t\t\t\tthrow new Error(`${eip} not supported`);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tconst minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n\t\t\tif (!minHF) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tif (EIPs[eip].requiredEIPs !== undefined) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tfor (const elem of EIPs[eip].requiredEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tif (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t\t\t`${eip} requires EIP ${elem}, but is not included in the EIP list`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._eips = eips;\n\t}\n\n\t/**\n\t * Returns a parameter for the current chain setup\n\t *\n\t * If the parameter is present in an EIP, the EIP always takes precedence.\n\t * Otherwise the parameter if taken from the latest applied HF with\n\t * a change on the respective parameter.\n\t *\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic param(topic: string, name: string): bigint {\n\t\t// TODO: consider the case that different active EIPs\n\t\t// can change the same parameter\n\t\tlet value;\n\t\tfor (const eip of this._eips) {\n\t\t\tvalue = this.paramByEIP(topic, name, eip);\n\t\t\tif (value !== undefined) return value;\n\t\t}\n\t\treturn this.paramByHardfork(topic, name, this._hardfork);\n\t}\n\n\t/**\n\t * Returns the parameter corresponding to a hardfork\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param hardfork Hardfork name\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tlet value = null;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// EIP-referencing HF file (e.g. berlin.json)\n\t\t\tif ('eips' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tconst hfEIPs = hfChanges[1].eips;\n\t\t\t\tfor (const eip of hfEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tconst valueEIP = this.paramByEIP(topic, name, eip);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = typeof valueEIP === 'bigint' ? valueEIP : value;\n\t\t\t\t}\n\t\t\t\t// Parameter-inlining HF file (e.g. istanbul.json)\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic] === undefined) {\n\t\t\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic][name] !== undefined) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = hfChanges[1][topic][name].v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value ?? 0);\n\t}\n\n\t/**\n\t * Returns a parameter corresponding to an EIP\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param eip Number of the EIP\n\t * @returns The value requested or `undefined` if not found\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic paramByEIP(topic: string, name: string, eip: number): bigint | undefined {\n\t\tif (!(eip in EIPs)) {\n\t\t\tthrow new Error(`${eip} not supported`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst eipParams = EIPs[eip];\n\t\tif (!(topic in eipParams)) {\n\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\tif (eipParams[topic][name] === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\tconst value = eipParams[topic][name].v;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value);\n\t}\n\n\t/**\n\t * Returns a parameter for the hardfork active on block number or\n\t * optional provided total difficulty (Merge HF)\n\t * @param topic Parameter topic\n\t * @param name Parameter name\n\t * @param blockNumber Block number\n\t * @param td Total difficulty\n\t *    * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByBlock(\n\t\ttopic: string,\n\t\tname: string,\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): bigint {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\treturn this.paramByHardfork(topic, name, hardfork);\n\t}\n\n\t/**\n\t * Checks if an EIP is activated by either being included in the EIPs\n\t * manually passed in with the {@link CommonOpts.eips} or in a\n\t * hardfork currently being active\n\t *\n\t * Note: this method only works for EIPs being supported\n\t * by the {@link CommonOpts.eips} constructor option\n\t * @param eip\n\t */\n\tpublic isActivatedEIP(eip: number): boolean {\n\t\tif (this.eips().includes(eip)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tif (this.gteHardfork(hf.name) && 'eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif ((hf.eips as number[]).includes(eip)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if set or provided hardfork is active on block number\n\t * @param hardfork Hardfork name or null (for HF set)\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic hardforkIsActiveOnBlock(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork: string | Hardfork | null,\n\t\t_blockNumber: Numbers,\n\t): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfBlock = this.hardforkBlock(hardfork);\n\t\tif (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Alias to hardforkIsActiveOnBlock when hardfork is set\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic activeOnBlock(blockNumber: Numbers): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkIsActiveOnBlock(null, blockNumber);\n\t}\n\n\t/**\n\t * Sequence based check if given or set HF1 is greater than or equal HF2\n\t * @param hardfork1 Hardfork name or null (if set)\n\t * @param hardfork2 Hardfork name\n\t * @param opts Hardfork options\n\t * @returns True if HF1 gte HF2\n\t */\n\tpublic hardforkGteHardfork(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork1: string | Hardfork | null,\n\t\thardfork2: string | Hardfork,\n\t): boolean {\n\t\tconst hardfork1 = _hardfork1 ?? this._hardfork;\n\t\tconst hardforks = this.hardforks();\n\n\t\tlet posHf1 = -1;\n\t\tlet posHf2 = -1;\n\t\tlet index = 0;\n\t\tfor (const hf of hardforks) {\n\t\t\tif (hf.name === hardfork1) posHf1 = index;\n\t\t\tif (hf.name === hardfork2) posHf2 = index;\n\t\t\tindex += 1;\n\t\t}\n\t\treturn posHf1 >= posHf2 && posHf2 !== -1;\n\t}\n\n\t/**\n\t * Alias to hardforkGteHardfork when hardfork is set\n\t * @param hardfork Hardfork name\n\t * @returns True if hardfork set is greater than hardfork provided\n\t */\n\tpublic gteHardfork(hardfork: string | Hardfork): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkGteHardfork(null, hardfork);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this._getHardfork(hardfork)?.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (block === undefined || block === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(block);\n\t}\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst timestamp = this._getHardfork(hardfork)?.timestamp;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (timestamp === undefined || timestamp === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(timestamp);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for eip\n\t * @param eip EIP number\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic eipBlock(eip: number): bigint | null {\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\tif ('eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tif (hf.eips.includes(eip)) {\n\t\t\t\t\treturn this.hardforkBlock(\n\t\t\t\t\t\ttypeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Total difficulty or null if no set\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTTD(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst ttd = this._getHardfork(hardfork)?.ttd;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (ttd === undefined || ttd === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(ttd);\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork (given or set) change block\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this.hardforkBlock(hardfork);\n\t\treturn typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block timestamp, number or null if not available\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlockOrTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfs = this.hardforks();\n\t\tlet hfIndex = hfs.findIndex(hf => hf.name === hardfork);\n\t\t// If the current hardfork is merge, go one behind as merge hf is not part of these\n\t\t// calcs even if the merge hf block is set\n\t\tif (hardfork === Hardfork.Merge) {\n\t\t\thfIndex -= 1;\n\t\t}\n\t\t// Hardfork not found\n\t\tif (hfIndex < 0) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tlet currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n\t\tcurrHfTimeOrBlock =\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tcurrHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n\t\t\t\t? Number(currHfTimeOrBlock)\n\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null;\n\n\t\tconst nextHf = hfs.slice(hfIndex + 1).find(hf => {\n\t\t\tlet hfTimeOrBlock = hf.timestamp ?? hf.block;\n\t\t\thfTimeOrBlock =\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null && hfTimeOrBlock !== undefined\n\t\t\t\t\t? Number(hfTimeOrBlock)\n\t\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null;\n\t\t\treturn (\n\t\t\t\thf.name !== Hardfork.Merge &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null &&\n\t\t\t\thfTimeOrBlock !== undefined &&\n\t\t\t\thfTimeOrBlock !== currHfTimeOrBlock\n\t\t\t);\n\t\t});\n\t\t// If no next hf found with valid block or timestamp return null\n\t\tif (nextHf === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextHfBlock = nextHf.timestamp ?? nextHf.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (nextHfBlock === null || nextHfBlock === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\treturn BigInt(nextHfBlock);\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if not available\n\t * @deprecated\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tlet hfBlock = this.hardforkBlock(hardfork);\n\t\t// If this is a merge hardfork with block not set, then we fallback to previous hardfork\n\t\t// to find the nextHardforkBlock\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null && hardfork === Hardfork.Merge) {\n\t\t\tconst hfs = this.hardforks();\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\t\tif (mergeIndex < 0) {\n\t\t\t\tthrow Error(`Merge hardfork should have been found`);\n\t\t\t}\n\t\t\thfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\t// Next fork block number or null if none available\n\t\t// Logic: if accumulator is still null and on the first occurrence of\n\t\t// a block greater than the current hfBlock set the accumulator,\n\t\t// pass on the accumulator as the final result from this time on\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n\t\tconst nextHfBlock = this.hardforks().reduce((acc: bigint | null, hf: HardforkConfig) => {\n\t\t\t// We need to ignore the merge block in our next hardfork calc\n\t\t\tconst block = BigInt(\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block,\n\t\t\t);\n\t\t\t// Typescript can't seem to follow that the hfBlock is not null at this point\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn block > hfBlock! && acc === null ? block : acc;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t}, null);\n\t\treturn nextHfBlock;\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork change block following the hardfork given or set\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isNextHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\tconst nextHardforkBlock = this.nextHardforkBlock(hardfork);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n\t}\n\n\t/**\n\t * Internal helper function to calculate a fork hash\n\t * @param hardfork Hardfork name\n\t * @param genesisHash Genesis block hash of the chain\n\t * @returns Fork hash as hex string\n\t */\n\tpublic _calcForkHash(hardfork: string | Hardfork, genesisHash: Uint8Array) {\n\t\tlet hfUint8Array = new Uint8Array();\n\t\tlet prevBlockOrTime = 0;\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst { block, timestamp, name } = hf;\n\t\t\t// Timestamp to be used for timestamp based hfs even if we may bundle\n\t\t\t// block number with them retrospectively\n\t\t\tlet blockOrTime = timestamp ?? block;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n\n\t\t\t// Skip for chainstart (0), not applied HFs (null) and\n\t\t\t// when already applied on same blockOrTime HFs\n\t\t\t// and on the merge since forkhash doesn't change on merge hf\n\t\t\tif (\n\t\t\t\ttypeof blockOrTime === 'number' &&\n\t\t\t\tblockOrTime !== 0 &&\n\t\t\t\tblockOrTime !== prevBlockOrTime &&\n\t\t\t\tname !== Hardfork.Merge\n\t\t\t) {\n\t\t\t\tconst hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n\t\t\t\thfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n\t\t\t\tprevBlockOrTime = blockOrTime;\n\t\t\t}\n\n\t\t\tif (hf.name === hardfork) break;\n\t\t}\n\t\tconst inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);\n\n\t\t// CRC32 delivers result as signed (negative) 32-bit integer,\n\t\t// convert to hex string\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n\t\treturn forkhash;\n\t}\n\n\t/**\n\t * Returns an eth/64 compliant fork hash (EIP-2124)\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n\t */\n\tpublic forkHash(_hardfork?: string | Hardfork, genesisHash?: Uint8Array): string {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst data = this._getHardfork(hardfork);\n\t\tif (\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tdata === null ||\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t(data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)\n\t\t) {\n\t\t\tconst msg = 'No fork hash calculation possible for future hardfork';\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (data?.forkHash !== null && data?.forkHash !== undefined) {\n\t\t\treturn data.forkHash;\n\t\t}\n\t\tif (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n\t\treturn this._calcForkHash(hardfork, genesisHash);\n\t}\n\n\t/**\n\t *\n\t * @param forkHash Fork hash as a hex string\n\t * @returns Array with hardfork data (name, block, forkHash)\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkForForkHash(forkHash: string): HardforkConfig | null {\n\t\tconst resArray = this.hardforks().filter((hf: HardforkConfig) => hf.forkHash === forkHash);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n\t}\n\n\t/**\n\t * Sets any missing forkHashes on the passed-in {@link Common} instance\n\t * @param common The {@link Common} to set the forkHashes for\n\t * @param genesisHash The genesis block hash\n\t */\n\tpublic setForkHashes(genesisHash: Uint8Array) {\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst blockOrTime = hf.timestamp ?? hf.block;\n\t\t\tif (\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.forkHash === null || hf.forkHash === undefined) &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t((blockOrTime !== null && blockOrTime !== undefined) ||\n\t\t\t\t\ttypeof hf.ttd !== 'undefined')\n\t\t\t) {\n\t\t\t\thf.forkHash = this.forkHash(hf.name, genesisHash);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Genesis parameters of the current chain\n\t * @returns Genesis dictionary\n\t */\n\tpublic genesis(): GenesisBlockConfig {\n\t\treturn this._chainParams.genesis;\n\t}\n\n\t/**\n\t * Returns the hardforks for current chain\n\t * @returns {Array} Array with arrays of hardforks\n\t */\n\tpublic hardforks(): HardforkConfig[] {\n\t\treturn this._chainParams.hardforks;\n\t}\n\n\t/**\n\t * Returns bootstrap nodes for the current chain\n\t * @returns {Dictionary} Dict with bootstrap nodes\n\t */\n\tpublic bootstrapNodes(): BootstrapNodeConfig[] | undefined {\n\t\treturn this._chainParams.bootstrapNodes;\n\t}\n\n\t/**\n\t * Returns DNS networks for the current chain\n\t * @returns {String[]} Array of DNS ENR urls\n\t */\n\tpublic dnsNetworks(): string[] {\n\t\treturn this._chainParams.dnsNetworks!;\n\t}\n\n\t/**\n\t * Returns the hardfork set\n\t * @returns Hardfork name\n\t */\n\tpublic hardfork(): string | Hardfork {\n\t\treturn this._hardfork;\n\t}\n\n\t/**\n\t * Returns the Id of current chain\n\t * @returns chain Id\n\t */\n\tpublic chainId(): bigint {\n\t\treturn BigInt(this._chainParams.chainId);\n\t}\n\n\t/**\n\t * Returns the name of current chain\n\t * @returns chain name (lower case)\n\t */\n\tpublic chainName(): string {\n\t\treturn this._chainParams.name;\n\t}\n\n\t/**\n\t * Returns the Id of current network\n\t * @returns network Id\n\t */\n\tpublic networkId(): bigint {\n\t\treturn BigInt(this._chainParams.networkId);\n\t}\n\n\t/**\n\t * Returns the active EIPs\n\t * @returns List of EIPs\n\t */\n\tpublic eips(): number[] {\n\t\treturn this._eips;\n\t}\n\n\t/**\n\t * Returns the consensus type of the network\n\t * Possible values: \"pow\"|\"poa\"|\"pos\"\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusType(): string | ConsensusType {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.type;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? this._chainParams.consensus.type;\n\t}\n\n\t/**\n\t * Returns the concrete consensus implementation\n\t * algorithm or protocol for the network\n\t * e.g. \"ethash\" for \"pow\" consensus type,\n\t * \"clique\" for \"poa\" consensus type or\n\t * \"casper\" for \"pos\" consensus type.\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusAlgorithm(): string | ConsensusAlgorithm {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.algorithm;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? (this._chainParams.consensus.algorithm as ConsensusAlgorithm);\n\t}\n\n\t/**\n\t * Returns a dictionary with consensus configuration\n\t * parameters based on the consensus algorithm\n\t *\n\t * Expected returns (parameters must be present in\n\t * the respective chain json files):\n\t *\n\t * ethash: empty object\n\t * clique: period, epoch\n\t * casper: empty object\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// The config parameter is named after the respective consensus algorithm\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn (\n\t\t\tvalue ??\n\t\t\tthis._chainParams.consensus[this.consensusAlgorithm() as ConsensusAlgorithm] ??\n\t\t\t{}\n\t\t);\n\t}\n\n\t/**\n\t * Returns a deep copy of this {@link Common} instance.\n\t */\n\tpublic copy(): Common {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n\t\tconst copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\tcopy.removeAllListeners();\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn copy;\n\t}\n\n\tpublic static _getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {\n\t\tconst names: ChainName = {};\n\t\tfor (const [name, id] of Object.entries(Chain)) {\n\t\t\tnames[id] = name.toLowerCase();\n\t\t}\n\t\tconst chains = { mainnet, goerli, sepolia } as ChainsConfig;\n\t\tif (customChains) {\n\t\t\tfor (const chain of customChains) {\n\t\t\t\tconst { name } = chain;\n\t\t\t\tnames[chain.chainId.toString()] = name;\n\t\t\t\tchains[name] = chain;\n\t\t\t}\n\t\t}\n\t\tchains.names = names;\n\t\treturn chains;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}