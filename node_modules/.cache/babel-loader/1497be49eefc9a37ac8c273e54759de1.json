{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNullish = exports.compareBlockNumbers = exports.isTopicInBloom = exports.isTopic = exports.isContractAddressInBloom = exports.isUserEthereumAddressInBloom = exports.isInBloom = exports.isBloom = exports.isAddress = exports.checkAddressCheckSum = exports.isHex = exports.isHexStrict = void 0;\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_types_1 = require(\"web3-types\");\n/**\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\n\nexports.isHexStrict = web3_validator_1.isHexStrict;\n/**\n * returns true if input is a hexstring, number or bigint\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isHex = web3_validator_1.isHex;\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.checkAddressCheckSum = web3_validator_1.checkAddressCheckSum;\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isAddress = web3_validator_1.isAddress;\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isBloom = web3_validator_1.isBloom;\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isInBloom = web3_validator_1.isInBloom;\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isUserEthereumAddressInBloom = web3_validator_1.isUserEthereumAddressInBloom;\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isContractAddressInBloom = web3_validator_1.isContractAddressInBloom;\n/**\n * Checks if its a valid topic\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isTopic = web3_validator_1.isTopic;\n/**\n * Returns true if the topic is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\n\nexports.isTopicInBloom = web3_validator_1.isTopicInBloom;\n/**\n * Compares between block A and block B\n * @param blockA - Block number or string\n * @param blockB - Block number or string\n *\n * @returns - Returns -1 if a \\< b, returns 1 if a \\> b and returns 0 if a == b\n *\n * @example\n * ```ts\n * console.log(web3.utils.compareBlockNumbers('latest', 'pending'));\n * > -1\n *\n * console.log(web3.utils.compareBlockNumbers(12, 11));\n * > 1\n * ```\n */\n\nconst compareBlockNumbers = (blockA, blockB) => {\n  const isABlockTag = typeof blockA === 'string' && (0, web3_validator_1.isBlockTag)(blockA);\n  const isBBlockTag = typeof blockB === 'string' && (0, web3_validator_1.isBlockTag)(blockB);\n\n  if (blockA === blockB || (blockA === 'earliest' || blockA === 0) && (blockB === 'earliest' || blockB === 0) // only exception compare blocktag with number\n  ) {\n    return 0;\n  }\n\n  if (blockA === 'earliest' && blockB > 0) {\n    return -1;\n  }\n\n  if (blockB === 'earliest' && blockA > 0) {\n    return 1;\n  }\n\n  if (isABlockTag && isBBlockTag) {\n    // Increasing order:  earliest, finalized , safe, latest, pending\n    const tagsOrder = {\n      [web3_types_1.BlockTags.EARLIEST]: 1,\n      [web3_types_1.BlockTags.FINALIZED]: 2,\n      [web3_types_1.BlockTags.SAFE]: 3,\n      [web3_types_1.BlockTags.LATEST]: 4,\n      [web3_types_1.BlockTags.PENDING]: 5\n    };\n\n    if (tagsOrder[blockA] < tagsOrder[blockB]) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (isABlockTag && !isBBlockTag || !isABlockTag && isBBlockTag) {\n    throw new web3_errors_1.InvalidBlockError('Cannot compare blocktag with provided non-blocktag input.');\n  }\n\n  const bigIntA = BigInt(blockA);\n  const bigIntB = BigInt(blockB);\n\n  if (bigIntA < bigIntB) {\n    return -1;\n  }\n\n  if (bigIntA === bigIntB) {\n    return 0;\n  }\n\n  return 1;\n};\n\nexports.compareBlockNumbers = compareBlockNumbers;\nexports.isNullish = web3_validator_1.isNullish;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AACA;;AAcA;AAEA;;;;;AAGaA,sBAAcC,4BAAd;AAEb;;;;;;AAKaD,gBAAQC,sBAAR;AAEb;;;;;;AAKaD,+BAAuBC,qCAAvB;AAEb;;;;;;AAKaD,oBAAYC,0BAAZ;AAEb;;;;;;;AAMaD,kBAAUC,wBAAV;AAEb;;;;;;;AAMaD,oBAAYC,0BAAZ;AAEb;;;;;;AAKaD,uCAA+BC,6CAA/B;AAEb;;;;;;;AAMaD,mCAA2BC,yCAA3B;AAEb;;;;;;AAKaD,kBAAUC,wBAAV;AAEb;;;;;;;AAMaD,yBAAiBC,+BAAjB;AAEb;;;;;;;;;;;;;;;;;AAgBO,MAAMC,mBAAmB,GAAG,CAACC,MAAD,EAA2BC,MAA3B,KAAuD;EACzF,MAAMC,WAAW,GAAG,OAAOF,MAAP,KAAkB,QAAlB,IAA8B,iCAAWA,MAAX,CAAlD;EACA,MAAMG,WAAW,GAAG,OAAOF,MAAP,KAAkB,QAAlB,IAA8B,iCAAWA,MAAX,CAAlD;;EAEA,IACCD,MAAM,KAAKC,MAAX,IACC,CAACD,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,CAArC,MAA4CC,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,CAAhF,CAFF,CAEsF;EAFtF,EAGE;IACD,OAAO,CAAP;EACA;;EACD,IAAID,MAAM,KAAK,UAAX,IAAyBC,MAAM,GAAG,CAAtC,EAAyC;IACxC,OAAO,CAAC,CAAR;EACA;;EACD,IAAIA,MAAM,KAAK,UAAX,IAAyBD,MAAM,GAAG,CAAtC,EAAyC;IACxC,OAAO,CAAP;EACA;;EAED,IAAIE,WAAW,IAAIC,WAAnB,EAAgC;IAC/B;IACA,MAAMC,SAAS,GAAG;MACjB,CAACC,uBAAUC,QAAX,GAAgC,CADf;MAEjB,CAACD,uBAAUE,SAAX,GAAiC,CAFhB;MAGjB,CAACF,uBAAUG,IAAX,GAA4B,CAHX;MAIjB,CAACH,uBAAUI,MAAX,GAA8B,CAJb;MAKjB,CAACJ,uBAAUK,OAAX,GAA+B;IALd,CAAlB;;IAQA,IAAIN,SAAS,CAACJ,MAAD,CAAT,GAAoBI,SAAS,CAACH,MAAD,CAAjC,EAA2C;MAC1C,OAAO,CAAC,CAAR;IACA;;IAED,OAAO,CAAP;EACA;;EACD,IAAKC,WAAW,IAAI,CAACC,WAAjB,IAAkC,CAACD,WAAD,IAAgBC,WAAtD,EAAoE;IACnE,MAAM,IAAIQ,+BAAJ,CAAsB,2DAAtB,CAAN;EACA;;EAED,MAAMC,OAAO,GAAGC,MAAM,CAACb,MAAD,CAAtB;EACA,MAAMc,OAAO,GAAGD,MAAM,CAACZ,MAAD,CAAtB;;EAEA,IAAIW,OAAO,GAAGE,OAAd,EAAuB;IACtB,OAAO,CAAC,CAAR;EACA;;EACD,IAAIF,OAAO,KAAKE,OAAhB,EAAyB;IACxB,OAAO,CAAP;EACA;;EACD,OAAO,CAAP;AACA,CA/CM;;AAAMjB,8BAAmBE,mBAAnB;AAiDAF,oBAAYC,0BAAZ","names":["exports","web3_validator_1","compareBlockNumbers","blockA","blockB","isABlockTag","isBBlockTag","tagsOrder","web3_types_1","EARLIEST","FINALIZED","SAFE","LATEST","PENDING","web3_errors_1","bigIntA","BigInt","bigIntB"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/validation.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { InvalidBlockError } from 'web3-errors';\nimport {\n\tcheckAddressCheckSum as checkAddressCheckSumValidator,\n\tisAddress as isAddressValidator,\n\tisBlockTag,\n\tisBloom as isBloomValidator,\n\tisContractAddressInBloom as isContractAddressInBloomValidator,\n\tisHex as isHexValidator,\n\tisHexStrict as isHexStrictValidator,\n\tisInBloom as isInBloomValidator,\n\tisNullish as isNullishValidator,\n\tisTopic as isTopicValidator,\n\tisTopicInBloom as isTopicInBloomValidator,\n\tisUserEthereumAddressInBloom as isUserEthereumAddressInBloomValidator,\n} from 'web3-validator';\nimport { BlockNumberOrTag, BlockTags } from 'web3-types';\n\n/**\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isHexStrict = isHexStrictValidator;\n\n/**\n * returns true if input is a hexstring, number or bigint\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isHex = isHexValidator;\n\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const checkAddressCheckSum = checkAddressCheckSumValidator;\n\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isAddress = isAddressValidator;\n\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isBloom = isBloomValidator;\n\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isInBloom = isInBloomValidator;\n\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isUserEthereumAddressInBloom = isUserEthereumAddressInBloomValidator;\n\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isContractAddressInBloom = isContractAddressInBloomValidator;\n\n/**\n * Checks if its a valid topic\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isTopic = isTopicValidator;\n\n/**\n * Returns true if the topic is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isTopicInBloom = isTopicInBloomValidator;\n\n/**\n * Compares between block A and block B\n * @param blockA - Block number or string\n * @param blockB - Block number or string\n *\n * @returns - Returns -1 if a \\< b, returns 1 if a \\> b and returns 0 if a == b\n *\n * @example\n * ```ts\n * console.log(web3.utils.compareBlockNumbers('latest', 'pending'));\n * > -1\n *\n * console.log(web3.utils.compareBlockNumbers(12, 11));\n * > 1\n * ```\n */\nexport const compareBlockNumbers = (blockA: BlockNumberOrTag, blockB: BlockNumberOrTag) => {\n\tconst isABlockTag = typeof blockA === 'string' && isBlockTag(blockA);\n\tconst isBBlockTag = typeof blockB === 'string' && isBlockTag(blockB);\n\n\tif (\n\t\tblockA === blockB ||\n\t\t((blockA === 'earliest' || blockA === 0) && (blockB === 'earliest' || blockB === 0)) // only exception compare blocktag with number\n\t) {\n\t\treturn 0;\n\t}\n\tif (blockA === 'earliest' && blockB > 0) {\n\t\treturn -1;\n\t}\n\tif (blockB === 'earliest' && blockA > 0) {\n\t\treturn 1;\n\t}\n\n\tif (isABlockTag && isBBlockTag) {\n\t\t// Increasing order:  earliest, finalized , safe, latest, pending\n\t\tconst tagsOrder = {\n\t\t\t[BlockTags.EARLIEST as string]: 1,\n\t\t\t[BlockTags.FINALIZED as string]: 2,\n\t\t\t[BlockTags.SAFE as string]: 3,\n\t\t\t[BlockTags.LATEST as string]: 4,\n\t\t\t[BlockTags.PENDING as string]: 5,\n\t\t};\n\n\t\tif (tagsOrder[blockA] < tagsOrder[blockB]) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\tif ((isABlockTag && !isBBlockTag) || (!isABlockTag && isBBlockTag)) {\n\t\tthrow new InvalidBlockError('Cannot compare blocktag with provided non-blocktag input.');\n\t}\n\n\tconst bigIntA = BigInt(blockA);\n\tconst bigIntB = BigInt(blockB);\n\n\tif (bigIntA < bigIntB) {\n\t\treturn -1;\n\t}\n\tif (bigIntA === bigIntB) {\n\t\treturn 0;\n\t}\n\treturn 1;\n};\n\nexport const isNullish = isNullishValidator;\n"]},"metadata":{},"sourceType":"script"}