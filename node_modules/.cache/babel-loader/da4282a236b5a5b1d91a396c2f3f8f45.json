{"ast":null,"code":"import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js'; // HMAC (RFC 2104)\n\nexport class HMAC extends Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen); // blockLen can be bigger than outputLen\n\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n\n    this.iHash.update(pad); // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n\n    this.oHash = hash.create(); // Undo internal XOR && apply outer XOR\n\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n\n  update(buf) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n\n  digestInto(out) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\n\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\n\nhmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"mappings":"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","names":["assert","Hash","toBytes","HMAC","constructor","hash","_key","key","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","buf","exists","digestInto","out","bytes","finished","destroy","_cloneInto","to","Object","getPrototypeOf","destroyed","hmac","message"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/hashes/src/hmac.ts"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n"]},"metadata":{},"sourceType":"module"}