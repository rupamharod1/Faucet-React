{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signTypedData = exports.createAccessList = exports.getFeeHistory = exports.getProof = exports.getChainId = exports.getLogs = exports.estimateGas = exports.call = exports.signTransaction = exports.sign = exports.sendSignedTransaction = exports.sendTransaction = exports.getTransactionCount = exports.getTransactionReceipt = exports.getTransactionFromBlock = exports.getPendingTransactions = exports.getTransaction = exports.getUncle = exports.getBlockUncleCount = exports.getBlockTransactionCount = exports.getBlock = exports.getCode = exports.getStorageAt = exports.getBalance = exports.getBlockNumber = exports.getGasPrice = exports.getHashRate = exports.isMining = exports.getCoinbase = exports.isSyncing = exports.getProtocolVersion = void 0; // Disabling because returnTypes must be last param to match 1.x params\n\n/* eslint-disable default-param-last */\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_core_1 = require(\"web3-core\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\n\nconst decode_signed_transaction_js_1 = require(\"./utils/decode_signed_transaction.js\");\n\nconst schemas_js_1 = require(\"./schemas.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst transaction_builder_js_1 = require(\"./utils/transaction_builder.js\");\n\nconst format_transaction_js_1 = require(\"./utils/format_transaction.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst try_send_transaction_js_1 = require(\"./utils/try_send_transaction.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst wait_for_transaction_receipt_js_1 = require(\"./utils/wait_for_transaction_receipt.js\");\n\nconst constants_js_1 = require(\"./constants.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst send_tx_helper_js_1 = require(\"./utils/send_tx_helper.js\");\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\n\nconst getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n\nexports.getProtocolVersion = getProtocolVersion; // TODO Add returnFormat parameter\n\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nconst isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n\nexports.isSyncing = isSyncing; // TODO consider adding returnFormat parameter (to format address as bytes)\n\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nconst getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n\nexports.getCoinbase = getCoinbase;\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nconst isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getMining(web3Context.requestManager);\n});\n\nexports.isMining = isMining;\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getHashRate(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getHashRate = getHashRate;\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getGasPrice = getGasPrice;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getBlockNumber = getBlockNumber;\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getBalance(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getBalance = getBalance;\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getStorageAt(web3Context, address, storageSlot) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, storageSlot, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n\nexports.getStorageAt = getStorageAt;\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getCode(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n\nexports.getCode = getCode;\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n  });\n}\n\nexports.getBlock = getBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getBlockTransactionCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getBlockTransactionCount = getBlockTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getBlockUncleCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getBlockUncleCount = getBlockUncleCount;\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getUncle(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, uncleIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n  });\n}\n\nexports.getUncle = getUncle;\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n\nexports.getTransaction = getTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => (0, format_transaction_js_1.formatTransaction)(transaction, returnFormat, {\n      fillInputAndData: true\n    }));\n  });\n}\n\nexports.getPendingTransactions = getPendingTransactions;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getTransactionFromBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, transactionIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n\nexports.getTransactionFromBlock = getTransactionFromBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, response, returnFormat);\n  });\n}\n\nexports.getTransactionReceipt = getTransactionReceipt;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getTransactionCount(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.getTransactionCount = getTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction sendTransaction(web3Context, transaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transactionFormatted = (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, transaction), {\n          from: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('from', web3Context, transaction),\n          to: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('to', web3Context, transaction)\n        }), web3_types_1.ETH_DATA_FORMAT);\n\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n\n          if (web3Context.wallet && !(0, web3_validator_1.isNullish)(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n\nexports.sendTransaction = sendTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        }); // Formatting signedTransaction to be send to RPC endpoint\n\n        const signedTransactionFormattedHex = (0, web3_utils_1.format)({\n          format: 'bytes'\n        }, signedTransaction, web3_types_1.ETH_DATA_FORMAT);\n        const unSerializedTransaction = web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.bytesToUint8Array)((0, web3_utils_1.hexToBytes)(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n\n        try {\n          const {\n            v,\n            r,\n            s\n          } = unSerializedTransactionWithFrom,\n                txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n\nexports.sendSignedTransaction = sendSignedTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, message, web3_types_1.DEFAULT_RETURN_FORMAT);\n\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return (0, web3_utils_1.format)(schemas_js_1.SignatureObjectSchema, signed, returnFormat);\n    }\n\n    if (typeof addressOrIndex === 'number') {\n      throw new web3_errors_1.SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n\n    const response = yield web3_rpc_methods_1.ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n\nexports.sign = sign;\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTransaction(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT)); // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n\n    return (0, web3_validator_1.isString)(response) ? (0, decode_signed_transaction_js_1.decodeSignedTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: (0, web3_utils_1.format)({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: (0, format_transaction_js_1.formatTransaction)(response.tx, returnFormat, {\n        fillInputAndData: true\n      })\n    };\n  });\n}\n\nexports.signTransaction = signTransaction; // TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction call(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.call(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n\nexports.call = call; // TODO - Investigate whether response is padded as 1.x docs suggest\n\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction estimateGas(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\n\nexports.estimateGas = estimateGas; // TODO - Add input formatting to filter\n\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n\n    if (!(0, web3_validator_1.isNullish)(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = (0, web3_utils_1.numberToHex)(toBlock);\n      }\n    }\n\n    if (!(0, web3_validator_1.isNullish)(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = (0, web3_utils_1.numberToHex)(fromBlock);\n      }\n    }\n\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n\n      return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat);\n    });\n    return result;\n  });\n}\n\nexports.getLogs = getLogs;\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getChainId(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, // Response is number in hex formatted string\n    response, returnFormat);\n  });\n}\n\nexports.getChainId = getChainId;\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getProof(web3Context, address, storageKeys) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, storageKey, web3_types_1.ETH_DATA_FORMAT));\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accountSchema, response, returnFormat);\n  });\n}\n\nexports.getProof = getProof; // TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction getFeeHistory(web3Context, blockCount) {\n  let newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockCount, web3_types_1.ETH_DATA_FORMAT);\n    const newestBlockFormatted = (0, web3_validator_1.isBlockTag)(newestBlock) ? newestBlock : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, newestBlock, web3_types_1.ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = (0, web3_utils_1.format)({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, constants_js_1.NUMBER_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.feeHistorySchema, response, returnFormat);\n  });\n}\n\nexports.getFeeHistory = getFeeHistory;\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction createAccessList(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.createAccessList(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accessListResultSchema, response, returnFormat);\n  });\n}\n\nexports.createAccessList = createAccessList;\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\n\nfunction signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n\nexports.signTypedData = signTypedData;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kvBAiBA;;AACA;;AACA;;AA+BA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA,6C,CAeA;;;AACA;;AACA,yE,CACA;;;AACA,6E,CACA;;;AACA;;AACA,iD,CACA;;;AACA;AAEA;;;;;;AAIO,MAAMA,kBAAkB,GAAUC,WAAP,IAAoDC;EACrF,wCAAcF,kBAAd,CAAiCC,WAAW,CAACE,cAA7C;AAA4D,CADyB,CAA/E;;AAAMC,6BAAkBJ,kBAAlB,C,CAGb;;AACA;;;;;AAIO,MAAMK,SAAS,GAAUJ,WAAP,IAAoDC;EAC5E,wCAAcI,UAAd,CAAyBL,WAAW,CAACE,cAArC;AAAoD,CADwB,CAAtE;;AAAMC,oBAASC,SAAT,C,CAGb;;AACA;;;;;AAIO,MAAME,WAAW,GAAUN,WAAP,IAAoDC;EAC9E,wCAAcK,WAAd,CAA0BN,WAAW,CAACE,cAAtC;AAAqD,CADyB,CAAxE;;AAAMC,sBAAWG,WAAX;AAGb;;;;;AAIO,MAAMC,QAAQ,GAAUP,WAAP,IAAoDC;EAC3E,wCAAcO,SAAd,CAAwBR,WAAW,CAACE,cAApC;AAAmD,CADwB,CAArE;;AAAMC,mBAAQI,QAAR;AAGb;;;;;AAIA,SAAsBE,WAAtB,CACCT,WADD,EAECU,YAFD,EAE2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAcH,WAAd,CAA0BT,WAAW,CAACE,cAAtC,CAAvB;IAEA,OAAO,yBAAO;MAAEW,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAPDP;AASA;;;;;AAIA,SAAsBW,WAAtB,CACCd,WADD,EAECU,YAFD,EAE2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAcE,WAAd,CAA0Bd,WAAW,CAACE,cAAtC,CAAvB;IAEA,OAAO,yBAAO;MAAEW,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAPDP;AASA;;;;;AAIA,SAAsBY,cAAtB,CACCf,WADD,EAECU,YAFD,EAE2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAcG,cAAd,CAA6Bf,WAAW,CAACE,cAAzC,CAAvB;IAEA,OAAO,yBAAO;MAAEW,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAPDP;AASA;;;;;AAIA,SAAsBa,UAAtB,CACChB,WADD,EAECiB,OAFD,EAI2B;EAAA,IAD1BC,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMU,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAGA,MAAMV,QAAQ,GAAG,MAAMC,iCAAcI,UAAd,CACtBhB,WAAW,CAACE,cADU,EAEtBe,OAFsB,EAGtBG,oBAHsB,CAAvB;IAKA,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAfDP;AAiBA;;;;;AAIA,SAAsBmB,YAAtB,CACCtB,WADD,EAECiB,OAFD,EAGCM,WAHD,EAK2B;EAAA,IAD1BL,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMc,oBAAoB,GAAG,yBAAO;MAAEX,MAAM,EAAE;IAAV,CAAP,EAA2BU,WAA3B,EAAwCF,4BAAxC,CAA7B;IACA,MAAMD,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAGA,MAAMV,QAAQ,GAAG,MAAMC,iCAAcU,YAAd,CACtBtB,WAAW,CAACE,cADU,EAEtBe,OAFsB,EAGtBO,oBAHsB,EAItBJ,oBAJsB,CAAvB;IAMA,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA4BF,QAA5B,EAA+CD,YAA/C,CAAP;EACA;AAAA;;AAlBDP;AAoBA;;;;;AAIA,SAAsBsB,OAAtB,CACCzB,WADD,EAECiB,OAFD,EAI2B;EAAA,IAD1BC,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMU,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAGA,MAAMV,QAAQ,GAAG,MAAMC,iCAAca,OAAd,CACtBzB,WAAW,CAACE,cADU,EAEtBe,OAFsB,EAGtBG,oBAHsB,CAAvB;IAKA,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA4BF,QAA5B,EAA+CD,YAA/C,CAAP;EACA;AAAA;;AAfDP;AAiBA;;;;;AAIA,SAAsBuB,QAAtB,CACC1B,WADD,EAI2B;EAAA,IAF1B2B,KAE0B,uEAFQ3B,WAAW,CAACmB,YAEpB;EAAA,IAD1BS,QAC0B,uEADf,KACe;EAAA,IAA1BlB,YAA0B;;IAE1B,IAAIC,QAAJ;;IACA,IAAI,8BAAQgB,KAAR,CAAJ,EAAoB;MACnB,MAAME,kBAAkB,GAAG,yBAAO;QAAEhB,MAAM,EAAE;MAAV,CAAP,EAA8Bc,KAA9B,EAAqCN,4BAArC,CAA3B;MACAV,QAAQ,GAAG,MAAMC,iCAAckB,cAAd,CAChB9B,WAAW,CAACE,cADI,EAEhB2B,kBAFgB,EAGhBD,QAHgB,CAAjB;IAKA,CAPD,MAOO;MACN,MAAMR,oBAAoB,GAAG,iCAAWO,KAAX,IACzBA,KADyB,GAE1B,yBAAO;QAAEd,MAAM,EAAE;MAAV,CAAP,EAA2Bc,KAA3B,EAA6CN,4BAA7C,CAFH;MAGAV,QAAQ,GAAG,MAAMC,iCAAcmB,gBAAd,CAChB/B,WAAW,CAACE,cADI,EAEhBkB,oBAFgB,EAGhBQ,QAHgB,CAAjB;IAKA;;IACD,OAAO,yBAAOI,wBAAP,EAAoBrB,QAApB,EAAkDD,YAAlD,CAAP;EACA;AAAA;;AAzBDP;AA2BA;;;;;AAIA,SAAsB8B,wBAAtB,CACCjC,WADD,EAG2B;EAAA,IAD1B2B,KAC0B,uEADQ3B,WAAW,CAACmB,YACpB;EAAA,IAA1BT,YAA0B;;IAE1B,IAAIC,QAAJ;;IACA,IAAI,8BAAQgB,KAAR,CAAJ,EAAoB;MACnB,MAAME,kBAAkB,GAAG,yBAAO;QAAEhB,MAAM,EAAE;MAAV,CAAP,EAA8Bc,KAA9B,EAAqCN,4BAArC,CAA3B;MACAV,QAAQ,GAAG,MAAMC,iCAAcsB,8BAAd,CAChBlC,WAAW,CAACE,cADI,EAEhB2B,kBAFgB,CAAjB;IAIA,CAND,MAMO;MACN,MAAMT,oBAAoB,GAAG,iCAAWO,KAAX,IACzBA,KADyB,GAE1B,yBAAO;QAAEd,MAAM,EAAE;MAAV,CAAP,EAA2Bc,KAA3B,EAA6CN,4BAA7C,CAFH;MAGAV,QAAQ,GAAG,MAAMC,iCAAcuB,gCAAd,CAChBnC,WAAW,CAACE,cADI,EAEhBkB,oBAFgB,CAAjB;IAIA;;IAED,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAvBDP;AAyBA;;;;;AAIA,SAAsBiC,kBAAtB,CACCpC,WADD,EAG2B;EAAA,IAD1B2B,KAC0B,uEADQ3B,WAAW,CAACmB,YACpB;EAAA,IAA1BT,YAA0B;;IAE1B,IAAIC,QAAJ;;IACA,IAAI,8BAAQgB,KAAR,CAAJ,EAAoB;MACnB,MAAME,kBAAkB,GAAG,yBAAO;QAAEhB,MAAM,EAAE;MAAV,CAAP,EAA8Bc,KAA9B,EAAqCN,4BAArC,CAA3B;MACAV,QAAQ,GAAG,MAAMC,iCAAcyB,wBAAd,CAChBrC,WAAW,CAACE,cADI,EAEhB2B,kBAFgB,CAAjB;IAIA,CAND,MAMO;MACN,MAAMT,oBAAoB,GAAG,iCAAWO,KAAX,IACzBA,KADyB,GAE1B,yBAAO;QAAEd,MAAM,EAAE;MAAV,CAAP,EAA2Bc,KAA3B,EAA6CN,4BAA7C,CAFH;MAGAV,QAAQ,GAAG,MAAMC,iCAAc0B,0BAAd,CAChBtC,WAAW,CAACE,cADI,EAEhBkB,oBAFgB,CAAjB;IAIA;;IAED,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAvBDP;AAyBA;;;;;AAIA,SAAsBoC,QAAtB,CACCvC,WADD,EAI2B;EAAA,IAF1B2B,KAE0B,uEAFQ3B,WAAW,CAACmB,YAEpB;EAAA,IAD1BqB,UAC0B;EAAA,IAA1B9B,YAA0B;;IAE1B,MAAM+B,mBAAmB,GAAG,yBAAO;MAAE5B,MAAM,EAAE;IAAV,CAAP,EAA2B2B,UAA3B,EAAuCnB,4BAAvC,CAA5B;IAEA,IAAIV,QAAJ;;IACA,IAAI,8BAAQgB,KAAR,CAAJ,EAAoB;MACnB,MAAME,kBAAkB,GAAG,yBAAO;QAAEhB,MAAM,EAAE;MAAV,CAAP,EAA8Bc,KAA9B,EAAqCN,4BAArC,CAA3B;MACAV,QAAQ,GAAG,MAAMC,iCAAc8B,2BAAd,CAChB1C,WAAW,CAACE,cADI,EAEhB2B,kBAFgB,EAGhBY,mBAHgB,CAAjB;IAKA,CAPD,MAOO;MACN,MAAMrB,oBAAoB,GAAG,iCAAWO,KAAX,IACzBA,KADyB,GAE1B,yBAAO;QAAEd,MAAM,EAAE;MAAV,CAAP,EAA2Bc,KAA3B,EAA6CN,4BAA7C,CAFH;MAGAV,QAAQ,GAAG,MAAMC,iCAAc+B,6BAAd,CAChB3C,WAAW,CAACE,cADI,EAEhBkB,oBAFgB,EAGhBqB,mBAHgB,CAAjB;IAKA;;IAED,OAAO,yBAAOT,wBAAP,EAAoBrB,QAApB,EAAkDD,YAAlD,CAAP;EACA;AAAA;;AA5BDP;AA8BA;;;;;AAIA,SAAsByC,cAAtB,CACC5C,WADD,EAEC6C,eAFD,EAGCnC,YAHD,EAG2B;;IAE1B,MAAMoC,wBAAwB,GAAG,yBAChC;MAAEjC,MAAM,EAAE;IAAV,CADgC,EAEhCgC,eAFgC,EAGhCxB,kCAHgC,CAAjC;IAKA,MAAMV,QAAQ,GAAG,MAAMC,iCAAcmC,oBAAd,CACtB/C,WAAW,CAACE,cADU,EAEtB4C,wBAFsB,CAAvB;IAKA,OAAO,gCAAUnC,QAAV,IACJA,QADI,GAEJ,+CAAkBA,QAAlB,EAA4BD,YAA5B,EAA0C;MAAEsC,gBAAgB,EAAE;IAApB,CAA1C,CAFH;EAGA;AAAA;;AAlBD7C;AAoBA;;;;;AAIA,SAAsB8C,sBAAtB,CACCjD,WADD,EAECU,YAFD,EAE2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAcqC,sBAAd,CAAqCjD,WAAW,CAACE,cAAjD,CAAvB;IAEA,OAAOS,QAAQ,CAACuC,GAAT,CAAaC,WAAW,IAC9B,+CAAkBA,WAAlB,EAAyDzC,YAAzD,EAAuE;MACtEsC,gBAAgB,EAAE;IADoD,CAAvE,CADM,CAAP;EAKA;AAAA;;AAXD7C;AAaA;;;;;AAIA,SAAsBiD,uBAAtB,CACCpD,WADD,EAI2B;EAAA,IAF1B2B,KAE0B,uEAFQ3B,WAAW,CAACmB,YAEpB;EAAA,IAD1BkC,gBAC0B;EAAA,IAA1B3C,YAA0B;;IAE1B,MAAM4C,yBAAyB,GAAG,yBAAO;MAAEzC,MAAM,EAAE;IAAV,CAAP,EAA2BwC,gBAA3B,EAA6ChC,4BAA7C,CAAlC;IAEA,IAAIV,QAAJ;;IACA,IAAI,8BAAQgB,KAAR,CAAJ,EAAoB;MACnB,MAAME,kBAAkB,GAAG,yBAAO;QAAEhB,MAAM,EAAE;MAAV,CAAP,EAA8Bc,KAA9B,EAAqCN,4BAArC,CAA3B;MACAV,QAAQ,GAAG,MAAMC,iCAAc2C,iCAAd,CAChBvD,WAAW,CAACE,cADI,EAEhB2B,kBAFgB,EAGhByB,yBAHgB,CAAjB;IAKA,CAPD,MAOO;MACN,MAAMlC,oBAAoB,GAAG,iCAAWO,KAAX,IACzBA,KADyB,GAE1B,yBAAO;QAAEd,MAAM,EAAE;MAAV,CAAP,EAA2Bc,KAA3B,EAA6CN,4BAA7C,CAFH;MAGAV,QAAQ,GAAG,MAAMC,iCAAc4C,mCAAd,CAChBxD,WAAW,CAACE,cADI,EAEhBkB,oBAFgB,EAGhBkC,yBAHgB,CAAjB;IAKA;;IAED,OAAO,gCAAU3C,QAAV,IACJA,QADI,GAEJ,+CAAkBA,QAAlB,EAA4BD,YAA5B,EAA0C;MAAEsC,gBAAgB,EAAE;IAApB,CAA1C,CAFH;EAGA;AAAA;;AA9BD7C;AAgCA;;;;;AAIA,SAAsBsD,qBAAtB,CACCzD,WADD,EAEC6C,eAFD,EAGCnC,YAHD,EAG2B;;IAE1B,MAAMoC,wBAAwB,GAAG,yBAChC;MAAEjC,MAAM,EAAE;IAAV,CADgC,EAEhCgC,eAFgC,EAGhCxB,kCAHgC,CAAjC;IAKA,MAAMV,QAAQ,GAAG,MAAMC,iCAAc6C,qBAAd,CACtBzD,WAAW,CAACE,cADU,EAEtB4C,wBAFsB,CAAvB;IAKA,OAAO,gCAAUnC,QAAV,IACJA,QADI,GAEH,yBACDqB,qCADC,EAEDrB,QAFC,EAGDD,YAHC,CAFJ;EAOA;AAAA;;AAtBDP;AAwBA;;;;;AAIA,SAAsBuD,mBAAtB,CACC1D,WADD,EAECiB,OAFD,EAI2B;EAAA,IAD1BC,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMU,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAGA,MAAMV,QAAQ,GAAG,MAAMC,iCAAc8C,mBAAd,CACtB1D,WAAW,CAACE,cADU,EAEtBe,OAFsB,EAGtBG,oBAHsB,CAAvB;IAMA,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAhBDP;AAkBA;;;;;AAIA,SAAgBwD,eAAhB,CAIC3D,WAJD,EAKCmD,WALD,EAUCzC,YAVD,EAWkF;EAAA,IAAjFkD,OAAiF,uEAAlC;IAAEC,wBAAwB,EAAE;EAA5B,CAAkC;EAEjF,MAAMC,UAAU,GAAG,IAAIC,0BAAJ,CAClB,CAACC,OAAD,EAAUC,MAAV,KAAoB;IACnBC,YAAY,CAAC,MAAK;MACjB,CAAC,MAAWjE;QACX,MAAMkE,YAAY,GAAG,IAAIC,gCAAJ,CAA4C;UAChEpE,WADgE;UAEhE8D,UAFgE;UAGhEF,OAHgE;UAIhElD;QAJgE,CAA5C,CAArB;QAOA,IAAI2D,oBAAoB,GAIsB,+CAAiBC,gCAE1DnB,WAF0D,GAE/C;UACdoB,IAAI,EAAE,yDAA2B,MAA3B,EAAmCvE,WAAnC,EAAgDmD,WAAhD,CADQ;UAEdqB,EAAE,EAAE,yDAA2B,IAA3B,EAAiCxE,WAAjC,EAA8CmD,WAA9C;QAFU,CAF+C,CAAjB,EAM7C9B,4BAN6C,CAJ9C;;QAaA,IAAI;UACHgD,oBAAoB,GAAG,MAAMF,YAAY,CAACM,gBAAb,CAA8B;YAC1DtB,WAD0D;YAE1DkB;UAF0D,CAA9B,CAA7B;UAKA,MAAMF,YAAY,CAACN,wBAAb,CACLQ,oBADK,CAAN;UAIAF,YAAY,CAACO,WAAb,CAAyBL,oBAAzB;UAEA,IAAIM,MAAJ;;UAEA,IAAI3E,WAAW,CAAC2E,MAAZ,IAAsB,CAAC,gCAAUN,oBAAoB,CAACE,IAA/B,CAA3B,EAAiE;YAChEI,MAAM,GAAG3E,WAAW,CAAC2E,MAAZ,CAAmBC,GAAnB,CACPP,oBAAoC,CAACE,IAD9B,CAAT;UAGA;;UAED,MAAM1B,eAAe,GAAc,MAAMsB,YAAY,CAACU,WAAb,CAAyB;YACjEF,MADiE;YAEjEG,EAAE,EAAET;UAF6D,CAAzB,CAAzC;UAKA,MAAMvB,wBAAwB,GAAG,yBAChC;YAAEjC,MAAM,EAAE;UAAV,CADgC,EAEhCgC,eAFgC,EAGhCnC,YAHgC,CAAjC;UAKAyD,YAAY,CAACY,QAAb,CAAsBV,oBAAtB;UACAF,YAAY,CAACa,mBAAb,CACClC,wBADD;UAIA,MAAMmC,kBAAkB,GAAG,MAAM,iEAChCjF,WADgC,EAEhC6C,eAFgC,EAGhCnC,YAHgC,CAAjC;UAMA,MAAMwE,2BAA2B,GAAGf,YAAY,CAACgB,oBAAb,CACnC,yBAAOnD,qCAAP,EAAiCiD,kBAAjC,EAAqDvE,YAArD,CADmC,CAApC;UAIAyD,YAAY,CAACiB,WAAb,CAAyBF,2BAAzB;UAEAlB,OAAO,CACN,MAAMG,YAAY,CAACkB,aAAb,CAA2B;YAChCC,OAAO,EAAEJ,2BADuB;YAEhCJ,EAAE,EAAET;UAF4B,CAA3B,CADA,CAAP;UAOAF,YAAY,CAACoB,gBAAb,CAA8B;YAC7BD,OAAO,EAAEJ,2BADoB;YAE7BrC;UAF6B,CAA9B;QAIA,CA1DD,CA0DE,OAAO2C,KAAP,EAAc;UACfvB,MAAM,CACL,MAAME,YAAY,CAACsB,WAAb,CAAyB;YAC9BD,KAD8B;YAE9BV,EAAE,EAAET;UAF0B,CAAzB,CADD,CAAN;QAMA;MACD,CAvFW,CAAZ;IAwFA,CAzFW,CAAZ;EA0FA,CA5FiB,CAAnB;EA+FA,OAAOP,UAAP;AACA;;AA7GD3D;AA+GA;;;;;AAIA,SAAgBuF,qBAAhB,CAIC1F,WAJD,EAKC2F,iBALD,EAMCjF,YAND,EAOwF;EAAA,IAAvFkD,OAAuF,uEAAlC;IAAEC,wBAAwB,EAAE;EAA5B,CAAkC;EAEvF;EACA;EACA,MAAMC,UAAU,GAAG,IAAIC,0BAAJ,CAClB,CAACC,OAAD,EAAUC,MAAV,KAAoB;IACnBC,YAAY,CAAC,MAAK;MACjB,CAAC,MAAWjE;QACX,MAAMkE,YAAY,GAAG,IAAIC,gCAAJ,CAA4C;UAChEpE,WADgE;UAEhE8D,UAFgE;UAGhEF,OAHgE;UAIhElD;QAJgE,CAA5C,CAArB,CADW,CAOX;;QACA,MAAMkF,6BAA6B,GAAG,yBACrC;UAAE/E,MAAM,EAAE;QAAV,CADqC,EAErC8E,iBAFqC,EAGrCtE,4BAHqC,CAAtC;QAKA,MAAMwE,uBAAuB,GAAGC,uCAAmBC,kBAAnB,CAC/B,oCAAkB,6BAAWH,6BAAX,CAAlB,CAD+B,CAAhC;QAGA,MAAMI,+BAA+B,mCACjCH,uBAAuB,CAACI,MAAxB,EADiC,GACD;UACnC;UACA;UACA;UACA;UACA;UACA1B,IAAI,EAAEsB,uBAAuB,CAACK,gBAAxB,GAA2CC,QAA3C;QAN6B,CADC,CAArC;;QAUA,IAAI;UACH,MAAM;YAAEC,CAAF;YAAMC,CAAN;YAAUC;UAAV,IACqBN,+BAD3B;UAAA,MACKO,kBAAkB,UAAIP,+BAAJ,EADjB,eACiB,CADvB;;UAGA,MAAM7B,YAAY,CAACN,wBAAb,CACL0C,kBADK,CAAN;UAIApC,YAAY,CAACO,WAAb,CAAyBkB,6BAAzB;UAEA,MAAM/C,eAAe,GAAG,MAAM,kDAC7B7C,WAD6B,EAE7B,MAA4BC;YAC3B,wCAAcuG,kBAAd,CACCxG,WAAW,CAACE,cADb,EAEC0F,6BAFD;WAD2B,CAFC,CAA9B;UASAzB,YAAY,CAACY,QAAb,CAAsBa,6BAAtB;UAEA,MAAM9C,wBAAwB,GAAG,yBAChC;YAAEjC,MAAM,EAAE;UAAV,CADgC,EAEhCgC,eAFgC,EAGhCnC,YAHgC,CAAjC;UAMAyD,YAAY,CAACa,mBAAb,CACClC,wBADD;UAIA,MAAMmC,kBAAkB,GAAG,MAAM,iEAChCjF,WADgC,EAEhC6C,eAFgC,EAGhCnC,YAHgC,CAAjC;UAMA,MAAMwE,2BAA2B,GAAGf,YAAY,CAACgB,oBAAb,CACnC,yBAAOnD,qCAAP,EAAiCiD,kBAAjC,EAAqDvE,YAArD,CADmC,CAApC;UAIAyD,YAAY,CAACiB,WAAb,CAAyBF,2BAAzB;UAEAlB,OAAO,CACN,MAAMG,YAAY,CAACkB,aAAb,CAA2B;YAChCC,OAAO,EAAEJ,2BADuB;YAEhCJ,EAAE,EAAEkB;UAF4B,CAA3B,CADA,CAAP;UAOA7B,YAAY,CAACoB,gBAAb,CAA8B;YAC7BD,OAAO,EAAEJ,2BADoB;YAE7BrC;UAF6B,CAA9B;QAIA,CAtDD,CAsDE,OAAO2C,KAAP,EAAc;UACfvB,MAAM,CACL,MAAME,YAAY,CAACsB,WAAb,CAAyB;YAC9BD,KAD8B;YAE9BV,EAAE,EAAEkB;UAF0B,CAAzB,CADD,CAAN;QAMA;MACD,CAxFW,CAAZ;IAyFA,CA1FW,CAAZ;EA2FA,CA7FiB,CAAnB;EAgGA,OAAOlC,UAAP;AACA;;AA5GD3D;AA8GA;;;;;AAIA,SAAsBsG,IAAtB,CACCzG,WADD,EAEC0G,OAFD,EAGCC,cAHD,EAICjG,YAJD,EAI2B;;;;IAE1B,MAAMkG,gBAAgB,GAAG,yBAAO;MAAE/F,MAAM,EAAE;IAAV,CAAP,EAA4B6F,OAA5B,EAAqCrF,kCAArC,CAAzB;;IACA,IAAI,iBAAW,CAACsD,MAAZ,MAAkB,IAAlB,IAAkBkC,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEjC,GAAF,CAAM+B,cAAN,CAAtB,EAA6C;MAC5C,MAAMhC,MAAM,GAAG3E,WAAW,CAAC2E,MAAZ,CAAmBC,GAAnB,CAAuB+B,cAAvB,CAAf;MACA,MAAMG,MAAM,GAAGnC,MAAM,CAAC8B,IAAP,CAAYG,gBAAZ,CAAf;MACA,OAAO,yBAAO5E,kCAAP,EAA8B8E,MAA9B,EAAsCpG,YAAtC,CAAP;IACA;;IAED,IAAI,OAAOiG,cAAP,KAA0B,QAA9B,EAAwC;MACvC,MAAM,IAAII,4BAAJ,CACLL,OADK,EAEL,yDAFK,CAAN;IAIA;;IAED,MAAM/F,QAAQ,GAAG,MAAMC,iCAAc6F,IAAd,CACtBzG,WAAW,CAACE,cADU,EAEtByG,cAFsB,EAGtBC,gBAHsB,CAAvB;IAMA,OAAO,yBAAO;MAAE/F,MAAM,EAAE;IAAV,CAAP,EAA4BF,QAA5B,EAA+CD,YAA/C,CAAP;;AACA;;AA3BDP;AA6BA;;;;;AAIA,SAAsB6G,eAAtB,CACChH,WADD,EAECmD,WAFD,EAGCzC,YAHD,EAG2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAcoG,eAAd,CACtBhH,WAAW,CAACE,cADU,EAEtB,+CAAkBiD,WAAlB,EAA+B9B,4BAA/B,CAFsB,CAAvB,EAIA;IACA;;IACA,OAAO,+BAASV,QAAT,IACJ,4DAAwBA,QAAxB,EAAoDD,YAApD,EAAkE;MAClEsC,gBAAgB,EAAE;IADgD,CAAlE,CADI,GAIJ;MACAiE,GAAG,EAAE,yBACJ;QAAEpG,MAAM,EAAE;MAAV,CADI,EAEHF,QAAqC,CAACsG,GAFnC,EAGJvG,YAHI,CADL;MAMAoE,EAAE,EAAE,+CAAmBnE,QAAqC,CAACmE,EAAzD,EAA6DpE,YAA7D,EAA2E;QAC9EsC,gBAAgB,EAAE;MAD4D,CAA3E;IANJ,CAJH;EAcA;AAAA;;AAzBD7C,0C,CA2BA;AACA;;AACA;;;;;AAIA,SAAsB+G,IAAtB,CACClH,WADD,EAECmD,WAFD,EAI2B;EAAA,IAD1BjC,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMU,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAIA,MAAMV,QAAQ,GAAG,MAAMC,iCAAcsG,IAAd,CACtBlH,WAAW,CAACE,cADU,EAEtB,+CAAkBiD,WAAlB,EAA+B9B,4BAA/B,CAFsB,EAGtBD,oBAHsB,CAAvB;IAMA,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA4BF,QAA5B,EAA+CD,YAA/C,CAAP;EACA;AAAA;;AAjBDP,oB,CAmBA;;AACA;;;;;AAIA,SAAsBgH,WAAtB,CACCnH,WADD,EAECmD,WAFD,EAI2B;EAAA,IAD1BjC,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAM2D,oBAAoB,GAAG,+CAAkBlB,WAAlB,EAA+B9B,4BAA/B,CAA7B;IACA,MAAMD,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAIA,MAAMV,QAAQ,GAAG,MAAMC,iCAAcuG,WAAd,CACtBnH,WAAW,CAACE,cADU,EAEtBmE,oBAFsB,EAGtBjD,oBAHsB,CAAvB;IAMA,OAAO,yBAAO;MAAEP,MAAM,EAAE;IAAV,CAAP,EAA2BF,QAA3B,EAAgDD,YAAhD,CAAP;EACA;AAAA;;AAlBDP,kC,CAoBA;;AACA;;;;;AAIA,SAAsBiH,OAAtB,CACCpH,WADD,EAECqH,MAFD,EAGC3G,YAHD,EAG2B;;IAE1B;IACA,IAAI;MAAE4G,OAAF;MAAWC;IAAX,IAAyBF,MAA7B;;IACA,IAAI,CAAC,gCAAUC,OAAV,CAAL,EAAyB;MACxB,IAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAP,KAAmB,QAAtD,EAAgE;QAC/DA,OAAO,GAAG,8BAAYA,OAAZ,CAAV;MACA;IACD;;IACD,IAAI,CAAC,gCAAUC,SAAV,CAAL,EAA2B;MAC1B,IAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QAA1D,EAAoE;QACnEA,SAAS,GAAG,8BAAYA,SAAZ,CAAZ;MACA;IACD;;IAED,MAAMC,eAAe,mCAAQH,MAAR,GAAc;MAAEE,SAAF;MAAaD;IAAb,CAAd,CAArB;IAEA,MAAM3G,QAAQ,GAAG,MAAMC,iCAAcwG,OAAd,CAAsBpH,WAAW,CAACE,cAAlC,EAAkDsH,eAAlD,CAAvB;IAEA,MAAMC,MAAM,GAAG9G,QAAQ,CAACuC,GAAT,CAAawE,GAAG,IAAG;MACjC,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;QAC5B,OAAOA,GAAP;MACA;;MAED,OAAO,yBAAO1F,sBAAP,EAAkB0F,GAAlB,EAAyChH,YAAzC,CAAP;IACA,CANc,CAAf;IAQA,OAAO+G,MAAP;EACA;AAAA;;AA/BDtH;AAiCA;;;;;AAIA,SAAsBwH,UAAtB,CACC3H,WADD,EAECU,YAFD,EAE2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAc+G,UAAd,CAAyB3H,WAAW,CAACE,cAArC,CAAvB;IAEA,OAAO,yBACN;MAAEW,MAAM,EAAE;IAAV,CADM,EAEN;IACAF,QAHM,EAIND,YAJM,CAAP;EAMA;AAAA;;AAZDP;AAcA;;;;;AAIA,SAAsByH,QAAtB,CACC5H,WADD,EAECiB,OAFD,EAGC4G,WAHD,EAK2B;EAAA,IAD1B3G,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMoH,oBAAoB,GAAGD,WAAW,CAAC3E,GAAZ,CAAgB6E,UAAU,IACtD,yBAAO;MAAElH,MAAM,EAAE;IAAV,CAAP,EAA4BkH,UAA5B,EAAwC1G,4BAAxC,CAD4B,CAA7B;IAIA,MAAMD,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAIA,MAAMV,QAAQ,GAAG,MAAMC,iCAAcgH,QAAd,CACtB5H,WAAW,CAACE,cADU,EAEtBe,OAFsB,EAGtB6G,oBAHsB,EAItB1G,oBAJsB,CAAvB;IAOA,OAAO,yBAAOY,0BAAP,EAAsBrB,QAAtB,EAA4DD,YAA5D,CAAP;EACA;AAAA;;AAvBDP,4B,CAyBA;AACA;;AACA;;;;;AAIA,SAAsB6H,aAAtB,CACChI,WADD,EAECiI,UAFD,EAK2B;EAAA,IAF1BC,WAE0B,uEAFMlI,WAAW,CAACmB,YAElB;EAAA,IAD1BgH,iBAC0B;EAAA,IAA1BzH,YAA0B;;IAE1B,MAAM0H,mBAAmB,GAAG,yBAAO;MAAEvH,MAAM,EAAE;IAAV,CAAP,EAA2BoH,UAA3B,EAAuC5G,4BAAvC,CAA5B;IAEA,MAAMgH,oBAAoB,GAAG,iCAAWH,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAErH,MAAM,EAAE;IAAV,CAAP,EAA2BqH,WAA3B,EAAmD7G,4BAAnD,CAFH;IAIA,MAAMiH,0BAA0B,GAAG,yBAClC;MACCC,IAAI,EAAE,OADP;MAECC,KAAK,EAAE;QACN3H,MAAM,EAAE;MADF;IAFR,CADkC,EAOlCsH,iBAPkC,EAQlCM,iCARkC,CAAnC;IAWA,MAAM9H,QAAQ,GAAG,MAAMC,iCAAcoH,aAAd,CACtBhI,WAAW,CAACE,cADU,EAEtBkI,mBAFsB,EAGtBC,oBAHsB,EAItBC,0BAJsB,CAAvB;IAOA,OAAO,yBAAOtG,6BAAP,EAAyBrB,QAAzB,EAA4DD,YAA5D,CAAP;EACA;AAAA;;AAhCDP;AAkCA;;;;;AAIA,SAAsBuI,gBAAtB,CACC1I,WADD,EAECmD,WAFD,EAI2B;EAAA,IAD1BjC,WAC0B,uEADMlB,WAAW,CAACmB,YAClB;EAAA,IAA1BT,YAA0B;;IAE1B,MAAMU,oBAAoB,GAAG,iCAAWF,WAAX,IACzBA,WADyB,GAE1B,yBAAO;MAAEL,MAAM,EAAE;IAAV,CAAP,EAA2BK,WAA3B,EAAmDG,4BAAnD,CAFH;IAIA,MAAMV,QAAQ,GAAI,MAAMC,iCAAc8H,gBAAd,CACvB1I,WAAW,CAACE,cADW,EAEvB,+CAAkBiD,WAAlB,EAA+B9B,4BAA/B,CAFuB,EAGvBD,oBAHuB,CAAxB;IAMA,OAAO,yBAAOY,mCAAP,EAA+BrB,QAA/B,EAAyCD,YAAzC,CAAP;EACA;AAAA;;AAjBDP;AAmBA;;;;;AAIA,SAAsBwI,aAAtB,CACC3I,WADD,EAECiB,OAFD,EAGC2H,SAHD,EAICC,SAJD,EAKCnI,YALD,EAK2B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,iCAAc+H,aAAd,CACtB3I,WAAW,CAACE,cADU,EAEtBe,OAFsB,EAGtB2H,SAHsB,EAItBC,SAJsB,CAAvB;IAOA,OAAO,yBAAO;MAAEhI,MAAM,EAAE;IAAV,CAAP,EAA4BF,QAA5B,EAAsCD,YAAtC,CAAP;EACA;AAAA;;AAfDP","names":["getProtocolVersion","web3Context","__awaiter","requestManager","exports","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","web3_rpc_methods_1","format","getGasPrice","getBlockNumber","getBalance","address","blockNumber","defaultBlock","blockNumberFormatted","web3_types_1","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","schemas_js_1","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","web3_core_1","resolve","reject","setImmediate","sendTxHelper","send_tx_helper_js_1","transactionFormatted","Object","from","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","error","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","web3_eth_accounts_1","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","sendRawTransaction","sign","message","addressOrIndex","messageFormatted","_a","signed","web3_errors_1","signTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","formattedFilter","result","res","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","constants_js_1","createAccessList","signTypedData","typedData","useLegacy"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(transaction as unknown as Transaction, returnFormat, {\n\t\t\tfillInputAndData: true,\n\t\t}),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v , r , s, \n\t\t\t\t\t\t\t\t...txWithoutSigParams} = unSerializedTransactionWithFrom;\n\t\t\t\t\t\t\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(logSchema, res as unknown as Log, returnFormat);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(accountSchema, response as unknown as AccountObject, returnFormat);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(feeHistorySchema, response as unknown as FeeHistory, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(accessListResultSchema, response, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat);\n}\n"]},"metadata":{},"sourceType":"script"}