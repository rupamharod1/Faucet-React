{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport { BlockTags } from 'web3-types';\nimport { fromUtf8, hexToNumber, hexToNumberString, isAddress, isHexStrict, mergeDeep, numberToHex, sha3Raw, toChecksumAddress, toNumber, toUtf8, utf8ToHex } from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n/* eslint-disable deprecation/deprecation */\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\n\nexport const inputStorageKeysFormatter = keys => keys.map(num => numberToHex(num));\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\n\nexport const outputProofFormatter = proof => ({\n  address: toChecksumAddress(proof.address),\n  nonce: hexToNumberString(proof.nonce),\n  balance: hexToNumberString(proof.balance)\n});\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\n\nexport const outputBigIntegerFormatter = number => toNumber(number);\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\n\nexport const inputBlockNumberFormatter = blockNumber => {\n  if (isNullish(blockNumber)) {\n    return undefined;\n  }\n\n  if (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n    return blockNumber;\n  }\n\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n\n  if (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n    return blockNumber.toLowerCase();\n  }\n\n  return numberToHex(blockNumber);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\n\nexport const inputDefaultBlockNumberFormatter = (blockNumber, defaultBlock) => {\n  if (!blockNumber) {\n    return inputBlockNumberFormatter(defaultBlock);\n  }\n\n  return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\n\nexport const inputAddressFormatter = address => {\n  if (Iban.isValid(address) && Iban.isDirect(address)) {\n    const iban = new Iban(address);\n    return iban.toAddress().toLowerCase();\n  }\n\n  if (isAddress(address)) {\n    return `0x${address.toLowerCase().replace('0x', '')}`;\n  }\n\n  throw new FormatterError(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\n\nexport const txInputOptionsFormatter = options => {\n  var _a;\n\n  const modifiedOptions = Object.assign({}, options);\n\n  if (options.to) {\n    // it might be contract creation\n    modifiedOptions.to = inputAddressFormatter(options.to);\n  }\n\n  if (options.data && options.input) {\n    throw new FormatterError('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n\n  if (!options.input && options.data) {\n    modifiedOptions.input = options.data;\n    delete modifiedOptions.data;\n  }\n\n  if (options.input && !options.input.startsWith('0x')) {\n    modifiedOptions.input = `0x${options.input}`;\n  }\n\n  if (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n    throw new FormatterError('The input field must be HEX encoded data.');\n  } // allow both\n\n\n  if (options.gas || options.gasLimit) {\n    modifiedOptions.gas = toNumber((_a = options.gas) !== null && _a !== void 0 ? _a : options.gasLimit);\n  }\n\n  if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n    delete modifiedOptions.gasPrice;\n  }\n\n  ['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId'].filter(key => !isNullish(modifiedOptions[key])).forEach(key => {\n    modifiedOptions[key] = numberToHex(modifiedOptions[key]);\n  });\n  return modifiedOptions;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\n\nexport const inputCallFormatter = (options, defaultAccount) => {\n  var _a;\n\n  const opts = txInputOptionsFormatter(options);\n  const from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n\n  if (from) {\n    opts.from = inputAddressFormatter(from);\n  }\n\n  return opts;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\n\nexport const inputTransactionFormatter = (options, defaultAccount) => {\n  var _a;\n\n  const opts = txInputOptionsFormatter(options); // check from, only if not number, or object\n\n  if (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n    opts.from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n\n    if (!options.from && !(typeof options.from === 'number')) {\n      throw new FormatterError('The send transactions \"from\" field must be defined!');\n    }\n\n    opts.from = inputAddressFormatter(options.from);\n  }\n\n  return opts;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\n\nexport const inputSignFormatter = data => isHexStrict(data) ? data : utf8ToHex(data);\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\n\nexport const outputTransactionFormatter = tx => {\n  const modifiedTx = Object.assign({}, tx);\n\n  if (tx.blockNumber) {\n    modifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n  }\n\n  if (tx.transactionIndex) {\n    modifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n  }\n\n  modifiedTx.nonce = hexToNumber(tx.nonce);\n  modifiedTx.gas = hexToNumber(tx.gas);\n\n  if (tx.gasPrice) {\n    modifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n  }\n\n  if (tx.maxFeePerGas) {\n    modifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n  }\n\n  if (tx.maxPriorityFeePerGas) {\n    modifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n  }\n\n  if (tx.type) {\n    modifiedTx.type = hexToNumber(tx.type);\n  }\n\n  modifiedTx.value = outputBigIntegerFormatter(tx.value);\n\n  if (tx.to && isAddress(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    modifiedTx.to = toChecksumAddress(tx.to);\n  } else {\n    modifiedTx.to = undefined; // set to `null` if invalid address\n  }\n\n  if (tx.from) {\n    modifiedTx.from = toChecksumAddress(tx.from);\n  }\n\n  return modifiedTx;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport const inputTopicFormatter = topic => {\n  // Using \"null\" value intentionally for validation\n  // eslint-disable-next-line no-null/no-null\n  if (isNullish(topic)) return null;\n  const value = String(topic);\n  return isHex(value) ? value : fromUtf8(value);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\n\nexport const inputLogFormatter = filter => {\n  var _a;\n\n  const val = isNullish(filter) ? {} : mergeDeep({}, filter); // If options !== undefined, don't blow out existing data\n\n  if (isNullish(val.fromBlock)) {\n    val.fromBlock = BlockTags.LATEST;\n  }\n\n  val.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n\n  if (!isNullish(val.toBlock)) {\n    val.toBlock = inputBlockNumberFormatter(val.toBlock);\n  } // make sure topics, get converted to hex\n\n\n  val.topics = (_a = val.topics) !== null && _a !== void 0 ? _a : [];\n  val.topics = val.topics.map(topic => Array.isArray(topic) ? topic.map(inputTopicFormatter) : inputTopicFormatter(topic));\n\n  if (val.address) {\n    val.address = Array.isArray(val.address) ? val.address.map(addr => inputAddressFormatter(addr)) : inputAddressFormatter(val.address);\n  }\n\n  return val;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\n\nexport const outputLogFormatter = log => {\n  const modifiedLog = Object.assign({}, log);\n  const logIndex = typeof log.logIndex === 'string' ? log.logIndex : numberToHex(log.logIndex); // generate a custom log id\n\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n    const shaId = sha3Raw(`${log.blockHash.replace('0x', '')}${log.transactionHash.replace('0x', '')}${logIndex.replace('0x', '')}`);\n    modifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n  } else if (!log.id) {\n    modifiedLog.id = undefined;\n  }\n\n  if (log.blockNumber && isHexStrict(log.blockNumber)) {\n    modifiedLog.blockNumber = hexToNumber(log.blockNumber);\n  }\n\n  if (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n    modifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n  }\n\n  if (log.logIndex && isHexStrict(log.logIndex)) {\n    modifiedLog.logIndex = hexToNumber(log.logIndex);\n  }\n\n  if (log.address) {\n    modifiedLog.address = toChecksumAddress(log.address);\n  }\n\n  return modifiedLog;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\n\nexport const outputTransactionReceiptFormatter = receipt => {\n  if (typeof receipt !== 'object') {\n    throw new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n  }\n\n  const modifiedReceipt = Object.assign({}, receipt);\n\n  if (receipt.blockNumber) {\n    modifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n  }\n\n  if (receipt.transactionIndex) {\n    modifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n  }\n\n  modifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n  modifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n  if (receipt.logs && Array.isArray(receipt.logs)) {\n    modifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n\n  if (receipt.effectiveGasPrice) {\n    modifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n  }\n\n  if (receipt.contractAddress) {\n    modifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n  }\n\n  if (receipt.status) {\n    modifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n  }\n\n  return modifiedReceipt;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\n\nexport const outputBlockFormatter = block => {\n  const modifiedBlock = Object.assign({}, block); // transform to number\n\n  modifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n  modifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n  modifiedBlock.size = hexToNumber(block.size);\n  modifiedBlock.timestamp = hexToNumber(block.timestamp);\n\n  if (block.number) {\n    modifiedBlock.number = hexToNumber(block.number);\n  }\n\n  if (block.difficulty) {\n    modifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n  }\n\n  if (block.totalDifficulty) {\n    modifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n  }\n\n  if (block.transactions && Array.isArray(block.transactions)) {\n    modifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n  }\n\n  if (block.miner) {\n    modifiedBlock.miner = toChecksumAddress(block.miner);\n  }\n\n  if (block.baseFeePerGas) {\n    modifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);\n  }\n\n  return modifiedBlock;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\n\nexport const inputPostFormatter = post => {\n  var _a;\n\n  const modifiedPost = Object.assign({}, post);\n\n  if (post.ttl) {\n    modifiedPost.ttl = numberToHex(post.ttl);\n  }\n\n  if (post.workToProve) {\n    modifiedPost.workToProve = numberToHex(post.workToProve);\n  }\n\n  if (post.priority) {\n    modifiedPost.priority = numberToHex(post.priority);\n  } // fallback\n\n\n  if (post.topics && !Array.isArray(post.topics)) {\n    modifiedPost.topics = post.topics ? [post.topics] : [];\n  } // format the following options\n\n\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(topic => topic.startsWith('0x') ? topic : fromUtf8(topic));\n  return modifiedPost;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\n\nexport const outputPostFormatter = post => {\n  var _a;\n\n  const modifiedPost = Object.assign({}, post);\n\n  if (post.expiry) {\n    modifiedPost.expiry = hexToNumber(post.expiry);\n  }\n\n  if (post.sent) {\n    modifiedPost.sent = hexToNumber(post.sent);\n  }\n\n  if (post.ttl) {\n    modifiedPost.ttl = hexToNumber(post.ttl);\n  }\n\n  if (post.workProved) {\n    modifiedPost.workProved = hexToNumber(post.workProved);\n  } // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n\n\n  if (!post.topics) {\n    modifiedPost.topics = [];\n  }\n\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(toUtf8);\n  return modifiedPost;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n */\n\nexport const outputSyncingFormatter = result => {\n  const modifiedResult = Object.assign({}, result);\n  modifiedResult.startingBlock = hexToNumber(result.startingBlock);\n  modifiedResult.currentBlock = hexToNumber(result.currentBlock);\n  modifiedResult.highestBlock = hexToNumber(result.highestBlock);\n\n  if (result.knownStates) {\n    modifiedResult.knownStates = hexToNumber(result.knownStates);\n  }\n\n  if (result.pulledStates) {\n    modifiedResult.pulledStates = hexToNumber(result.pulledStates);\n  }\n\n  return modifiedResult;\n};","map":{"version":3,"mappings":"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","names":["FormatterError","Iban","BlockTags","fromUtf8","hexToNumber","hexToNumberString","isAddress","isHexStrict","mergeDeep","numberToHex","sha3Raw","toChecksumAddress","toNumber","toUtf8","utf8ToHex","isBlockTag","isHex","isNullish","inputStorageKeysFormatter","keys","map","num","outputProofFormatter","proof","address","nonce","balance","outputBigIntegerFormatter","number","inputBlockNumberFormatter","blockNumber","undefined","toLowerCase","inputDefaultBlockNumberFormatter","defaultBlock","inputAddressFormatter","isValid","isDirect","iban","toAddress","replace","txInputOptionsFormatter","options","modifiedOptions","Object","to","data","input","startsWith","gas","gasLimit","_a","maxPriorityFeePerGas","maxFeePerGas","gasPrice","filter","key","forEach","inputCallFormatter","defaultAccount","opts","from","inputTransactionFormatter","inputSignFormatter","outputTransactionFormatter","tx","modifiedTx","transactionIndex","type","value","inputTopicFormatter","topic","String","inputLogFormatter","val","fromBlock","LATEST","toBlock","topics","Array","isArray","addr","outputLogFormatter","log","modifiedLog","logIndex","blockHash","transactionHash","shaId","id","slice","outputTransactionReceiptFormatter","receipt","modifiedReceipt","cumulativeGasUsed","gasUsed","logs","effectiveGasPrice","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","modifiedBlock","size","timestamp","difficulty","totalDifficulty","transactions","miner","baseFeePerGas","inputPostFormatter","post","modifiedPost","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","outputSyncingFormatter","result","modifiedResult","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-core/src/formatters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport {\n\tBlockTags,\n\tFilter,\n\tNumbers,\n\tTopic,\n\tBlockInput,\n\tBlockOutput,\n\tLogsInput,\n\tLogsOutput,\n\tMutable,\n\tPostInput,\n\tPostOutput,\n\tProof,\n\tReceiptInput,\n\tReceiptOutput,\n\tSyncInput,\n\tSyncOutput,\n\tTransactionInput,\n\tTransactionOutput,\n} from 'web3-types';\nimport {\n\tfromUtf8,\n\thexToNumber,\n\thexToNumberString,\n\tisAddress,\n\tisHexStrict,\n\tmergeDeep,\n\tnumberToHex,\n\tsha3Raw,\n\ttoChecksumAddress,\n\ttoNumber,\n\ttoUtf8,\n\tutf8ToHex,\n} from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = (keys: Array<string>) => keys.map(num => numberToHex(num));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = (proof: Proof): Proof => ({\n\taddress: toChecksumAddress(proof.address),\n\tnonce: hexToNumberString(proof.nonce),\n\tbalance: hexToNumberString(proof.balance),\n});\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = (number: Numbers) => toNumber(number);\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = (blockNumber: Numbers | undefined) => {\n\tif (isNullish(blockNumber)) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n\t\treturn blockNumber;\n\t}\n\n\tif (blockNumber === 'genesis') {\n\t\treturn '0x0';\n\t}\n\n\tif (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n\t\treturn blockNumber.toLowerCase();\n\t}\n\n\treturn numberToHex(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (\n\tblockNumber: Numbers | undefined,\n\tdefaultBlock: Numbers,\n) => {\n\tif (!blockNumber) {\n\t\treturn inputBlockNumberFormatter(defaultBlock);\n\t}\n\n\treturn inputBlockNumberFormatter(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = (address: string): string | never => {\n\tif (Iban.isValid(address) && Iban.isDirect(address)) {\n\t\tconst iban = new Iban(address);\n\n\t\treturn iban.toAddress().toLowerCase();\n\t}\n\n\tif (isAddress(address)) {\n\t\treturn `0x${address.toLowerCase().replace('0x', '')}`;\n\t}\n\n\tthrow new FormatterError(\n\t\t`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`,\n\t);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = (options: TransactionInput): Mutable<TransactionOutput> => {\n\tconst modifiedOptions = { ...options } as unknown as Mutable<TransactionOutput>;\n\n\tif (options.to) {\n\t\t// it might be contract creation\n\t\tmodifiedOptions.to = inputAddressFormatter(options.to);\n\t}\n\n\tif (options.data && options.input) {\n\t\tthrow new FormatterError(\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n\n\tif (!options.input && options.data) {\n\t\tmodifiedOptions.input = options.data;\n\t\tdelete modifiedOptions.data;\n\t}\n\n\tif (options.input && !options.input.startsWith('0x')) {\n\t\tmodifiedOptions.input = `0x${options.input}`;\n\t}\n\n\tif (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n\t\tthrow new FormatterError('The input field must be HEX encoded data.');\n\t}\n\n\t// allow both\n\tif (options.gas || options.gasLimit) {\n\t\tmodifiedOptions.gas = toNumber(options.gas ?? options.gasLimit);\n\t}\n\n\tif (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n\t\tdelete modifiedOptions.gasPrice;\n\t}\n\n\t['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId']\n\t\t.filter(key => !isNullish(modifiedOptions[key]))\n\t\t.forEach(key => {\n\t\t\tmodifiedOptions[key] = numberToHex(modifiedOptions[key] as Numbers);\n\t\t});\n\n\treturn modifiedOptions as TransactionOutput;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\tconst from = opts.from ?? defaultAccount;\n\n\tif (from) {\n\t\topts.from = inputAddressFormatter(from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\t// check from, only if not number, or object\n\tif (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n\t\topts.from = opts.from ?? defaultAccount;\n\n\t\tif (!options.from && !(typeof options.from === 'number')) {\n\t\t\tthrow new FormatterError('The send transactions \"from\" field must be defined!');\n\t\t}\n\n\t\topts.from = inputAddressFormatter(options.from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = (data: string) => (isHexStrict(data) ? data : utf8ToHex(data));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = (tx: TransactionInput): TransactionOutput => {\n\tconst modifiedTx = { ...tx } as unknown as Mutable<TransactionOutput>;\n\n\tif (tx.blockNumber) {\n\t\tmodifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n\t}\n\n\tif (tx.transactionIndex) {\n\t\tmodifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n\t}\n\n\tmodifiedTx.nonce = hexToNumber(tx.nonce);\n\tmodifiedTx.gas = hexToNumber(tx.gas);\n\n\tif (tx.gasPrice) {\n\t\tmodifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n\t}\n\n\tif (tx.maxFeePerGas) {\n\t\tmodifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n\t}\n\n\tif (tx.maxPriorityFeePerGas) {\n\t\tmodifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n\t}\n\n\tif (tx.type) {\n\t\tmodifiedTx.type = hexToNumber(tx.type);\n\t}\n\n\tmodifiedTx.value = outputBigIntegerFormatter(tx.value);\n\n\tif (tx.to && isAddress(tx.to)) {\n\t\t// tx.to could be `0x0` or `null` while contract creation\n\t\tmodifiedTx.to = toChecksumAddress(tx.to);\n\t} else {\n\t\tmodifiedTx.to = undefined; // set to `null` if invalid address\n\t}\n\n\tif (tx.from) {\n\t\tmodifiedTx.from = toChecksumAddress(tx.from);\n\t}\n\n\treturn modifiedTx;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = (topic: Topic): Topic | null => {\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\tif (isNullish(topic)) return null;\n\n\tconst value = String(topic);\n\n\treturn isHex(value) ? value : fromUtf8(value);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = (filter: Filter) => {\n\tconst val: Mutable<Filter> = isNullish(filter)\n\t\t? {}\n\t\t: mergeDeep({}, filter as Record<string, unknown>);\n\n\t// If options !== undefined, don't blow out existing data\n\tif (isNullish(val.fromBlock)) {\n\t\tval.fromBlock = BlockTags.LATEST;\n\t}\n\n\tval.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n\n\tif (!isNullish(val.toBlock)) {\n\t\tval.toBlock = inputBlockNumberFormatter(val.toBlock);\n\t}\n\n\t// make sure topics, get converted to hex\n\tval.topics = val.topics ?? [];\n\tval.topics = val.topics.map(topic =>\n\t\tArray.isArray(topic)\n\t\t\t? (topic.map(inputTopicFormatter) as Topic[])\n\t\t\t: inputTopicFormatter(topic as Topic),\n\t);\n\n\tif (val.address) {\n\t\tval.address = Array.isArray(val.address)\n\t\t\t? val.address.map(addr => inputAddressFormatter(addr))\n\t\t\t: inputAddressFormatter(val.address);\n\t}\n\n\treturn val as Filter;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = (log: Partial<LogsInput>): LogsOutput => {\n\tconst modifiedLog = { ...log } as unknown as Mutable<LogsOutput>;\n\n\tconst logIndex =\n\t\ttypeof log.logIndex === 'string'\n\t\t\t? log.logIndex\n\t\t\t: numberToHex(log.logIndex as unknown as number);\n\n\t// generate a custom log id\n\tif (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n\t\tconst shaId = sha3Raw(\n\t\t\t`${log.blockHash.replace('0x', '')}${log.transactionHash.replace(\n\t\t\t\t'0x',\n\t\t\t\t'',\n\t\t\t)}${logIndex.replace('0x', '')}`,\n\t\t);\n\t\tmodifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n\t} else if (!log.id) {\n\t\tmodifiedLog.id = undefined;\n\t}\n\n\tif (log.blockNumber && isHexStrict(log.blockNumber)) {\n\t\tmodifiedLog.blockNumber = hexToNumber(log.blockNumber);\n\t}\n\tif (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n\t\tmodifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n\t}\n\n\tif (log.logIndex && isHexStrict(log.logIndex)) {\n\t\tmodifiedLog.logIndex = hexToNumber(log.logIndex);\n\t}\n\n\tif (log.address) {\n\t\tmodifiedLog.address = toChecksumAddress(log.address);\n\t}\n\n\treturn modifiedLog;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = (receipt: ReceiptInput): ReceiptOutput => {\n\tif (typeof receipt !== 'object') {\n\t\tthrow new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n\t}\n\tconst modifiedReceipt = { ...receipt } as unknown as Mutable<ReceiptOutput>;\n\n\tif (receipt.blockNumber) {\n\t\tmodifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n\t}\n\n\tif (receipt.transactionIndex) {\n\t\tmodifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n\t}\n\n\tmodifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n\tmodifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n\tif (receipt.logs && Array.isArray(receipt.logs)) {\n\t\tmodifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n\t}\n\n\tif (receipt.effectiveGasPrice) {\n\t\tmodifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n\t}\n\n\tif (receipt.contractAddress) {\n\t\tmodifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n\t}\n\n\tif (receipt.status) {\n\t\tmodifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n\t}\n\n\treturn modifiedReceipt;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = (block: BlockInput): BlockOutput => {\n\tconst modifiedBlock = { ...block } as unknown as Mutable<BlockOutput>;\n\n\t// transform to number\n\tmodifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n\tmodifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n\tmodifiedBlock.size = hexToNumber(block.size);\n\tmodifiedBlock.timestamp = hexToNumber(block.timestamp);\n\n\tif (block.number) {\n\t\tmodifiedBlock.number = hexToNumber(block.number);\n\t}\n\n\tif (block.difficulty) {\n\t\tmodifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n\t}\n\n\tif (block.totalDifficulty) {\n\t\tmodifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n\t}\n\n\tif (block.transactions && Array.isArray(block.transactions)) {\n\t\tmodifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n\t}\n\n\tif (block.miner) {\n\t\tmodifiedBlock.miner = toChecksumAddress(block.miner);\n\t}\n\n\tif (block.baseFeePerGas) {\n\t\tmodifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);\n\t}\n\n\treturn modifiedBlock;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = (post: PostOutput): PostInput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostInput>;\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = numberToHex(post.ttl);\n\t}\n\n\tif (post.workToProve) {\n\t\tmodifiedPost.workToProve = numberToHex(post.workToProve);\n\t}\n\n\tif (post.priority) {\n\t\tmodifiedPost.priority = numberToHex(post.priority);\n\t}\n\n\t// fallback\n\tif (post.topics && !Array.isArray(post.topics)) {\n\t\tmodifiedPost.topics = post.topics ? [post.topics] : [];\n\t}\n\n\t// format the following options\n\tmodifiedPost.topics = modifiedPost.topics?.map(topic =>\n\t\ttopic.startsWith('0x') ? topic : fromUtf8(topic),\n\t);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = (post: PostInput): PostOutput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostOutput>;\n\n\tif (post.expiry) {\n\t\tmodifiedPost.expiry = hexToNumber(post.expiry);\n\t}\n\n\tif (post.sent) {\n\t\tmodifiedPost.sent = hexToNumber(post.sent);\n\t}\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = hexToNumber(post.ttl);\n\t}\n\n\tif (post.workProved) {\n\t\tmodifiedPost.workProved = hexToNumber(post.workProved);\n\t}\n\n\t// post.payloadRaw = post.payload;\n\t// post.payload = utils.hexToAscii(post.payload);\n\n\t// if (utils.isJson(post.payload)) {\n\t//     post.payload = JSON.parse(post.payload);\n\t// }\n\n\t// format the following options\n\tif (!post.topics) {\n\t\tmodifiedPost.topics = [];\n\t}\n\n\tmodifiedPost.topics = modifiedPost.topics?.map(toUtf8);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = (result: SyncInput): SyncOutput => {\n\tconst modifiedResult = { ...result } as unknown as Mutable<SyncOutput>;\n\n\tmodifiedResult.startingBlock = hexToNumber(result.startingBlock);\n\tmodifiedResult.currentBlock = hexToNumber(result.currentBlock);\n\tmodifiedResult.highestBlock = hexToNumber(result.highestBlock);\n\n\tif (result.knownStates) {\n\t\tmodifiedResult.knownStates = hexToNumber(result.knownStates);\n\t}\n\n\tif (result.pulledStates) {\n\t\tmodifiedResult.pulledStates = hexToNumber(result.pulledStates);\n\t}\n\n\treturn modifiedResult;\n};\n"]},"metadata":{},"sourceType":"module"}