{"ast":null,"code":"export function number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\nexport function exists(instance) {\n  let checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n  bytes(out);\n  const min = instance.outputLen;\n\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output\n};\nexport default assert;","map":{"version":3,"mappings":"AAAA,OAAM,SAAUA,MAAV,CAAiBC,CAAjB,EAA0B;EAC9B,IAAI,CAACC,MAAM,CAACC,aAAP,CAAqBF,CAArB,CAAD,IAA4BA,CAAC,GAAG,CAApC,EAAuC,MAAM,IAAIG,KAAJ,CAAU,2BAA2BH,CAAC,EAAtC,CAAN;AACxC;AAED,OAAM,SAAUI,IAAV,CAAeC,CAAf,EAAyB;EAC7B,IAAI,OAAOA,CAAP,KAAa,SAAjB,EAA4B,MAAM,IAAIF,KAAJ,CAAU,yBAAyBE,CAAC,EAApC,CAAN;AAC7B;AAED,OAAM,SAAUC,KAAV,CAAgBD,CAAhB,EAA+D;EACnE,IAAI,EAAEA,CAAC,YAAYE,UAAf,CAAJ,EAAgC,MAAM,IAAIJ,KAAJ,CAAU,qBAAV,CAAN;;EADmC,kCAAjBK,OAAiB;IAAjBA,OAAiB;EAAA;;EAEnE,IAAIA,OAAO,CAACC,MAAR,GAAiB,CAAjB,IAAsB,CAACD,OAAO,CAACE,QAAR,CAAiBL,CAAC,CAACI,MAAnB,CAA3B,EACE,MAAM,IAAIN,KAAJ,CAAU,iCAAiCK,OAAO,mBAAmBH,CAAC,CAACI,MAAM,EAA7E,CAAN;AACH;AAQD,OAAM,SAAUE,IAAV,CAAeA,IAAf,EAAyB;EAC7B,IAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOA,IAAI,CAACC,MAAZ,KAAuB,UAAzD,EACE,MAAM,IAAIT,KAAJ,CAAU,iDAAV,CAAN;EACFJ,MAAM,CAACY,IAAI,CAACE,SAAN,CAAN;EACAd,MAAM,CAACY,IAAI,CAACG,QAAN,CAAN;AACD;AAED,OAAM,SAAUC,MAAV,CAAiBC,QAAjB,EAAoD;EAAA,IAApBC,aAAoB,uEAAJ,IAAI;EACxD,IAAID,QAAQ,CAACE,SAAb,EAAwB,MAAM,IAAIf,KAAJ,CAAU,kCAAV,CAAN;EACxB,IAAIc,aAAa,IAAID,QAAQ,CAACG,QAA9B,EAAwC,MAAM,IAAIhB,KAAJ,CAAU,uCAAV,CAAN;AACzC;AACD,OAAM,SAAUiB,MAAV,CAAiBC,GAAjB,EAA2BL,QAA3B,EAAwC;EAC5CV,KAAK,CAACe,GAAD,CAAL;EACA,MAAMC,GAAG,GAAGN,QAAQ,CAACH,SAArB;;EACA,IAAIQ,GAAG,CAACZ,MAAJ,GAAaa,GAAjB,EAAsB;IACpB,MAAM,IAAInB,KAAJ,CAAU,yDAAyDmB,GAAG,EAAtE,CAAN;EACD;AACF;AAED,MAAMC,MAAM,GAAG;EACbxB,MADa;EAEbK,IAFa;EAGbE,KAHa;EAIbK,IAJa;EAKbI,MALa;EAMbK;AANa,CAAf;AASA,eAAeG,MAAf","names":["number","n","Number","isSafeInteger","Error","bool","b","bytes","Uint8Array","lengths","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/hashes/src/_assert.ts"],"sourcesContent":["export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n"]},"metadata":{},"sourceType":"module"}