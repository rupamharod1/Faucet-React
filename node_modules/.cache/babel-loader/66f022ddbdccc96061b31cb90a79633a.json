{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isContractAddressInBloom = exports.isUserEthereumAddressInBloom = exports.isInBloom = exports.isBloom = void 0;\n\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\n\nconst utils_js_1 = require(\"../utils.js\");\n\nconst address_js_1 = require(\"./address.js\");\n\nconst string_js_1 = require(\"./string.js\");\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\n\n\nconst isBloom = bloom => {\n  if (typeof bloom !== 'string') {\n    return false;\n  }\n\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  }\n\n  if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.isBloom = isBloom;\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\n\nconst isInBloom = (bloom, value) => {\n  if (typeof value === 'string' && !(0, string_js_1.isHexStrict)(value)) {\n    return false;\n  }\n\n  if (!(0, exports.isBloom)(bloom)) {\n    return false;\n  }\n\n  const uint8Array = typeof value === 'string' ? (0, utils_js_1.hexToUint8Array)(value) : value;\n  const hash = (0, utils_js_1.uint8ArrayToHexString)((0, keccak_js_1.keccak256)(uint8Array)).slice(2);\n\n  for (let i = 0; i < 12; i += 4) {\n    // calculate bit position in bloom filter that must be active\n    const bitpos = // eslint-disable-next-line no-bitwise\n    (parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16) & 2047; // test if bitpos in bloom is active\n\n    const code = (0, utils_js_1.codePointToInt)(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4))); // eslint-disable-next-line no-bitwise\n\n    const offset = 1 << bitpos % 4; // eslint-disable-next-line no-bitwise\n\n    if ((code & offset) !== offset) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.isInBloom = isInBloom;\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\n\nconst isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {\n  if (!(0, exports.isBloom)(bloom)) {\n    return false;\n  }\n\n  if (!(0, address_js_1.isAddress)(ethereumAddress)) {\n    return false;\n  } // you have to pad the ethereum address to 32 bytes\n  // else the bloom filter does not work\n  // this is only if your matching the USERS\n  // ethereum address. Contract address do not need this\n  // hence why we have 2 methods\n  // (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n\n\n  const address = (0, utils_js_1.padLeft)(ethereumAddress, 64);\n  return (0, exports.isInBloom)(bloom, address);\n};\n\nexports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\n\nconst isContractAddressInBloom = (bloom, contractAddress) => {\n  if (!(0, exports.isBloom)(bloom)) {\n    return false;\n  }\n\n  if (!(0, address_js_1.isAddress)(contractAddress)) {\n    return false;\n  }\n\n  return (0, exports.isInBloom)(bloom, contractAddress);\n};\n\nexports.isContractAddressInBloom = isContractAddressInBloom;","map":{"version":3,"mappings":"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","names":["isBloom","bloom","test","exports","isInBloom","value","uint8Array","hash","slice","i","bitpos","parseInt","code","charCodeAt","length","Math","floor","offset","isUserEthereumAddressInBloom","ethereumAddress","address","isContractAddressInBloom","contractAddress"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-validator/src/validation/bloom.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { ValidInputTypes } from '../types.js';\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\nimport { isAddress } from './address.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\nexport const isBloom = (bloom: ValidInputTypes): boolean => {\n\tif (typeof bloom !== 'string') {\n\t\treturn false;\n\t}\n\n\tif (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\nexport const isInBloom = (bloom: string, value: string | Uint8Array): boolean => {\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn false;\n\t}\n\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tconst uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\n\n\tconst hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\n\n\tfor (let i = 0; i < 12; i += 4) {\n\t\t// calculate bit position in bloom filter that must be active\n\t\tconst bitpos =\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t((parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16)) &\n\t\t\t2047;\n\n\t\t// test if bitpos in bloom is active\n\t\tconst code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst offset = 1 << bitpos % 4;\n\n\t\t// eslint-disable-next-line no-bitwise\n\t\tif ((code & offset) !== offset) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\nexport const isUserEthereumAddressInBloom = (bloom: string, ethereumAddress: string): boolean => {\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (!isAddress(ethereumAddress)) {\n\t\treturn false;\n\t}\n\n\t// you have to pad the ethereum address to 32 bytes\n\t// else the bloom filter does not work\n\t// this is only if your matching the USERS\n\t// ethereum address. Contract address do not need this\n\t// hence why we have 2 methods\n\t// (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n\n\tconst address = padLeft(ethereumAddress, 64);\n\n\treturn isInBloom(bloom, address);\n};\n\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\nexport const isContractAddressInBloom = (bloom: string, contractAddress: string): boolean => {\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (!isAddress(contractAddress)) {\n\t\treturn false;\n\t}\n\n\treturn isInBloom(bloom, contractAddress);\n};\n"]},"metadata":{},"sourceType":"script"}