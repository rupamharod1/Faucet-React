{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\nconst sha256_1 = require(\"@noble/hashes/sha256\");\n\nconst utils_1 = require(\"@noble/hashes/utils\");\n\nconst modular_js_1 = require(\"./abstract/modular.js\");\n\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\n\nconst utils_js_1 = require(\"./abstract/utils.js\");\n\nconst hash_to_curve_js_1 = require(\"./abstract/hash-to-curve.js\");\n\nconst _shortw_utils_js_1 = require(\"./_shortw_utils.js\");\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\n\n\nfunction sqrtMod(y) {\n  const P = secp256k1P; // prettier-ignore\n\n  const _3n = BigInt(3),\n        _6n = BigInt(6),\n        _11n = BigInt(11),\n        _22n = BigInt(22); // prettier-ignore\n\n\n  const _23n = BigInt(23),\n        _44n = BigInt(44),\n        _88n = BigInt(88);\n\n  const b2 = y * y * y % P; // x^3, 11\n\n  const b3 = b2 * b2 * y % P; // x^7\n\n  const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;\n  const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;\n  const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;\n  const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;\n  const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;\n  const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;\n  const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;\n  const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;\n  const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;\n  const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;\n  const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;\n  const root = (0, modular_js_1.pow2)(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, {\n  sqrt: sqrtMod\n});\nexports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n  a: BigInt(0),\n  b: BigInt(7),\n  Fp,\n  n: secp256k1N,\n  // Base point (x, y) aka generator point\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  h: BigInt(1),\n  lowS: true,\n\n  /**\n   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n   */\n  endo: {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar: k => {\n      const n = secp256k1N;\n      const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n      const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n      const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n      const b2 = a1;\n      const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n      const c1 = divNearest(b2 * k, n);\n      const c2 = divNearest(-b1 * k, n);\n      let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n      let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n      const k1neg = k1 > POW_2_128;\n      const k2neg = k2 > POW_2_128;\n      if (k1neg) k1 = n - k1;\n      if (k2neg) k2 = n - k2;\n\n      if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalar: Endomorphism failed, k=' + k);\n      }\n\n      return {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      };\n    }\n  }\n}, sha256_1.sha256); // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n\nconst _0n = BigInt(0);\n\nconst fe = x => typeof x === 'bigint' && _0n < x && x < secp256k1P;\n\nconst ge = x => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\n\n\nconst TAGGED_HASH_PREFIXES = {};\n\nfunction taggedHash(tag) {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n\n  if (tagP === undefined) {\n    const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, c => c.charCodeAt(0)));\n    tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n\n  return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));\n} // ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\n\n\nconst pointToBytes = point => point.toRawBytes(true).slice(1);\n\nconst numTo32b = n => (0, utils_js_1.numberToBytesBE)(n, 32);\n\nconst modP = x => (0, modular_js_1.mod)(x, secp256k1P);\n\nconst modN = x => (0, modular_js_1.mod)(x, secp256k1N);\n\nconst Point = exports.secp256k1.ProjectivePoint;\n\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b); // Calculate point, scalar and bytes\n\n\nfunction schnorrGetExtPubKey(priv) {\n  let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return {\n    scalar: scalar,\n    bytes: pointToBytes(p)\n  };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\n\n\nfunction lift_x(x) {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\n\n\nfunction challenge() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\n\n\nfunction schnorrGetPublicKey(privateKey) {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\n\n\nfunction schnorrSign(message, privateKey) {\n  let auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, utils_1.randomBytes)(32);\n  const m = (0, utils_js_1.ensureBytes)('message', message);\n  const {\n    bytes: px,\n    scalar: d\n  } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n\n  const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n\n  const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n\n  const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n\n  const {\n    bytes: rx,\n    scalar: k\n  } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32); // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\n\n\nfunction schnorrVerify(signature, message, publicKey) {\n  const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n  const m = (0, utils_js_1.ensureBytes)('message', message);\n  const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n\n  try {\n    const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n\n    const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n\n    if (!fe(r)) return false;\n    const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexports.schnorr = (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE: utils_js_1.numberToBytesBE,\n    bytesToNumberBE: utils_js_1.bytesToNumberBE,\n    taggedHash,\n    mod: modular_js_1.mod\n  }\n}))();\n\nconst isoMap = /* @__PURE__ */(() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [// xNum\n['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'], // xDen\n['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n], // yNum\n['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'], // yDen\n['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j)))))();\n\nconst mapSWU = /* @__PURE__ */(() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fp.create(BigInt('-11'))\n}))();\n\nconst htf = /* @__PURE__ */(() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, scalars => {\n  const {\n    x,\n    y\n  } = mapSWU(Fp.create(scalars[0]));\n  return isoMap(x, y);\n}, {\n  DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n  p: Fp.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256_1.sha256\n}))();\n\nexports.hashToCurve = (() => htf.hashToCurve)();\n\nexports.encodeToCurve = (() => htf.encodeToCurve)();","map":{"version":3,"mappings":"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","names":["secp256k1P","BigInt","secp256k1N","_1n","_2n","divNearest","a","b","sqrtMod","y","P","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","Fp","eql","sqr","Error","undefined","sqrt","exports","n","Gx","Gy","h","lowS","endo","beta","splitScalar","k","a1","b1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","sha256_1","_0n","fe","x","ge","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","Uint8Array","from","c","charCodeAt","messages","pointToBytes","point","toRawBytes","slice","numTo32b","modP","modN","Point","ProjectivePoint","GmulAdd","Q","BASE","multiplyAndAddUnsafe","schnorrGetExtPubKey","priv","d_","utils","normPrivateKeyToScalar","p","fromPrivateKey","scalar","hasEvenY","bytes","lift_x","xx","assertValidity","challenge","args","schnorrGetPublicKey","privateKey","schnorrSign","message","auxRand","m","px","d","t","rand","k_","rx","e","sig","set","schnorrVerify","signature","publicKey","pub","r","subarray","s","R","toAffine","error","getPublicKey","sign","verify","randomPrivateKey","numberToBytesBE","utils_js_1","bytesToNumberBE","mod","modular_js_1","isoMap","map","i","j","mapSWU","A","B","Z","create","htf","scalars","DST","encodeDST","ORDER","expand","hash","hashToCurve","encodeToCurve"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"]},"metadata":{},"sourceType":"script"}