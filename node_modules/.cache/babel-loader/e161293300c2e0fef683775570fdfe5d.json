{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport { create, decrypt, encrypt, hashMessage, privateKeyToAccount, recover, recoverTransaction, signTransaction, sign, Wallet } from 'web3-eth-accounts';\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\n\nexport const initAccountsForContext = context => {\n  const signTransactionWithContext = (transaction, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const tx = yield prepareTransactionForSigning(transaction, context);\n    const privateKeyBytes = format({\n      format: 'bytes'\n    }, privateKey, ETH_DATA_FORMAT);\n    return signTransaction(tx, privateKeyBytes);\n  });\n\n  const privateKeyToAccountWithContext = privateKey => {\n    const account = privateKeyToAccount(privateKey);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n\n  const decryptWithContext = (keystore, password, options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n\n    const account = yield decrypt(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  });\n\n  const createWithContext = () => {\n    const account = create();\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n\n  const wallet = new Wallet({\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext\n  });\n  return {\n    signTransaction: signTransactionWithContext,\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext,\n    recoverTransaction,\n    hashMessage,\n    sign,\n    recover,\n    encrypt,\n    wallet\n  };\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAAwDA,eAAxD,QAA+E,YAA/E;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,SAASC,4BAAT,QAA6C,UAA7C;AACA,SACCC,MADD,EAECC,OAFD,EAGCC,OAHD,EAICC,WAJD,EAKCC,mBALD,EAMCC,OAND,EAOCC,kBAPD,EAQCC,eARD,EASCC,IATD,EAUCC,MAVD,QAWO,mBAXP;AAaA;;;;;;;;AAOA,OAAO,MAAMC,sBAAsB,GAAIC,OAAD,IAA0C;EAC/E,MAAMC,0BAA0B,GAAG,CAAOC,WAAP,EAAiCC,UAAjC,KAAsDC;IACxF,MAAMC,EAAE,GAAG,MAAMjB,4BAA4B,CAACc,WAAD,EAAcF,OAAd,CAA7C;IAEA,MAAMM,eAAe,GAAGnB,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBgB,UAAtB,EAAkCjB,eAAlC,CAA9B;IAEA,OAAOU,eAAe,CAACS,EAAD,EAAKC,eAAL,CAAtB;EACA,CANwF,CAAzF;;EAQA,MAAMC,8BAA8B,GAAIJ,UAAD,IAAoC;IAC1E,MAAMK,OAAO,GAAGf,mBAAmB,CAACU,UAAD,CAAnC;IAEA,uCACIK,OADJ,GACW;MACVZ,eAAe,EAASM,WAAP,IAAmCE;QACnD,iCAA0B,CAACF,WAAD,EAAcM,OAAO,CAACL,UAAtB,CAA1B;MAA2D,CADR;IAD1C,CADX;EAKA,CARD;;EAUA,MAAMM,kBAAkB,GAAG,CAC1BC,QAD0B,EAE1BC,QAF0B,EAG1BC,OAH0B,KAIvBR;;;IACH,MAAMI,OAAO,GAAG,MAAMlB,OAAO,CAACoB,QAAD,EAAWC,QAAX,EAAqB,MAACC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,SAAV,MAA+B,IAA/B,IAA+BC,aAA/B,GAA+BA,EAA/B,GAAmC,IAAxD,CAA7B;IAEA,uCACIN,OADJ,GACW;MACVZ,eAAe,EAASM,WAAP,IAAmCE;QACnD,iCAA0B,CAACF,WAAD,EAAcM,OAAO,CAACL,UAAtB,CAA1B;MAA2D,CADR;IAD1C,CADX;EAKA,CARG,CAJJ;;EAcA,MAAMY,iBAAiB,GAAG,MAAK;IAC9B,MAAMP,OAAO,GAAGnB,MAAM,EAAtB;IAEA,uCACImB,OADJ,GACW;MACVZ,eAAe,EAASM,WAAP,IAAmCE;QACnD,iCAA0B,CAACF,WAAD,EAAcM,OAAO,CAACL,UAAtB,CAA1B;MAA2D,CADR;IAD1C,CADX;EAKA,CARD;;EAUA,MAAMa,MAAM,GAAG,IAAIlB,MAAJ,CAAW;IACzBT,MAAM,EAAE0B,iBADiB;IAEzBtB,mBAAmB,EAAEc,8BAFI;IAGzBjB,OAAO,EAAEmB;EAHgB,CAAX,CAAf;EAMA,OAAO;IACNb,eAAe,EAAEK,0BADX;IAENZ,MAAM,EAAE0B,iBAFF;IAGNtB,mBAAmB,EAAEc,8BAHf;IAINjB,OAAO,EAAEmB,kBAJH;IAKNd,kBALM;IAMNH,WANM;IAONK,IAPM;IAQNH,OARM;IASNH,OATM;IAUNyB;EAVM,CAAP;AAYA,CA7DM","names":["ETH_DATA_FORMAT","format","prepareTransactionForSigning","create","decrypt","encrypt","hashMessage","privateKeyToAccount","recover","recoverTransaction","signTransaction","sign","Wallet","initAccountsForContext","context","signTransactionWithContext","transaction","privateKey","__awaiter","tx","privateKeyBytes","privateKeyToAccountWithContext","account","decryptWithContext","keystore","password","options","nonStrict","_a","createWithContext","wallet"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3/src/accounts.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EthExecutionAPI, Bytes, Transaction, KeyStore, ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { Web3Context } from 'web3-core';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\trecover,\n\trecoverTransaction,\n\tsignTransaction,\n\tsign,\n\tWallet,\n} from 'web3-eth-accounts';\n\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport const initAccountsForContext = (context: Web3Context<EthExecutionAPI>) => {\n\tconst signTransactionWithContext = async (transaction: Transaction, privateKey: Bytes) => {\n\t\tconst tx = await prepareTransactionForSigning(transaction, context);\n\n\t\tconst privateKeyBytes = format({ format: 'bytes' }, privateKey, ETH_DATA_FORMAT);\n\n\t\treturn signTransaction(tx, privateKeyBytes);\n\t};\n\n\tconst privateKeyToAccountWithContext = (privateKey: Uint8Array | string) => {\n\t\tconst account = privateKeyToAccount(privateKey);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst decryptWithContext = async (\n\t\tkeystore: KeyStore | string,\n\t\tpassword: string,\n\t\toptions?: Record<string, unknown>,\n\t) => {\n\t\tconst account = await decrypt(keystore, password, (options?.nonStrict as boolean) ?? true);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst createWithContext = () => {\n\t\tconst account = create();\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst wallet = new Wallet({\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t});\n\n\treturn {\n\t\tsignTransaction: signTransactionWithContext,\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t\trecoverTransaction,\n\t\thashMessage,\n\t\tsign,\n\t\trecover,\n\t\tencrypt,\n\t\twallet,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}