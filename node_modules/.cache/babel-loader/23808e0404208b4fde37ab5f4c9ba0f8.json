{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeMarketEIP1559Transaction = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst rlp_1 = require(\"@ethereumjs/rlp\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst constants_js_1 = require(\"./constants.js\");\n\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\n\nconst utils_js_1 = require(\"./utils.js\");\n\nconst utils_js_2 = require(\"../common/utils.js\");\n\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_UINT8ARRAY = (0, web3_utils_1.hexToBytes)(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n// eslint-disable-next-line no-use-before-define\n\nclass FeeMarketEIP1559Transaction extends baseTransaction_js_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n    this.DEFAULT_HARDFORK = 'london';\n    const {\n      chainId,\n      accessList,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n\n    if (!this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]); // Populate the access list fields\n\n    const accessListData = (0, utils_js_1.getAccessListData)(accessList !== null && accessList !== void 0 ? accessList : []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    (0, utils_js_1.verifyAccessList)(this.accessList);\n    this.maxFeePerGas = (0, utils_js_2.uint8ArrayToBigInt)((0, utils_js_2.toUint8Array)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    this.maxPriorityFeePerGas = (0, utils_js_2.uint8ArrayToBigInt)((0, utils_js_2.toUint8Array)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas\n    });\n\n    baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n\n    if (this.gasLimit * this.maxFeePerGas > constants_js_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n      const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n\n      throw new Error(msg);\n    }\n\n    this._validateYParity();\n\n    this._validateHighS();\n\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  static fromTxData(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n\n\n  static fromSerializedTx(serialized) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!(0, web3_utils_1.uint8ArrayEquals)(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${(0, web3_utils_1.bytesToHex)(serialized.subarray(0, 1))}`);\n    }\n\n    const values = rlp_1.RLP.decode(serialized.subarray(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n\n\n  static fromValuesArray(values) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;\n\n    this._validateNotArray({\n      chainId,\n      v\n    });\n\n    (0, web3_validator_1.validateNoLeadingZeroes)({\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new FeeMarketEIP1559Transaction({\n      chainId: (0, utils_js_2.uint8ArrayToBigInt)(chainId),\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n      v: v !== undefined ? (0, utils_js_2.uint8ArrayToBigInt)(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    let cost = super.getDataFee();\n    cost += BigInt((0, utils_js_1.getDataFeeEIP2930)(this.accessList, this.common));\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return cost;\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n\n\n  getUpfrontCost() {\n    let baseFee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BigInt(0);\n    const prio = this.maxPriorityFeePerGas;\n    const maxBase = this.maxFeePerGas - baseFee;\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n    const gasPrice = inclusionFeePerGas + baseFee;\n    return this.gasLimit * gasPrice + this.value;\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Uint8Array values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n\n\n  raw() {\n    return [(0, utils_js_2.bigIntToUnpaddedUint8Array)(this.chainId), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.nonce), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.maxPriorityFeePerGas), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.maxFeePerGas), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.value), this.data, this.accessList, this.v !== undefined ? (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]), this.r !== undefined ? (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]), this.s !== undefined ? (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  serialize() {\n    const base = this.raw();\n    return (0, web3_utils_1.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, rlp_1.RLP.encode(base));\n  }\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n\n\n  getMessageToSign() {\n    let hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const base = this.raw().slice(0, 9);\n    const message = (0, web3_utils_1.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, rlp_1.RLP.encode(base));\n\n    if (hashMessage) {\n      return (0, keccak_js_1.keccak256)(message);\n    }\n\n    return message;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, keccak_js_1.keccak256)(this.serialize());\n      }\n\n      return this.cache.hash;\n    }\n\n    return (0, keccak_js_1.keccak256)(this.serialize());\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n\n    this._validateHighS();\n\n    try {\n      return (0, utils_js_2.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n      (0, utils_js_2.bigIntToUnpaddedUint8Array)(r), (0, utils_js_2.bigIntToUnpaddedUint8Array)(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  }\n\n  _processSignature(v, r, s) {\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: (0, utils_js_2.uint8ArrayToBigInt)(r),\n      s: (0, utils_js_2.uint8ArrayToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  toJSON() {\n    const accessListJSON = (0, utils_js_1.getAccessListJSON)(this.accessList);\n    return {\n      chainId: (0, utils_js_2.bigIntToHex)(this.chainId),\n      nonce: (0, utils_js_2.bigIntToHex)(this.nonce),\n      maxPriorityFeePerGas: (0, utils_js_2.bigIntToHex)(this.maxPriorityFeePerGas),\n      maxFeePerGas: (0, utils_js_2.bigIntToHex)(this.maxFeePerGas),\n      gasLimit: (0, utils_js_2.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, utils_js_2.bigIntToHex)(this.value),\n      data: (0, web3_utils_1.bytesToHex)(this.data),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, utils_js_2.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, utils_js_2.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, utils_js_2.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n\n}\n\nexports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","toString","padStart","FeeMarketEIP1559Transaction","baseTransaction_js_1","constructor","txData","opts","Object","type","chainId","accessList","maxFeePerGas","maxPriorityFeePerGas","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessListJSON","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","constants_js_1","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","fromTxData","fromSerializedTx","serialized","subarray","values","rlp_1","decode","Array","isArray","fromValuesArray","length","nonce","to","value","data","v","r","s","undefined","getDataFee","cache","dataFee","hardfork","cost","BigInt","isFrozen","getUpfrontCost","baseFee","prio","maxBase","inclusionFeePerGas","gasPrice","raw","buf","Uint8Array","from","serialize","base","encode","getMessageToSign","hashMessage","slice","message","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","e","_processSignature","txOptions","toJSON","accessListJSON","errorStr","_getSharedErrorPostfix","exports"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/tx/eip1559Transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport {\n\tgetAccessListData,\n\tgetAccessListJSON,\n\tgetDataFeeEIP2930,\n\tverifyAccessList,\n} from './utils.js';\nimport {\n\tbigIntToHex,\n\ttoUint8Array,\n\tecrecover,\n\tuint8ArrayToBigInt,\n\tbigIntToUnpaddedUint8Array,\n} from '../common/utils.js';\nimport type {\n\tAccessList,\n\tAccessListUint8Array,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxOptions,\n} from './types.js';\nimport type { Common } from '../common/common.js';\n\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n// eslint-disable-next-line no-use-before-define\nexport class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n\tpublic readonly chainId: bigint;\n\tpublic readonly accessList: AccessListUint8Array;\n\tpublic readonly AccessListJSON: AccessList;\n\tpublic readonly maxPriorityFeePerGas: bigint;\n\tpublic readonly maxFeePerGas: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK = 'london';\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, v, r, s }\n\t *\n\t * Notes:\n\t * - `chainId` will be set automatically if not provided\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n\t\treturn new FeeMarketEIP1559Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\n\t\t\t\t\tserialized.subarray(0, 1),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t\tconst values = RLP.decode(serialized.subarray(1));\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS]`\n\t */\n\tpublic static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n\t\tif (values.length !== 9 && values.length !== 12) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [\n\t\t\tchainId,\n\t\t\tnonce,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tmaxFeePerGas,\n\t\t\tgasLimit,\n\t\t\tto,\n\t\t\tvalue,\n\t\t\tdata,\n\t\t\taccessList,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts,\n\t\t] = values;\n\n\t\tthis._validateNotArray({ chainId, v });\n\t\tvalidateNoLeadingZeroes({\n\t\t\tnonce,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tmaxFeePerGas,\n\t\t\tgasLimit,\n\t\t\tvalue,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts,\n\t\t});\n\n\t\treturn new FeeMarketEIP1559Transaction(\n\t\t\t{\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\n\t\t\t\tnonce,\n\t\t\t\tmaxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\taccessList: accessList ?? [],\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\t\tconst { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n\n\t\tthis.common = this._getCommon(opts.common, chainId);\n\t\tthis.chainId = this.common.chainId();\n\n\t\tif (!this.common.isActivatedEIP(1559)) {\n\t\t\tthrow new Error('EIP-1559 not enabled on Common');\n\t\t}\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n\n\t\t// Populate the access list fields\n\t\tconst accessListData = getAccessListData(accessList ?? []);\n\t\tthis.accessList = accessListData.accessList;\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\n\t\t// Verify the access list format.\n\t\tverifyAccessList(this.accessList);\n\n\t\tthis.maxFeePerGas = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(maxFeePerGas === '' ? '0x' : maxFeePerGas),\n\t\t);\n\t\tthis.maxPriorityFeePerGas = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas),\n\t\t);\n\n\t\tthis._validateCannotExceedMaxInteger({\n\t\t\tmaxFeePerGas: this.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: this.maxPriorityFeePerGas,\n\t\t});\n\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tthis._validateYParity();\n\t\tthis._validateHighS();\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tlet cost = super.getDataFee();\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: cost,\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t * @param baseFee The base fee of the block (will be set to 0 if not provided)\n\t */\n\tpublic getUpfrontCost(baseFee = BigInt(0)): bigint {\n\t\tconst prio = this.maxPriorityFeePerGas;\n\t\tconst maxBase = this.maxFeePerGas - baseFee;\n\t\tconst inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n\t\tconst gasPrice = inclusionFeePerGas + baseFee;\n\t\treturn this.gasLimit * gasPrice + this.value;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n\t *\n\t * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS]`\n\t *\n\t * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): FeeMarketEIP1559ValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas),\n\t\t\tbigIntToUnpaddedUint8Array(this.maxFeePerGas),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.accessList,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the EIP-1559 transaction.\n\t *\n\t * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS])`\n\t *\n\t * Note that in contrast to the legacy tx serialization format this is not\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\n\t * the RLP encoding of the values.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\tconst base = this.raw();\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t}\n\n\t/**\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: in contrast to the legacy tx the raw message format is already\n\t * serialized and doesn't need to be RLP encoded any more.\n\t *\n\t * ```javascript\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\n\t\tconst base = this.raw().slice(0, 9);\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(message);\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(this.serialize());\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature(): Uint8Array {\n\t\treturn this.getMessageToSign();\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tchainId: this.chainId,\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tmaxPriorityFeePerGas: this.maxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas: this.maxFeePerGas,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\taccessList: this.accessList,\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic toJSON(): JsonTx {\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\n\n\t\treturn {\n\t\t\tchainId: bigIntToHex(this.chainId),\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tmaxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),\n\t\t\tmaxFeePerGas: bigIntToHex(this.maxFeePerGas),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\taccessList: accessListJSON,\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}