{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { jsonRpc, Web3DeferredPromise } from 'web3-utils';\nimport { OperationAbortError, OperationTimeoutError, ResponseError } from 'web3-errors';\nexport const DEFAULT_BATCH_REQUEST_TIMEOUT = 1000;\nexport class Web3BatchRequest {\n  constructor(requestManager) {\n    this._requestManager = requestManager;\n    this._requests = new Map();\n  }\n\n  get requests() {\n    return [...this._requests.values()].map(r => r.payload);\n  }\n\n  add(request) {\n    const payload = jsonRpc.toPayload(request);\n    const promise = new Web3DeferredPromise();\n\n    this._requests.set(payload.id, {\n      payload,\n      promise\n    });\n\n    return promise;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  execute(options) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.requests.length === 0) {\n        return Promise.resolve([]);\n      }\n\n      const request = new Web3DeferredPromise({\n        timeout: (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : DEFAULT_BATCH_REQUEST_TIMEOUT,\n        eagerStart: true,\n        timeoutMessage: 'Batch request timeout'\n      });\n\n      this._processBatchRequest(request).catch(err => request.reject(err));\n\n      request.catch(err => {\n        if (err instanceof OperationTimeoutError) {\n          this._abortAllRequests('Batch request timeout');\n        }\n\n        request.reject(err);\n      });\n      return request;\n    });\n  }\n\n  _processBatchRequest(promise) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this._requestManager.sendBatch([...this._requests.values()].map(r => r.payload));\n\n      if (response.length !== this._requests.size) {\n        this._abortAllRequests('Invalid batch response');\n\n        throw new ResponseError(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);\n      }\n\n      const requestIds = this.requests.map(r => r.id).map(Number).sort((a, b) => a - b);\n      const responseIds = response.map(r => r.id).map(Number).sort((a, b) => a - b);\n\n      if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {\n        this._abortAllRequests('Invalid batch response');\n\n        throw new ResponseError(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);\n      }\n\n      for (const res of response) {\n        if (jsonRpc.isResponseWithResult(res)) {\n          (_a = this._requests.get(res.id)) === null || _a === void 0 ? void 0 : _a.promise.resolve(res.result);\n        } else if (jsonRpc.isResponseWithError(res)) {\n          (_b = this._requests.get(res.id)) === null || _b === void 0 ? void 0 : _b.promise.reject(res.error);\n        }\n      }\n\n      promise.resolve(response);\n    });\n  }\n\n  _abortAllRequests(msg) {\n    for (const {\n      promise\n    } of this._requests.values()) {\n      promise.reject(new OperationAbortError(msg));\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["jsonRpc","Web3DeferredPromise","OperationAbortError","OperationTimeoutError","ResponseError","DEFAULT_BATCH_REQUEST_TIMEOUT","Web3BatchRequest","constructor","requestManager","_requestManager","_requests","Map","requests","values","map","r","payload","add","request","toPayload","promise","set","id","execute","options","length","Promise","resolve","timeout","_a","eagerStart","timeoutMessage","_processBatchRequest","catch","err","reject","_abortAllRequests","response","sendBatch","size","requestIds","Number","sort","a","b","responseIds","JSON","stringify","join","res","isResponseWithResult","get","result","isResponseWithError","_b","error","msg"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-core/src/web3_batch_request.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { JsonRpcBatchResponse, JsonRpcOptionalRequest, JsonRpcRequest } from 'web3-types';\nimport { jsonRpc, Web3DeferredPromise } from 'web3-utils';\nimport { OperationAbortError, OperationTimeoutError, ResponseError } from 'web3-errors';\nimport { Web3RequestManager } from './web3_request_manager.js';\n\nexport const DEFAULT_BATCH_REQUEST_TIMEOUT = 1000;\n\nexport class Web3BatchRequest {\n\tprivate readonly _requestManager: Web3RequestManager;\n\tprivate readonly _requests: Map<\n\t\tnumber,\n\t\t{ payload: JsonRpcRequest; promise: Web3DeferredPromise<unknown> }\n\t>;\n\n\tpublic constructor(requestManager: Web3RequestManager) {\n\t\tthis._requestManager = requestManager;\n\t\tthis._requests = new Map();\n\t}\n\n\tpublic get requests() {\n\t\treturn [...this._requests.values()].map(r => r.payload);\n\t}\n\n\tpublic add<ResponseType = unknown>(request: JsonRpcOptionalRequest<unknown>) {\n\t\tconst payload = jsonRpc.toPayload(request) as JsonRpcRequest;\n\t\tconst promise = new Web3DeferredPromise<ResponseType>();\n\n\t\tthis._requests.set(payload.id as number, { payload, promise });\n\n\t\treturn promise;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic async execute(options?: {\n\t\ttimeout?: number;\n\t}): Promise<JsonRpcBatchResponse<unknown, unknown>> {\n\t\tif (this.requests.length === 0) {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\tconst request = new Web3DeferredPromise<JsonRpcBatchResponse<unknown, unknown>>({\n\t\t\ttimeout: options?.timeout ?? DEFAULT_BATCH_REQUEST_TIMEOUT,\n\t\t\teagerStart: true,\n\t\t\ttimeoutMessage: 'Batch request timeout',\n\t\t});\n\n\t\tthis._processBatchRequest(request).catch(err => request.reject(err));\n\n\t\trequest.catch((err: Error) => {\n\t\t\tif (err instanceof OperationTimeoutError) {\n\t\t\t\tthis._abortAllRequests('Batch request timeout');\n\t\t\t}\n\n\t\t\trequest.reject(err);\n\t\t});\n\n\t\treturn request;\n\t}\n\n\tprivate async _processBatchRequest(\n\t\tpromise: Web3DeferredPromise<JsonRpcBatchResponse<unknown, unknown>>,\n\t) {\n\t\tconst response = await this._requestManager.sendBatch(\n\t\t\t[...this._requests.values()].map(r => r.payload),\n\t\t);\n\n\t\tif (response.length !== this._requests.size) {\n\t\t\tthis._abortAllRequests('Invalid batch response');\n\n\t\t\tthrow new ResponseError(\n\t\t\t\tresponse,\n\t\t\t\t`Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`,\n\t\t\t);\n\t\t}\n\n\t\tconst requestIds = this.requests\n\t\t\t.map(r => r.id)\n\t\t\t.map(Number)\n\t\t\t.sort((a, b) => a - b);\n\n\t\tconst responseIds = response\n\t\t\t.map(r => r.id)\n\t\t\t.map(Number)\n\t\t\t.sort((a, b) => a - b);\n\n\t\tif (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {\n\t\t\tthis._abortAllRequests('Invalid batch response');\n\n\t\t\tthrow new ResponseError(\n\t\t\t\tresponse,\n\t\t\t\t`Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`,\n\t\t\t);\n\t\t}\n\n\t\tfor (const res of response) {\n\t\t\tif (jsonRpc.isResponseWithResult(res)) {\n\t\t\t\tthis._requests.get(res.id as number)?.promise.resolve(res.result);\n\t\t\t} else if (jsonRpc.isResponseWithError(res)) {\n\t\t\t\tthis._requests.get(res.id as number)?.promise.reject(res.error);\n\t\t\t}\n\t\t}\n\n\t\tpromise.resolve(response);\n\t}\n\n\tprivate _abortAllRequests(msg: string) {\n\t\tfor (const { promise } of this._requests.values()) {\n\t\t\tpromise.reject(new OperationAbortError(msg));\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}