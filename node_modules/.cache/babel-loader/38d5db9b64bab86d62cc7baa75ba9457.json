{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/home/rupam/Desktop/Faucet-React/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var request, opts, response, body, headers;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (options == null) {\n              options = {};\n            }\n\n            request = {\n              method: options.method || \"GET\",\n              headers: options.headers || {},\n              body: options.body || undefined\n            };\n\n            if (options.skipFetchSetup !== true) {\n              request.mode = \"cors\"; // no-cors, cors, *same-origin\n\n              request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n\n              request.credentials = \"same-origin\"; // include, *same-origin, omit\n\n              request.redirect = \"follow\"; // manual, *follow, error\n\n              request.referrer = \"client\"; // no-referrer, *client\n            }\n\n            ;\n\n            if (options.fetchOptions != null) {\n              opts = options.fetchOptions;\n\n              if (opts.mode) {\n                request.mode = opts.mode;\n              }\n\n              if (opts.cache) {\n                request.cache = opts.cache;\n              }\n\n              if (opts.credentials) {\n                request.credentials = opts.credentials;\n              }\n\n              if (opts.redirect) {\n                request.redirect = opts.redirect;\n              }\n\n              if (opts.referrer) {\n                request.referrer = opts.referrer;\n              }\n            }\n\n            _context.next = 7;\n            return fetch(href, request);\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return response.arrayBuffer();\n\n          case 10:\n            body = _context.sent;\n            headers = {};\n\n            if (response.headers.forEach) {\n              response.headers.forEach(function (value, key) {\n                headers[key.toLowerCase()] = value;\n              });\n            } else {\n              response.headers.keys().forEach(function (key) {\n                headers[key.toLowerCase()] = response.headers.get(key);\n              });\n            }\n\n            return _context.abrupt(\"return\", {\n              headers: headers,\n              statusCode: response.status,\n              statusMessage: response.statusText,\n              body: arrayify(new Uint8Array(body))\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,QAAT,QAAyB,sBAAzB;AAMA,OAAM,SAAgBC,MAAhB,CAAuBC,IAAvB,EAAqCC,OAArC,EAAsD;;;;;;;YACxD,IAAIA,OAAO,IAAI,IAAf,EAAqB;cAAEA,OAAO,GAAG,EAAV;YAAgB;;YAEjCC,UAAuB;cACzBC,MAAM,EAAGF,OAAO,CAACE,MAAR,IAAkB,KADF;cAEzBC,OAAO,EAAGH,OAAO,CAACG,OAAR,IAAmB,EAFJ;cAGzBC,IAAI,EAAGJ,OAAO,CAACI,IAAR,IAAgBC;YAHE;;YAM7B,IAAIL,OAAO,CAACM,cAAR,KAA2B,IAA/B,EAAqC;cACjCL,OAAO,CAACM,IAAR,GAA4B,MAA5B,CADiC,CACgB;;cACjDN,OAAO,CAACO,KAAR,GAA8B,UAA9B,CAFiC,CAEgB;;cACjDP,OAAO,CAACQ,WAAR,GAA0C,aAA1C,CAHiC,CAGyB;;cAC1DR,OAAO,CAACS,QAAR,GAAoC,QAApC,CAJiC,CAIgB;;cACjDT,OAAO,CAACU,QAAR,GAAmB,QAAnB,CALiC,CAKgB;YACpD;;YAAA;;YAED,IAAIX,OAAO,CAACY,YAAR,IAAwB,IAA5B,EAAkC;cACxBC,IADwB,GACjBb,OAAO,CAACY,YADS;;cAE9B,IAAIC,IAAI,CAACN,IAAT,EAAe;gBAAEN,OAAO,CAACM,IAAR,GAA6BM,IAAI,CAACN,IAAlC;cAA0C;;cAC3D,IAAIM,IAAI,CAACL,KAAT,EAAgB;gBAAEP,OAAO,CAACO,KAAR,GAA+BK,IAAI,CAACL,KAApC;cAA6C;;cAC/D,IAAIK,IAAI,CAACJ,WAAT,EAAsB;gBAAER,OAAO,CAACQ,WAAR,GAA2CI,IAAI,CAACJ,WAAhD;cAA+D;;cACvF,IAAII,IAAI,CAACH,QAAT,EAAmB;gBAAET,OAAO,CAACS,QAAR,GAAqCG,IAAI,CAACH,QAA1C;cAAsD;;cAC3E,IAAIG,IAAI,CAACF,QAAT,EAAmB;gBAAEV,OAAO,CAACU,QAAR,GAAmBE,IAAI,CAACF,QAAxB;cAAmC;YAC3D;;;YAEgB,OAAMG,KAAK,CAACf,IAAD,EAAOE,OAAP,CAAX;;;YAAXc;;YACO,OAAMA,QAAQ,CAACC,WAAT,EAAN;;;YAAPZ;YAEAD,UAAwC;;YAC9C,IAAIY,QAAQ,CAACZ,OAAT,CAAiBc,OAArB,EAA8B;cAC1BF,QAAQ,CAACZ,OAAT,CAAiBc,OAAjB,CAAyB,UAACC,KAAD,EAAQC,GAAR,EAAe;gBACpChB,OAAO,CAACgB,GAAG,CAACC,WAAJ,EAAD,CAAP,GAA6BF,KAA7B;cACH,CAFD;YAGH,CAJD,MAIO;cAC2BH,QAAQ,CAACZ,OAAV,CAAoBkB,IAA3B,GAAoCJ,OAApC,CAA4C,UAACE,GAAD,EAAQ;gBACtEhB,OAAO,CAACgB,GAAG,CAACC,WAAJ,EAAD,CAAP,GAA6BL,QAAQ,CAACZ,OAAT,CAAiBmB,GAAjB,CAAqBH,GAArB,CAA7B;cACH,CAFqB;YAGzB;;6CAEM;cACHhB,OAAO,EAAEA,OADN;cAEHoB,UAAU,EAAER,QAAQ,CAACS,MAFlB;cAGHC,aAAa,EAAEV,QAAQ,CAACW,UAHrB;cAIHtB,IAAI,EAAEP,QAAQ,CAAC,IAAI8B,UAAJ,CAAevB,IAAf,CAAD;YAJX;;;;;;;;;AAMV","names":["arrayify","getUrl","href","options","request","method","headers","body","undefined","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetchOptions","opts","fetch","response","arrayBuffer","forEach","value","key","toLowerCase","keys","get","statusCode","status","statusMessage","statusText","Uint8Array"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@ethersproject/web/src.ts/browser-geturl.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n"]},"metadata":{},"sourceType":"module"}