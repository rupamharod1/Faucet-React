{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromTwosComplement = exports.toTwosComplement = exports.leftPad = exports.rightPad = exports.padRight = exports.padLeft = void 0;\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst converters_js_1 = require(\"./converters.js\");\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n *\n * console.log(web3.utils.padLeft('0x123', 10));\n * >0x0000000123\n * ```\n */\n\n\nconst padLeft = function (value, characterAmount) {\n  let sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n\n  // To avoid duplicate code and circular dependency we will\n  // use `padLeft` implementation from `web3-validator`\n  if (typeof value === 'string') {\n    if (!(0, web3_validator_1.isHexStrict)(value)) {\n      return value.padStart(characterAmount, sign);\n    }\n\n    return web3_validator_1.utils.padLeft(value, characterAmount, sign);\n  }\n\n  web3_validator_1.validator.validate(['int'], [value]);\n  return web3_validator_1.utils.padLeft(value, characterAmount, sign);\n};\n\nexports.padLeft = padLeft;\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n * console.log(web3.utils.padRight('0x123', 10));\n * > 0x1230000000\n *\n * console.log(web3.utils.padRight('0x123', 10, '1'));\n * > 0x1231111111\n * ```\n */\n\nconst padRight = function (value, characterAmount) {\n  let sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n\n  if (typeof value === 'string' && !(0, web3_validator_1.isHexStrict)(value)) {\n    return value.padEnd(characterAmount, sign);\n  }\n\n  web3_validator_1.validator.validate(['int'], [value]);\n  const hexString = typeof value === 'string' && (0, web3_validator_1.isHexStrict)(value) ? value : (0, converters_js_1.numberToHex)(value);\n  const prefixLength = hexString.startsWith('-') ? 3 : 2;\n  return hexString.padEnd(characterAmount + prefixLength, sign);\n};\n\nexports.padRight = padRight;\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`\n */\n\nexports.rightPad = exports.padRight;\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`\n */\n\nexports.leftPad = exports.padLeft;\n/**\n * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n *\n * @returns The hex string of the two’s complement.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toTwosComplement(13, 32));\n * > 0x0000000000000000000000000000000d\n *\n * console.log(web3.utils.toTwosComplement('-0x1', 32));\n * > 0xffffffffffffffffffffffffffffffff\n *\n * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));\n * > 0x00000000000000000020000000000000\n * ```\n */\n\nconst toTwosComplement = function (value) {\n  let nibbleWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  web3_validator_1.validator.validate(['int'], [value]);\n  const val = (0, converters_js_1.toNumber)(value);\n  if (val >= 0) return (0, exports.padLeft)((0, converters_js_1.toHex)(val), nibbleWidth);\n  const largestBit = (0, web3_validator_1.bigintPower)(BigInt(2), BigInt(nibbleWidth * 4));\n\n  if (-val >= largestBit) {\n    throw new web3_errors_1.NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);\n  }\n\n  const updatedVal = BigInt(val);\n  const complement = updatedVal + largestBit;\n  return (0, exports.padLeft)((0, converters_js_1.numberToHex)(complement), nibbleWidth);\n};\n\nexports.toTwosComplement = toTwosComplement;\n/**\n * Converts the twos complement into a decimal number or big int.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n * @returns The decimal number or big int.\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromTwosComplement(''0x0000000000000000000000000000000d', 32'));\n * > 13\n *\n * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));\n * > 9007199254740992n\n * ```\n */\n\nconst fromTwosComplement = function (value) {\n  let nibbleWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  web3_validator_1.validator.validate(['int'], [value]);\n  const val = (0, converters_js_1.toNumber)(value);\n  if (val < 0) return val;\n  const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));\n  if (largestBit > nibbleWidth * 4) throw new web3_errors_1.NibbleWidthError(`value: \"${value}\", nibbleWidth: \"${nibbleWidth}\"`); // check the largest bit to see if negative\n\n  if (nibbleWidth * 4 !== largestBit) return val;\n  const complement = (0, web3_validator_1.bigintPower)(BigInt(2), BigInt(nibbleWidth) * BigInt(4));\n  return (0, converters_js_1.toNumber)(BigInt(val) - complement);\n};\n\nexports.fromTwosComplement = fromTwosComplement;","map":{"version":3,"mappings":"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","names":["padLeft","value","characterAmount","sign","padStart","web3_validator_1","validate","exports","padRight","padEnd","hexString","prefixLength","startsWith","toTwosComplement","nibbleWidth","val","largestBit","BigInt","web3_errors_1","updatedVal","complement","fromTwosComplement","Math","ceil","log","Number"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/string_manipulation.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Numbers } from 'web3-types';\nimport { NibbleWidthError } from 'web3-errors';\nimport { isHexStrict, validator, utils as validatorUtils, bigintPower } from 'web3-validator';\nimport { numberToHex, toHex, toNumber } from './converters.js';\n\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n *\n * console.log(web3.utils.padLeft('0x123', 10));\n * >0x0000000123\n * ```\n */\nexport const padLeft = (value: Numbers, characterAmount: number, sign = '0'): string => {\n\t// To avoid duplicate code and circular dependency we will\n\t// use `padLeft` implementation from `web3-validator`\n\n\tif (typeof value === 'string') {\n\t\tif (!isHexStrict(value)) {\n\t\t\treturn value.padStart(characterAmount, sign);\n\t\t}\n\t\treturn validatorUtils.padLeft(value, characterAmount, sign);\n\t}\n\n\tvalidator.validate(['int'], [value]);\n\n\treturn validatorUtils.padLeft(value, characterAmount, sign);\n};\n\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n * console.log(web3.utils.padRight('0x123', 10));\n * > 0x1230000000\n *\n * console.log(web3.utils.padRight('0x123', 10, '1'));\n * > 0x1231111111\n * ```\n */\nexport const padRight = (value: Numbers, characterAmount: number, sign = '0'): string => {\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn value.padEnd(characterAmount, sign);\n\t}\n\n\tvalidator.validate(['int'], [value]);\n\n\tconst hexString = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n\n\tconst prefixLength = hexString.startsWith('-') ? 3 : 2;\n\treturn hexString.padEnd(characterAmount + prefixLength, sign);\n};\n\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`\n */\nexport const rightPad = padRight;\n\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`\n */\nexport const leftPad = padLeft;\n\n/**\n * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n *\n * @returns The hex string of the two’s complement.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toTwosComplement(13, 32));\n * > 0x0000000000000000000000000000000d\n *\n * console.log(web3.utils.toTwosComplement('-0x1', 32));\n * > 0xffffffffffffffffffffffffffffffff\n *\n * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));\n * > 0x00000000000000000020000000000000\n * ```\n */\nexport const toTwosComplement = (value: Numbers, nibbleWidth = 64): string => {\n\tvalidator.validate(['int'], [value]);\n\n\tconst val = toNumber(value);\n\n\tif (val >= 0) return padLeft(toHex(val), nibbleWidth);\n\n\tconst largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));\n\tif (-val >= largestBit) {\n\t\tthrow new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);\n\t}\n\tconst updatedVal = BigInt(val);\n\n\tconst complement = updatedVal + largestBit;\n\n\treturn padLeft(numberToHex(complement), nibbleWidth);\n};\n\n/**\n * Converts the twos complement into a decimal number or big int.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n * @returns The decimal number or big int.\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromTwosComplement(''0x0000000000000000000000000000000d', 32'));\n * > 13\n *\n * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));\n * > 9007199254740992n\n * ```\n */\nexport const fromTwosComplement = (value: Numbers, nibbleWidth = 64): number | bigint => {\n\tvalidator.validate(['int'], [value]);\n\n\tconst val = toNumber(value);\n\n\tif (val < 0) return val;\n\n\tconst largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));\n\n\tif (largestBit > nibbleWidth * 4)\n\t\tthrow new NibbleWidthError(`value: \"${value}\", nibbleWidth: \"${nibbleWidth}\"`);\n\n\t// check the largest bit to see if negative\n\tif (nibbleWidth * 4 !== largestBit) return val;\n\n\tconst complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));\n\n\treturn toNumber(BigInt(val) - complement);\n};\n"]},"metadata":{},"sourceType":"script"}