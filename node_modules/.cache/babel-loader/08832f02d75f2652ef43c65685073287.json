{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Web3Context } from 'web3-core';\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError } from 'web3-errors';\nimport { isSyncing } from 'web3-eth';\nimport { getId } from 'web3-net';\nimport { DEFAULT_RETURN_FORMAT, FMT_NUMBER } from 'web3-types';\nimport { networkIds, registryAddresses } from './config.js';\nimport { Registry } from './registry.js';\nimport { Resolver } from './resolver.js';\n/**\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\n *\n */\n\nexport class ENS extends Web3Context {\n  /**\n   * Use to create an instance of ENS\n   * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\n   * @param provider - (Optional) The provider to use for the ENS instance\n   * @example\n   * ```ts\n   * const ens = new ENS(\n   * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n   * \t\"http://localhost:8545\"\n   * );\n   *\n   * console.log( ens.defaultChain);\n   * > mainnet\n   * ```\n   */\n  constructor(registryAddr, provider) {\n    super(provider !== null && provider !== void 0 ? provider : '');\n    this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main; // will default to main registry address\n\n    this._registry = new Registry(this.getContextObject(), registryAddr);\n    this._resolver = new Resolver(this._registry);\n  }\n  /**\n   * Returns the Resolver by the given address\n   * @param name - The name of the ENS domain\n   * @returns - An contract instance of the resolver\n   *\n   * @example\n   * ```ts\n   * const resolver = await ens.getResolver('resolver');\n   *\n   * console.log(resolver.options.address);\n   * > '0x1234567890123456789012345678901234567890'\n   * ```\n   */\n\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getResolver(name);\n    });\n  }\n  /**\n   * Returns true if the record exists\n   * @param name - The ENS name\n   * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\n   * @example\n   * ```ts\n   * const exists = await web3.eth.ens.recordExists('ethereum.eth');\n   * ```\n   */\n\n\n  recordExists(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.recordExists(name);\n    });\n  }\n  /**\n   * Returns the caching TTL (time-to-live) of an ENS name.\n   * @param name - The ENS name\n   * @returns - Returns the caching TTL (time-to-live) of a name.\n   * @example\n   * ```ts\n   * const owner = await web3.eth.ens.getTTL('ethereum.eth');\n   * ```\n   */\n\n\n  getTTL(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getTTL(name);\n    });\n  }\n  /**\n   * Returns the owner by the given name and current configured or detected Registry\n   * @param name - The ENS name\n   * @returns - Returns the address of the owner of the name.\n   * @example\n   * ```ts\n   * const owner = await web3.eth.ens.getOwner('ethereum.eth');\n   * ```\n   */\n\n\n  getOwner(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getOwner(name);\n    });\n  }\n  /**\n   * Resolves an ENS name to an Ethereum address.\n   * @param ENSName - The ENS name to resolve\n   * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\n   * @returns - The Ethereum address of the given name\n   * ```ts\n   * const address = await web3.eth.ens.getAddress('ethereum.eth');\n   * console.log(address);\n   * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\n   * ```\n   */\n\n\n  getAddress(ENSName) {\n    let coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getAddress(ENSName, coinType);\n    });\n  }\n  /**\n   * Returns the X and Y coordinates of the curve point for the public key.\n   * @param ENSName - The ENS name\n   * @returns - The X and Y coordinates of the curve point for the public key\n   * @example\n   * ```ts\n   * const key = await web3.eth.ens.getPubkey('ethereum.eth');\n   * console.log(key);\n   * > {\n   * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n   * }\n   * ```\n   */\n\n\n  getPubkey(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getPubkey(ENSName);\n    });\n  }\n  /**\n   * Returns the content hash object associated with an ENS node.\n   * @param ENSName - The ENS name\n   * @returns - The content hash object associated with an ENS node\n   * @example\n   * ```ts\n   * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\n   * console.log(hash);\n   * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\n   * ```\n   */\n\n\n  getContenthash(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getContenthash(ENSName);\n    });\n  }\n  /**\n   * Checks if the current used network is synced and looks for ENS support there.\n   * Throws an error if not.\n   * @returns - The address of the ENS registry if the network has been detected successfully\n   * @example\n   * ```ts\n   * console.log(await web3.eth.ens.checkNetwork());\n   * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n   * ```\n   */\n\n\n  checkNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const now = Date.now() / 1000;\n\n      if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n        const syncInfo = yield isSyncing(this);\n\n        if (!(typeof syncInfo === 'boolean' && !syncInfo)) {\n          throw new ENSNetworkNotSyncedError();\n        }\n\n        this._lastSyncCheck = now;\n      }\n\n      if (this._detectedAddress) {\n        return this._detectedAddress;\n      }\n\n      const networkType = yield getId(this, Object.assign(Object.assign({}, DEFAULT_RETURN_FORMAT), {\n        number: FMT_NUMBER.HEX\n      })); // get the network from provider\n\n      const addr = registryAddresses[networkIds[networkType]];\n\n      if (typeof addr === 'undefined') {\n        throw new ENSUnsupportedNetworkError(networkType);\n      }\n\n      this._detectedAddress = addr;\n      return this._detectedAddress;\n    });\n  }\n  /**\n   * Returns true if the related Resolver does support the given signature or interfaceId.\n   * @param ENSName - The ENS name\n   * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\n   * @returns - `true` if the related Resolver does support the given signature or interfaceId.\n   * @example\n   * ```ts\n   * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\n   * console.log(supports);\n   * > true\n   * ```\n   */\n\n\n  supportsInterface(ENSName, interfaceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.supportsInterface(ENSName, interfaceId);\n    });\n  }\n  /**\n   * @returns - Returns all events that can be emitted by the ENS registry.\n   */\n\n\n  get events() {\n    return this._registry.events;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Web3Context","ENSNetworkNotSyncedError","ENSUnsupportedNetworkError","isSyncing","getId","DEFAULT_RETURN_FORMAT","FMT_NUMBER","networkIds","registryAddresses","Registry","Resolver","ENS","constructor","registryAddr","provider","registryAddress","main","_registry","getContextObject","_resolver","getResolver","name","recordExists","getTTL","getOwner","getAddress","ENSName","coinType","getPubkey","getContenthash","checkNetwork","now","Date","_lastSyncCheck","syncInfo","_detectedAddress","networkType","Object","number","HEX","addr","supportsInterface","interfaceId","events"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-ens/src/ens.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context, Web3ContextObject } from 'web3-core';\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError } from 'web3-errors';\nimport { isSyncing } from 'web3-eth';\nimport { Contract } from 'web3-eth-contract';\nimport { getId } from 'web3-net';\nimport {\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tFMT_NUMBER,\n\tSupportedProviders,\n\tWeb3NetAPI,\n} from 'web3-types';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { networkIds, registryAddresses } from './config.js';\nimport { Registry } from './registry.js';\nimport { Resolver } from './resolver.js';\n\n/**\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\n *\n */\nexport class ENS extends Web3Context<EthExecutionAPI & Web3NetAPI> {\n\t/**\n\t * The registryAddress property can be used to define a custom registry address when you are connected to an unknown chain. It defaults to the main registry address.\n\t */\n\tpublic registryAddress: string;\n\tprivate readonly _registry: Registry;\n\tprivate readonly _resolver: Resolver;\n\tprivate _detectedAddress?: string;\n\tprivate _lastSyncCheck?: number;\n\n\t/**\n\t * Use to create an instance of ENS\n\t * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\n\t * @param provider - (Optional) The provider to use for the ENS instance\n\t * @example\n\t * ```ts\n\t * const ens = new ENS(\n\t * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t * \t\"http://localhost:8545\"\n\t * );\n\t *\n\t * console.log( ens.defaultChain);\n\t * > mainnet\n\t * ```\n\t */\n\tpublic constructor(\n\t\tregistryAddr?: string,\n\t\tprovider?:\n\t\t\t| SupportedProviders<EthExecutionAPI & Web3NetAPI>\n\t\t\t| Web3ContextObject<EthExecutionAPI & Web3NetAPI>\n\t\t\t| string,\n\t) {\n\t\tsuper(provider ?? '');\n\t\tthis.registryAddress = registryAddr ?? registryAddresses.main; // will default to main registry address\n\t\tthis._registry = new Registry(this.getContextObject(), registryAddr);\n\t\tthis._resolver = new Resolver(this._registry);\n\t}\n\n\t/**\n\t * Returns the Resolver by the given address\n\t * @param name - The name of the ENS domain\n\t * @returns - An contract instance of the resolver\n\t *\n\t * @example\n\t * ```ts\n\t * const resolver = await ens.getResolver('resolver');\n\t *\n\t * console.log(resolver.options.address);\n\t * > '0x1234567890123456789012345678901234567890'\n\t * ```\n\t */\n\tpublic async getResolver(name: string): Promise<Contract<typeof PublicResolverAbi>> {\n\t\treturn this._registry.getResolver(name);\n\t}\n\n\t/**\n\t * Returns true if the record exists\n\t * @param name - The ENS name\n\t * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\n\t * @example\n\t * ```ts\n\t * const exists = await web3.eth.ens.recordExists('ethereum.eth');\n\t * ```\n\t */\n\tpublic async recordExists(name: string): Promise<unknown> {\n\t\treturn this._registry.recordExists(name);\n\t}\n\n\t/**\n\t * Returns the caching TTL (time-to-live) of an ENS name.\n\t * @param name - The ENS name\n\t * @returns - Returns the caching TTL (time-to-live) of a name.\n\t * @example\n\t * ```ts\n\t * const owner = await web3.eth.ens.getTTL('ethereum.eth');\n\t * ```\n\t */\n\tpublic async getTTL(name: string): Promise<unknown> {\n\t\treturn this._registry.getTTL(name);\n\t}\n\n\t/**\n\t * Returns the owner by the given name and current configured or detected Registry\n\t * @param name - The ENS name\n\t * @returns - Returns the address of the owner of the name.\n\t * @example\n\t * ```ts\n\t * const owner = await web3.eth.ens.getOwner('ethereum.eth');\n\t * ```\n\t */\n\tpublic async getOwner(name: string): Promise<unknown> {\n\t\treturn this._registry.getOwner(name);\n\t}\n\n\t/**\n\t * Resolves an ENS name to an Ethereum address.\n\t * @param ENSName - The ENS name to resolve\n\t * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\n\t * @returns - The Ethereum address of the given name\n\t * ```ts\n\t * const address = await web3.eth.ens.getAddress('ethereum.eth');\n\t * console.log(address);\n\t * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\n\t * ```\n\t */\n\tpublic async getAddress(ENSName: string, coinType = 60) {\n\t\treturn this._resolver.getAddress(ENSName, coinType);\n\t}\n\n\t/**\n\t * Returns the X and Y coordinates of the curve point for the public key.\n\t * @param ENSName - The ENS name\n\t * @returns - The X and Y coordinates of the curve point for the public key\n\t * @example\n\t * ```ts\n\t * const key = await web3.eth.ens.getPubkey('ethereum.eth');\n\t * console.log(key);\n\t * > {\n\t * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t * }\n\t * ```\n\t */\n\tpublic async getPubkey(ENSName: string) {\n\t\treturn this._resolver.getPubkey(ENSName);\n\t}\n\n\t/**\n\t * Returns the content hash object associated with an ENS node.\n\t * @param ENSName - The ENS name\n\t * @returns - The content hash object associated with an ENS node\n\t * @example\n\t * ```ts\n\t * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\n\t * console.log(hash);\n\t * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\n\t * ```\n\t */\n\tpublic async getContenthash(ENSName: string) {\n\t\treturn this._resolver.getContenthash(ENSName);\n\t}\n\n\t/**\n\t * Checks if the current used network is synced and looks for ENS support there.\n\t * Throws an error if not.\n\t * @returns - The address of the ENS registry if the network has been detected successfully\n\t * @example\n\t * ```ts\n\t * console.log(await web3.eth.ens.checkNetwork());\n\t * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\t * ```\n\t */\n\tpublic async checkNetwork() {\n\t\tconst now = Date.now() / 1000;\n\t\tif (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n\t\t\tconst syncInfo = await isSyncing(this);\n\n\t\t\tif (!(typeof syncInfo === 'boolean' && !syncInfo)) {\n\t\t\t\tthrow new ENSNetworkNotSyncedError();\n\t\t\t}\n\n\t\t\tthis._lastSyncCheck = now;\n\t\t}\n\n\t\tif (this._detectedAddress) {\n\t\t\treturn this._detectedAddress;\n\t\t}\n\t\tconst networkType = await getId(this, {\n\t\t\t...DEFAULT_RETURN_FORMAT,\n\t\t\tnumber: FMT_NUMBER.HEX,\n\t\t}); // get the network from provider\n\t\tconst addr = registryAddresses[networkIds[networkType]];\n\n\t\tif (typeof addr === 'undefined') {\n\t\t\tthrow new ENSUnsupportedNetworkError(networkType);\n\t\t}\n\n\t\tthis._detectedAddress = addr;\n\t\treturn this._detectedAddress;\n\t}\n\n\t/**\n\t * Returns true if the related Resolver does support the given signature or interfaceId.\n\t * @param ENSName - The ENS name\n\t * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\n\t * @returns - `true` if the related Resolver does support the given signature or interfaceId.\n\t * @example\n\t * ```ts\n\t * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\n\t * console.log(supports);\n\t * > true\n\t * ```\n\t */\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\n\t\treturn this._resolver.supportsInterface(ENSName, interfaceId);\n\t}\n\n\t/**\n\t * @returns - Returns all events that can be emitted by the ENS registry.\n\t */\n\tpublic get events() {\n\t\treturn this._registry.events;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}