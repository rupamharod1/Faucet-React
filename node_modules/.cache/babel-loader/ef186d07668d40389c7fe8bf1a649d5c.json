{"ast":null,"code":"import { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\n\nexport function decodeSignedTransaction(encodedSignedTransaction, returnFormat) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    fillInputAndData: false\n  };\n  return {\n    raw: format({\n      format: 'bytes'\n    }, encodedSignedTransaction, returnFormat),\n    tx: formatTransaction(Object.assign(Object.assign({}, TransactionFactory.fromSerializedData(hexToBytes(encodedSignedTransaction)).toJSON()), {\n      hash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n      type: detectRawTransactionType(hexToBytes(encodedSignedTransaction))\n    }), returnFormat, {\n      fillInputAndData: options.fillInputAndData\n    })\n  };\n}","map":{"version":3,"mappings":"AAsBA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,SAAzC,QAA0D,YAA1D;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA;;;;;;;;AAOA,OAAM,SAAUC,uBAAV,CACLC,wBADK,EAELC,YAFK,EAGgE;EAAA,IAArEC,OAAqE,uEAA3B;IAAEC,gBAAgB,EAAE;EAApB,CAA2B;EAErE,OAAO;IACNC,GAAG,EAAEX,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAV,CAAD,EAAsBO,wBAAtB,EAAgDC,YAAhD,CADL;IAENI,EAAE,EAAEP,iBAAiB,CACpBQ,gCACIV,kBAAkB,CAACW,kBAAnB,CACFb,UAAU,CAACM,wBAAD,CADR,EAEDQ,MAFC,EADJ,GAGW;MACVC,IAAI,EAAEjB,UAAU,CAACG,SAAS,CAACD,UAAU,CAACM,wBAAD,CAAX,CAAV,CADN;MAEVU,IAAI,EAAEb,wBAAwB,CAACH,UAAU,CAACM,wBAAD,CAAX;IAFpB,CAHX,CADoB,EAQpBC,YARoB,EASpB;MAAEE,gBAAgB,EAAED,OAAO,CAACC;IAA5B,CAToB;EAFf,CAAP;AAcA","names":["bytesToHex","format","hexToBytes","keccak256","TransactionFactory","detectRawTransactionType","formatTransaction","decodeSignedTransaction","encodedSignedTransaction","returnFormat","options","fillInputAndData","raw","tx","Object","fromSerializedData","toJSON","hash","type"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/decode_signed_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tDataFormat,\n\tHexStringBytes,\n\tSignedTransactionInfoAPI,\n\tTransactionSignedAPI,\n} from 'web3-types';\nimport { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\n\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nexport function decodeSignedTransaction<ReturnFormat extends DataFormat>(\n\tencodedSignedTransaction: HexStringBytes,\n\treturnFormat: ReturnFormat,\n\toptions: { fillInputAndData?: boolean } = { fillInputAndData: false },\n): SignedTransactionInfoAPI {\n\treturn {\n\t\traw: format({ format: 'bytes' }, encodedSignedTransaction, returnFormat),\n\t\ttx: formatTransaction(\n\t\t\t{\n\t\t\t\t...TransactionFactory.fromSerializedData(\n\t\t\t\t\thexToBytes(encodedSignedTransaction),\n\t\t\t\t).toJSON(),\n\t\t\t\thash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n\t\t\t\ttype: detectRawTransactionType(hexToBytes(encodedSignedTransaction)),\n\t\t\t} as TransactionSignedAPI,\n\t\t\treturnFormat,\n\t\t\t{ fillInputAndData: options.fillInputAndData },\n\t\t),\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}