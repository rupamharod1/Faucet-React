{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format = exports.convert = exports.convertScalarValue = exports.isDataFormat = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst converters_js_1 = require(\"./converters.js\");\n\nconst objects_js_1 = require(\"./objects.js\");\n\nconst string_manipulation_js_1 = require(\"./string_manipulation.js\");\n\nconst uint8array_js_1 = require(\"./uint8array.js\");\n\nconst {\n  parseBaseType\n} = web3_validator_1.utils;\n\nconst isDataFormat = dataFormat => typeof dataFormat === 'object' && !(0, web3_validator_1.isNullish)(dataFormat) && 'number' in dataFormat && 'bytes' in dataFormat;\n\nexports.isDataFormat = isDataFormat;\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\n\nconst findSchemaByDataPath = function (schema, dataPath) {\n  let oneOfPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let result = Object.assign({}, schema);\n  let previousDataPath;\n\n  for (const dataPart of dataPath) {\n    if (result.oneOf && previousDataPath) {\n      const path = oneOfPath.find(function (element) {\n        return this === element[0];\n      }, previousDataPath !== null && previousDataPath !== void 0 ? previousDataPath : '');\n\n      if (path && path[0] === previousDataPath) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        result = result.oneOf[path[1]];\n      }\n    }\n\n    if (!result.properties && !result.items) {\n      return undefined;\n    }\n\n    if (result.properties) {\n      result = result.properties[dataPart];\n    } else if (result.items && result.items.properties) {\n      const node = result.items.properties;\n\n      if (!node) {\n        return undefined;\n      }\n\n      result = node[dataPart];\n    } else if (result.items && (0, web3_validator_1.isObject)(result.items)) {\n      result = result.items;\n    } else if (result.items && Array.isArray(result.items)) {\n      result = result.items[parseInt(dataPart, 10)];\n    }\n\n    if (result && dataPart) previousDataPath = dataPart;\n  }\n\n  return result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\n\n\nconst convertScalarValue = (value, ethType, format) => {\n  try {\n    const {\n      baseType,\n      baseTypeSize\n    } = parseBaseType(ethType);\n\n    if (baseType === 'int' || baseType === 'uint') {\n      switch (format.number) {\n        case web3_types_1.FMT_NUMBER.NUMBER:\n          return Number((0, converters_js_1.toBigInt)(value));\n\n        case web3_types_1.FMT_NUMBER.HEX:\n          return (0, converters_js_1.numberToHex)((0, converters_js_1.toBigInt)(value));\n\n        case web3_types_1.FMT_NUMBER.STR:\n          return (0, converters_js_1.toBigInt)(value).toString();\n\n        case web3_types_1.FMT_NUMBER.BIGINT:\n          return (0, converters_js_1.toBigInt)(value);\n\n        default:\n          throw new web3_errors_1.FormatterError(`Invalid format: ${String(format.number)}`);\n      }\n    }\n\n    if (baseType === 'bytes') {\n      let paddedValue;\n\n      if (baseTypeSize) {\n        if (typeof value === 'string') paddedValue = (0, string_manipulation_js_1.padLeft)(value, baseTypeSize * 2);else if (value instanceof Uint8Array) {\n          paddedValue = (0, uint8array_js_1.uint8ArrayConcat)(new Uint8Array(baseTypeSize - value.length), value);\n        }\n      } else {\n        paddedValue = value;\n      }\n\n      switch (format.bytes) {\n        case web3_types_1.FMT_BYTES.HEX:\n          return (0, converters_js_1.bytesToHex)((0, converters_js_1.bytesToUint8Array)(paddedValue));\n\n        case web3_types_1.FMT_BYTES.UINT8ARRAY:\n          return (0, converters_js_1.bytesToUint8Array)(paddedValue);\n\n        default:\n          throw new web3_errors_1.FormatterError(`Invalid format: ${String(format.bytes)}`);\n      }\n    }\n  } catch (error) {\n    // If someone didn't use `eth` keyword we can return original value\n    // as the scope of this code is formatting not validation\n    return value;\n  }\n\n  return value;\n};\n\nexports.convertScalarValue = convertScalarValue;\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\n\nconst convert = function (data, schema, dataPath, format) {\n  let oneOfPath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n  var _a, _b; // If it's a scalar value\n\n\n  if (!(0, web3_validator_1.isObject)(data) && !Array.isArray(data)) {\n    return (0, exports.convertScalarValue)(data, schema === null || schema === void 0 ? void 0 : schema.format, format);\n  }\n\n  const object = data;\n\n  for (const [key, value] of Object.entries(object)) {\n    dataPath.push(key);\n    const schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath); // If value is a scaler value\n\n    if ((0, web3_validator_1.isNullish)(schemaProp)) {\n      delete object[key];\n      dataPath.pop();\n      continue;\n    } // If value is an object, recurse into it\n\n\n    if ((0, web3_validator_1.isObject)(value)) {\n      (0, exports.convert)(value, schema, dataPath, format);\n      dataPath.pop();\n      continue;\n    } // If value is an array\n\n\n    if (Array.isArray(value)) {\n      let _schemaProp = schemaProp; // TODO This is a naive approach to solving the issue of\n      // a schema using oneOf. This chunk of code was intended to handle\n      // BlockSchema.transactions\n      // TODO BlockSchema.transactions are not being formatted\n\n      if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {\n        // The following code is basically saying:\n        // if the schema specifies oneOf, then we are to loop\n        // over each possible schema and check if they type of the schema\n        // matches the type of value[0], and if so we use the oneOfSchemaProp\n        // as the schema for formatting\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {\n          var _a, _b;\n\n          if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === 'object' && ((_a = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a === void 0 ? void 0 : _a.type) === 'object' || typeof value[0] === 'string' && ((_b = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b === void 0 ? void 0 : _b.type) !== 'object')) {\n            _schemaProp = oneOfSchemaProp;\n            oneOfPath.push([key, index]);\n          }\n        });\n      }\n\n      if ((0, web3_validator_1.isNullish)(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n        // Can not find schema for array item, delete that item\n        delete object[key];\n        dataPath.pop();\n        continue;\n      } // If schema for array items is a single type\n\n\n      if ((0, web3_validator_1.isObject)(_schemaProp.items) && !(0, web3_validator_1.isNullish)(_schemaProp.items.format)) {\n        for (let i = 0; i < value.length; i += 1) {\n          object[key][i] = (0, exports.convertScalarValue)(value[i], // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          (_a = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a === void 0 ? void 0 : _a.format, format);\n        }\n\n        dataPath.pop();\n        continue;\n      } // If schema for array items is an object\n\n\n      if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === 'object') {\n        for (const arrObject of value) {\n          (0, exports.convert)(arrObject, schema, dataPath, format, oneOfPath);\n        }\n\n        dataPath.pop();\n        continue;\n      } // If schema for array is a tuple\n\n\n      if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n        for (let i = 0; i < value.length; i += 1) {\n          object[key][i] = (0, exports.convertScalarValue)(value[i], _schemaProp.items[i].format, format);\n        }\n\n        dataPath.pop();\n        continue;\n      }\n    }\n\n    object[key] = (0, exports.convertScalarValue)(value, schemaProp.format, format);\n    dataPath.pop();\n  }\n\n  return object;\n};\n\nexports.convert = convert;\n\nconst format = (schema, data, returnFormat) => {\n  let dataToParse;\n\n  if ((0, web3_validator_1.isObject)(data)) {\n    dataToParse = (0, objects_js_1.mergeDeep)({}, data);\n  } else if (Array.isArray(data)) {\n    dataToParse = [...data];\n  } else {\n    dataToParse = data;\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n  const jsonSchema = (0, web3_validator_1.isObject)(schema) ? schema : web3_validator_1.utils.ethAbiToJsonSchema(schema);\n\n  if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n    throw new web3_errors_1.FormatterError('Invalid json schema for formatting');\n  }\n\n  return (0, exports.convert)(dataToParse, jsonSchema, [], returnFormat);\n};\n\nexports.format = format;","map":{"version":3,"mappings":"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","names":["parseBaseType","web3_validator_1","isDataFormat","dataFormat","exports","findSchemaByDataPath","schema","dataPath","oneOfPath","result","Object","previousDataPath","dataPart","oneOf","path","find","element","properties","items","undefined","node","Array","isArray","parseInt","convertScalarValue","value","ethType","format","baseType","baseTypeSize","number","web3_types_1","NUMBER","Number","HEX","STR","toString","BIGINT","web3_errors_1","String","paddedValue","Uint8Array","length","bytes","UINT8ARRAY","error","convert","data","object","key","entries","push","schemaProp","pop","_schemaProp","forEach","oneOfSchemaProp","index","_a","type","_b","i","arrObject","returnFormat","dataToParse","jsonSchema","ethAbiToJsonSchema"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/formatter.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { Bytes, DataFormat, FMT_BYTES, FMT_NUMBER, FormatType } from 'web3-types';\nimport { isNullish, isObject, JsonSchema, utils, ValidationSchemaInput } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, numberToHex, toBigInt } from './converters.js';\nimport { mergeDeep } from './objects.js';\nimport { padLeft } from './string_manipulation.js';\nimport { uint8ArrayConcat } from './uint8array.js';\n\nconst { parseBaseType } = utils;\n\nexport const isDataFormat = (dataFormat: unknown): dataFormat is DataFormat =>\n\ttypeof dataFormat === 'object' &&\n\t!isNullish(dataFormat) &&\n\t'number' in dataFormat &&\n\t'bytes' in dataFormat;\n\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = (\n\tschema: JsonSchema,\n\tdataPath: string[],\n\toneOfPath: [string, number][] = [],\n): JsonSchema | undefined => {\n\tlet result: JsonSchema = { ...schema } as JsonSchema;\n\tlet previousDataPath: string | undefined;\n\n\tfor (const dataPart of dataPath) {\n\t\tif (result.oneOf && previousDataPath) {\n\t\t\tconst path = oneOfPath.find(function (element: [string, number]) {\n\t\t\t\treturn (this as unknown as string) === element[0];\n\t\t\t}, previousDataPath ?? '');\n\n\t\t\tif (path && path[0] === previousDataPath) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n\t\t\t\tresult = result.oneOf[path[1]];\n\t\t\t}\n\t\t}\n\t\tif (!result.properties && !result.items) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (result.properties) {\n\t\t\tresult = (result.properties as Record<string, JsonSchema>)[dataPart];\n\t\t} else if (result.items && (result.items as JsonSchema).properties) {\n\t\t\tconst node = (result.items as JsonSchema).properties as Record<string, JsonSchema>;\n\n\t\t\tif (!node) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tresult = node[dataPart];\n\t\t} else if (result.items && isObject(result.items)) {\n\t\t\tresult = result.items;\n\t\t} else if (result.items && Array.isArray(result.items)) {\n\t\t\tresult = result.items[parseInt(dataPart, 10)];\n\t\t}\n\n\t\tif (result && dataPart) previousDataPath = dataPart;\n\t}\n\n\treturn result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nexport const convertScalarValue = (value: unknown, ethType: string, format: DataFormat) => {\n\ttry {\n\t\tconst { baseType, baseTypeSize } = parseBaseType(ethType);\n\t\tif (baseType === 'int' || baseType === 'uint') {\n\t\t\tswitch (format.number) {\n\t\t\t\tcase FMT_NUMBER.NUMBER:\n\t\t\t\t\treturn Number(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.HEX:\n\t\t\t\t\treturn numberToHex(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.STR:\n\t\t\t\t\treturn toBigInt(value).toString();\n\t\t\t\tcase FMT_NUMBER.BIGINT:\n\t\t\t\t\treturn toBigInt(value);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.number)}`);\n\t\t\t}\n\t\t}\n\t\tif (baseType === 'bytes') {\n\t\t\tlet paddedValue;\n\t\t\tif (baseTypeSize) {\n\t\t\t\tif (typeof value === 'string') paddedValue = padLeft(value, baseTypeSize * 2);\n\t\t\t\telse if (value instanceof Uint8Array) {\n\t\t\t\t\tpaddedValue = uint8ArrayConcat(\n\t\t\t\t\t\tnew Uint8Array(baseTypeSize - value.length),\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpaddedValue = value;\n\t\t\t}\n\t\t\tswitch (format.bytes) {\n\t\t\t\tcase FMT_BYTES.HEX:\n\t\t\t\t\treturn bytesToHex(bytesToUint8Array(paddedValue as Bytes));\n\t\t\t\tcase FMT_BYTES.UINT8ARRAY:\n\t\t\t\t\treturn bytesToUint8Array(paddedValue as Bytes);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.bytes)}`);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\t// If someone didn't use `eth` keyword we can return original value\n\t\t// as the scope of this code is formatting not validation\n\t\treturn value;\n\t}\n\n\treturn value;\n};\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nexport const convert = (\n\tdata: Record<string, unknown> | unknown[] | unknown,\n\tschema: JsonSchema,\n\tdataPath: string[],\n\tformat: DataFormat,\n\toneOfPath: [string, number][] = [],\n) => {\n\t// If it's a scalar value\n\tif (!isObject(data) && !Array.isArray(data)) {\n\t\treturn convertScalarValue(data, schema?.format as string, format);\n\t}\n\n\tconst object = data as Record<string, unknown>;\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tdataPath.push(key);\n\t\tconst schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n\n\t\t// If value is a scaler value\n\t\tif (isNullish(schemaProp)) {\n\t\t\tdelete object[key];\n\t\t\tdataPath.pop();\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If value is an object, recurse into it\n\t\tif (isObject(value)) {\n\t\t\tconvert(value, schema, dataPath, format);\n\t\t\tdataPath.pop();\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If value is an array\n\t\tif (Array.isArray(value)) {\n\t\t\tlet _schemaProp = schemaProp;\n\n\t\t\t// TODO This is a naive approach to solving the issue of\n\t\t\t// a schema using oneOf. This chunk of code was intended to handle\n\t\t\t// BlockSchema.transactions\n\t\t\t// TODO BlockSchema.transactions are not being formatted\n\t\t\tif (schemaProp?.oneOf !== undefined) {\n\t\t\t\t// The following code is basically saying:\n\t\t\t\t// if the schema specifies oneOf, then we are to loop\n\t\t\t\t// over each possible schema and check if they type of the schema\n\t\t\t\t// matches the type of value[0], and if so we use the oneOfSchemaProp\n\t\t\t\t// as the schema for formatting\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tschemaProp.oneOf.forEach((oneOfSchemaProp: JsonSchema, index: number) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Array.isArray(schemaProp?.items) &&\n\t\t\t\t\t\t((typeof value[0] === 'object' &&\n\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type === 'object') ||\n\t\t\t\t\t\t\t(typeof value[0] === 'string' &&\n\t\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type !== 'object'))\n\t\t\t\t\t) {\n\t\t\t\t\t\t_schemaProp = oneOfSchemaProp;\n\t\t\t\t\t\toneOfPath.push([key, index]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (isNullish(_schemaProp?.items)) {\n\t\t\t\t// Can not find schema for array item, delete that item\n\t\t\t\tdelete object[key];\n\t\t\t\tdataPath.pop();\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array items is a single type\n\t\t\tif (isObject(_schemaProp.items) && !isNullish(_schemaProp.items.format)) {\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\t\tvalue[i],\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t\t_schemaProp?.items?.format,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array items is an object\n\t\t\tif (!Array.isArray(_schemaProp?.items) && _schemaProp?.items?.type === 'object') {\n\t\t\t\tfor (const arrObject of value) {\n\t\t\t\t\tconvert(\n\t\t\t\t\t\tarrObject as Record<string, unknown> | unknown[],\n\t\t\t\t\t\tschema,\n\t\t\t\t\t\tdataPath,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t\toneOfPath,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array is a tuple\n\t\t\tif (Array.isArray(_schemaProp?.items)) {\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\t\tvalue[i],\n\t\t\t\t\t\t_schemaProp.items[i].format as string,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tobject[key] = convertScalarValue(value, schemaProp.format as string, format);\n\n\t\tdataPath.pop();\n\t}\n\n\treturn object;\n};\n\nexport const format = <\n\tDataType extends Record<string, unknown> | unknown[] | unknown,\n\tReturnType extends DataFormat,\n>(\n\tschema: ValidationSchemaInput | JsonSchema,\n\tdata: DataType,\n\treturnFormat: ReturnType,\n): FormatType<DataType, ReturnType> => {\n\tlet dataToParse: Record<string, unknown> | unknown[] | unknown;\n\n\tif (isObject(data)) {\n\t\tdataToParse = mergeDeep({}, data);\n\t} else if (Array.isArray(data)) {\n\t\tdataToParse = [...data];\n\t} else {\n\t\tdataToParse = data;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst jsonSchema: JsonSchema = isObject(schema) ? schema : utils.ethAbiToJsonSchema(schema);\n\n\tif (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n\t\tthrow new FormatterError('Invalid json schema for formatting');\n\t}\n\n\treturn convert(dataToParse, jsonSchema, [], returnFormat) as FormatType<\n\t\ttypeof data,\n\t\tReturnType\n\t>;\n};\n"]},"metadata":{},"sourceType":"script"}