{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { toChecksumAddress, utf8ToHex } from 'web3-utils';\nimport { formatTransaction } from 'web3-eth';\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { validator, isHexStrict } from 'web3-validator';\nimport { personalRpcMethods } from 'web3-rpc-methods';\nexport const getAccounts = requestManager => __awaiter(void 0, void 0, void 0, function* () {\n  const result = yield personalRpcMethods.getAccounts(requestManager);\n  return result.map(toChecksumAddress);\n});\nexport const newAccount = (requestManager, password) => __awaiter(void 0, void 0, void 0, function* () {\n  validator.validate(['string'], [password]);\n  const result = yield personalRpcMethods.newAccount(requestManager, password);\n  return toChecksumAddress(result);\n});\nexport const unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter(void 0, void 0, void 0, function* () {\n  validator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n  return personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration);\n});\nexport const lockAccount = (requestManager, address) => __awaiter(void 0, void 0, void 0, function* () {\n  validator.validate(['address'], [address]);\n  return personalRpcMethods.lockAccount(requestManager, address);\n});\nexport const importRawKey = (requestManager, keyData, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  validator.validate(['string', 'string'], [keyData, passphrase]);\n  return personalRpcMethods.importRawKey(requestManager, keyData, passphrase);\n});\nexport const sendTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n  return personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase);\n});\nexport const signTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n  return personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase);\n});\nexport const sign = (requestManager, data, address, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  validator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n  const dataToSign = isHexStrict(data) ? data : utf8ToHex(data);\n  return personalRpcMethods.sign(requestManager, dataToSign, address, passphrase);\n});\nexport const ecRecover = (requestManager, signedData, signature) => __awaiter(void 0, void 0, void 0, function* () {\n  validator.validate(['string', 'string'], [signedData, signature]);\n  const signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);\n  return personalRpcMethods.ecRecover(requestManager, signedDataString, signature);\n});","map":{"version":3,"mappings":"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","names":["toChecksumAddress","utf8ToHex","formatTransaction","ETH_DATA_FORMAT","validator","isHexStrict","personalRpcMethods","getAccounts","requestManager","__awaiter","result","map","newAccount","password","validate","unlockAccount","address","unlockDuration","lockAccount","importRawKey","keyData","passphrase","sendTransaction","tx","formattedTx","signTransaction","sign","data","dataToSign","ecRecover","signedData","signature","signedDataString"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-personal/src/rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport { toChecksumAddress, utf8ToHex } from 'web3-utils';\nimport { formatTransaction } from 'web3-eth';\nimport { Address, EthPersonalAPI, ETH_DATA_FORMAT, HexString, Transaction } from 'web3-types';\nimport { validator, isHexStrict } from 'web3-validator';\nimport { personalRpcMethods } from 'web3-rpc-methods';\n\nexport const getAccounts = async (requestManager: Web3RequestManager<EthPersonalAPI>) => {\n\tconst result = await personalRpcMethods.getAccounts(requestManager);\n\n\treturn result.map(toChecksumAddress);\n};\n\nexport const newAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tpassword: string,\n) => {\n\tvalidator.validate(['string'], [password]);\n\n\tconst result = await personalRpcMethods.newAccount(requestManager, password);\n\n\treturn toChecksumAddress(result);\n};\n\nexport const unlockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n\tpassword: string,\n\tunlockDuration: number,\n) => {\n\tvalidator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n\n\treturn personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration);\n};\n\nexport const lockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n) => {\n\tvalidator.validate(['address'], [address]);\n\n\treturn personalRpcMethods.lockAccount(requestManager, address);\n};\n\nexport const importRawKey = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tkeyData: HexString,\n\tpassphrase: string,\n) => {\n\tvalidator.validate(['string', 'string'], [keyData, passphrase]);\n\n\treturn personalRpcMethods.importRawKey(requestManager, keyData, passphrase);\n};\n\nexport const sendTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) => {\n\tconst formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n\n\treturn personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase);\n};\n\nexport const signTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) => {\n\tconst formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n\n\treturn personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase);\n};\n\nexport const sign = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tdata: HexString,\n\taddress: Address,\n\tpassphrase: string,\n) => {\n\tvalidator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n\n\tconst dataToSign = isHexStrict(data) ? data : utf8ToHex(data);\n\n\treturn personalRpcMethods.sign(requestManager, dataToSign, address, passphrase);\n};\n\nexport const ecRecover = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tsignedData: HexString,\n\tsignature: string,\n) => {\n\tvalidator.validate(['string', 'string'], [signedData, signature]);\n\n\tconst signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);\n\n\treturn personalRpcMethods.ecRecover(requestManager, signedDataString, signature);\n};\n"]},"metadata":{},"sourceType":"module"}