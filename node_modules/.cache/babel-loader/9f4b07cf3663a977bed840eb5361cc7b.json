{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isNullish } from 'web3-validator';\n/**\n * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.\n * @param object - to check if it is a `Promise`\n * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.\n */\n\nexport function isPromise(object) {\n  return (typeof object === 'object' || typeof object === 'function') && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  typeof object.then === 'function';\n}\n/**\n * Wait for a promise but interrupt it if it did not resolve within a given timeout.\n * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.\n * @param awaitable - The promise or function to wait for.\n * @param timeout - The timeout in milliseconds.\n * @param error - (Optional) The error to throw if the timeout reached.\n */\n\nexport function waitWithTimeout(awaitable, timeout, error) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let timeoutId;\n    const result = yield Promise.race([awaitable instanceof Promise ? awaitable : awaitable(), new Promise((resolve, reject) => {\n      timeoutId = setTimeout(() => error ? reject(error) : resolve(undefined), timeout);\n    })]);\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (result instanceof Error) {\n      throw result;\n    }\n\n    return result;\n  });\n}\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached. It returns promise and intervalId.\n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\n\nexport function pollTillDefinedAndReturnIntervalId(func, interval) {\n  let intervalId;\n  const polledRes = new Promise((resolve, reject) => {\n    intervalId = setInterval(function intervalCallbackFunc() {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const res = yield waitWithTimeout(func, interval);\n\n          if (!isNullish(res)) {\n            clearInterval(intervalId);\n            resolve(res);\n          }\n        } catch (error) {\n          clearInterval(intervalId);\n          reject(error);\n        }\n      }))();\n\n      return intervalCallbackFunc;\n    }() // this will immediate invoke first call\n    , interval);\n  });\n  return [polledRes, intervalId];\n}\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached.\n * pollTillDefinedAndReturnIntervalId() function should be used instead of pollTillDefined if you need IntervalId in result.\n * This function will be deprecated in next major release so use pollTillDefinedAndReturnIntervalId().\n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\n\nexport function pollTillDefined(func, interval) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return pollTillDefinedAndReturnIntervalId(func, interval)[0];\n  });\n}\n/**\n * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete\n * @param timeout - The timeout to enforced in milliseconds.\n * @param error - The error to throw if the timeout is reached.\n * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.\n *\n * @example\n * ```ts\n * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));\n * ```\n */\n\nexport function rejectIfTimeout(timeout, error) {\n  let timeoutId;\n  const rejectOnTimeout = new Promise((_, reject) => {\n    timeoutId = setTimeout(() => {\n      reject(error);\n    }, timeout);\n  });\n  return [timeoutId, rejectOnTimeout];\n}\n/**\n * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.\n * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.\n * @param cond - The function/confition to call.\n * @param interval - The interval in milliseconds.\n * @returns - an array with the interval ID and the Promise.\n */\n\nexport function rejectIfConditionAtInterval(cond, interval) {\n  let intervalId;\n  const rejectIfCondition = new Promise((_, reject) => {\n    intervalId = setInterval(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const error = yield cond();\n\n        if (error) {\n          clearInterval(intervalId);\n          reject(error);\n        }\n      }))();\n    }, interval);\n  });\n  return [intervalId, rejectIfCondition];\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,SAAT,QAA0B,gBAA1B;AAMA;;;;;;AAKA,OAAM,SAAUC,SAAV,CAAoBC,MAApB,EAAmC;EACxC,OACC,CAAC,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAP,KAAkB,UAAjD,KACA;EACA,OAAQA,MAA4B,CAACC,IAArC,KAA8C,UAH/C;AAKA;AAcD;;;;;;;;AAOA,OAAM,SAAgBC,eAAhB,CACLC,SADK,EAELC,OAFK,EAGLC,KAHK,EAGQ;;IAEb,IAAIC,SAAJ;IACA,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,IAAR,CAAa,CACjCN,SAAS,YAAYK,OAArB,GAA+BL,SAA/B,GAA2CA,SAAS,EADnB,EAEjC,IAAIK,OAAJ,CAA+B,CAACE,OAAD,EAAUC,MAAV,KAAoB;MAClDL,SAAS,GAAGM,UAAU,CAAC,MAAOP,KAAK,GAAGM,MAAM,CAACN,KAAD,CAAT,GAAmBK,OAAO,CAACG,SAAD,CAAvC,EAAqDT,OAArD,CAAtB;IACA,CAFD,CAFiC,CAAb,CAArB;;IAMA,IAAIE,SAAJ,EAAe;MACdQ,YAAY,CAACR,SAAD,CAAZ;IACA;;IACD,IAAIC,MAAM,YAAYQ,KAAtB,EAA6B;MAC5B,MAAMR,MAAN;IACA;;IACD,OAAOA,MAAP;EACA;AAAA;AAGD;;;;;;;AAMA,OAAM,SAAUS,kCAAV,CACLC,IADK,EAELC,QAFK,EAEW;EAGhB,IAAIC,UAAJ;EACA,MAAMC,SAAS,GAAG,IAAIZ,OAAJ,CAAmC,CAACE,OAAD,EAAUC,MAAV,KAAoB;IACxEQ,UAAU,GAAGE,WAAW,CAAC,SAASC,oBAAT,GAA6B;MACrD,CAAC,MAAWC;QACX,IAAI;UACH,MAAMC,GAAG,GAAG,MAAMtB,eAAe,CAACe,IAAD,EAAOC,QAAP,CAAjC;;UAEA,IAAI,CAACpB,SAAS,CAAC0B,GAAD,CAAd,EAAqB;YACpBC,aAAa,CAACN,UAAD,CAAb;YACAT,OAAO,CAACc,GAAD,CAAP;UACA;QACD,CAPD,CAOE,OAAOnB,KAAP,EAAc;UACfoB,aAAa,CAACN,UAAD,CAAb;UACAR,MAAM,CAACN,KAAD,CAAN;QACA;MACD,CAZW,CAAZ;;MAaA,OAAOiB,oBAAP;IAA6B,CAdL,EAAD,CAcS;IAdT,EAerBJ,QAfqB,CAAxB;EAgBA,CAjBiB,CAAlB;EAmBA,OAAO,CAACE,SAAD,EAAyDD,UAAzD,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAgBO,eAAhB,CACLT,IADK,EAELC,QAFK,EAEW;;IAEhB,OAAOF,kCAAkC,CAACC,IAAD,EAAOC,QAAP,CAAlC,CAAmD,CAAnD,CAAP;EACA;AAAA;AACD;;;;;;;;;;;;AAWA,OAAM,SAAUS,eAAV,CAA0BvB,OAA1B,EAA2CC,KAA3C,EAAuD;EAC5D,IAAIC,SAAJ;EACA,MAAMsB,eAAe,GAAG,IAAIpB,OAAJ,CAAmB,CAACqB,CAAD,EAAIlB,MAAJ,KAAc;IACxDL,SAAS,GAAGM,UAAU,CAAC,MAAK;MAC3BD,MAAM,CAACN,KAAD,CAAN;IACA,CAFqB,EAEnBD,OAFmB,CAAtB;EAGA,CAJuB,CAAxB;EAKA,OAAO,CAACE,SAAD,EAAasB,eAAb,CAAP;AACA;AACD;;;;;;;;AAOA,OAAM,SAAUE,2BAAV,CACLC,IADK,EAELb,QAFK,EAEW;EAEhB,IAAIC,UAAJ;EACA,MAAMa,iBAAiB,GAAG,IAAIxB,OAAJ,CAAmB,CAACqB,CAAD,EAAIlB,MAAJ,KAAc;IAC1DQ,UAAU,GAAGE,WAAW,CAAC,MAAK;MAC7B,CAAC,MAAWE;QACX,MAAMlB,KAAK,GAAG,MAAM0B,IAAI,EAAxB;;QACA,IAAI1B,KAAJ,EAAW;UACVoB,aAAa,CAACN,UAAD,CAAb;UACAR,MAAM,CAACN,KAAD,CAAN;QACA;MACD,CANW,CAAZ;IAOA,CARuB,EAQrBa,QARqB,CAAxB;EASA,CAVyB,CAA1B;EAWA,OAAO,CAACC,UAAD,EAAca,iBAAd,CAAP;AACA","names":["isNullish","isPromise","object","then","waitWithTimeout","awaitable","timeout","error","timeoutId","result","Promise","race","resolve","reject","setTimeout","undefined","clearTimeout","Error","pollTillDefinedAndReturnIntervalId","func","interval","intervalId","polledRes","setInterval","intervalCallbackFunc","__awaiter","res","clearInterval","pollTillDefined","rejectIfTimeout","rejectOnTimeout","_","rejectIfConditionAtInterval","cond","rejectIfCondition"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-utils/src/promise_helpers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\n\nexport type Timer = ReturnType<typeof setInterval>;\nexport type Timeout = ReturnType<typeof setTimeout>;\n\n\n/**\n * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.\n * @param object - to check if it is a `Promise`\n * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.\n */\nexport function isPromise(object: unknown): boolean {\n\treturn (\n\t\t(typeof object === 'object' || typeof object === 'function') &&\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\ttypeof (object as { then: unknown }).then === 'function'\n\t);\n}\n\nexport type AsyncFunction<T, K = unknown> = (...args: K[]) => Promise<T>;\n\nexport function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n\terror: Error,\n): Promise<T>;\nexport function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n): Promise<T | undefined>;\n\n/**\n * Wait for a promise but interrupt it if it did not resolve within a given timeout.\n * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.\n * @param awaitable - The promise or function to wait for.\n * @param timeout - The timeout in milliseconds.\n * @param error - (Optional) The error to throw if the timeout reached.\n */\nexport async function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n\terror?: Error,\n): Promise<T | undefined> {\n\tlet timeoutId: Timeout | undefined;\n\tconst result = await Promise.race([\n\t\tawaitable instanceof Promise ? awaitable : awaitable(),\n\t\tnew Promise<undefined | Error>((resolve, reject) => {\n\t\t\ttimeoutId = setTimeout(() => (error ? reject(error) : resolve(undefined)), timeout);\n\t\t}),\n\t]);\n\tif (timeoutId) {\n\t\tclearTimeout(timeoutId);\n\t}\n\tif (result instanceof Error) {\n\t\tthrow result;\n\t}\n\treturn result;\n}\n\n\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached. It returns promise and intervalId.\n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\nexport function pollTillDefinedAndReturnIntervalId<T>(\n\tfunc: AsyncFunction<T>,\n\tinterval: number,\n): [Promise<Exclude<T, undefined>>, Timer] {\n\n\tlet intervalId: Timer | undefined;\n\tconst polledRes = new Promise<Exclude<T, undefined>>((resolve, reject) => {\n\t\tintervalId = setInterval(function intervalCallbackFunc(){\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await waitWithTimeout(func, interval);\n\n\t\t\t\t\tif (!isNullish(res)) {\n\t\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\t\tresolve(res as unknown as Exclude<T, undefined>);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})() as unknown;\n\t\t\treturn intervalCallbackFunc;}() // this will immediate invoke first call\n\t\t\t, interval);\n\t});\n\n\treturn [polledRes as unknown as Promise<Exclude<T, undefined>>, intervalId!];\n}\n\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached.\n * pollTillDefinedAndReturnIntervalId() function should be used instead of pollTillDefined if you need IntervalId in result.\n * This function will be deprecated in next major release so use pollTillDefinedAndReturnIntervalId(). \n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\nexport async function pollTillDefined<T>(\n\tfunc: AsyncFunction<T>,\n\tinterval: number,\n): Promise<Exclude<T, undefined>> {\n\treturn pollTillDefinedAndReturnIntervalId(func, interval)[0];\n}\n/**\n * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete\n * @param timeout - The timeout to enforced in milliseconds.\n * @param error - The error to throw if the timeout is reached.\n * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.\n *\n * @example\n * ```ts\n * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));\n * ```\n */\nexport function rejectIfTimeout(timeout: number, error: Error): [Timer, Promise<never>] {\n\tlet timeoutId: Timer | undefined;\n\tconst rejectOnTimeout = new Promise<never>((_, reject) => {\n\t\ttimeoutId = setTimeout(() => {\n\t\t\treject(error);\n\t\t}, timeout);\n\t});\n\treturn [timeoutId!, rejectOnTimeout];\n}\n/**\n * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.\n * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.\n * @param cond - The function/confition to call.\n * @param interval - The interval in milliseconds.\n * @returns - an array with the interval ID and the Promise.\n */\nexport function rejectIfConditionAtInterval<T>(\n\tcond: AsyncFunction<T | undefined>,\n\tinterval: number,\n): [Timer, Promise<never>] {\n\tlet intervalId: Timer | undefined;\n\tconst rejectIfCondition = new Promise<never>((_, reject) => {\n\t\tintervalId = setInterval(() => {\n\t\t\t(async () => {\n\t\t\t\tconst error = await cond();\n\t\t\t\tif (error) {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})() as unknown;\n\t\t}, interval);\n\t});\n\treturn [intervalId!, rejectIfCondition];\n}\n\n"]},"metadata":{},"sourceType":"module"}