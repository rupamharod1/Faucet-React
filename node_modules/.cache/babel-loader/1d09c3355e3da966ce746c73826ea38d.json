{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTransactionForSigning = exports.validateGas = exports.validateFeeMarketGas = exports.validateLegacyGas = exports.validateHardfork = exports.validateBaseChain = exports.validateChainInfo = exports.validateCustomChainInfo = exports.validateTransactionCall = exports.isTransactionCall = exports.validateTransactionWithSender = exports.isTransactionWithSender = exports.isTransactionLegacyUnsigned = exports.isTransaction2930Unsigned = exports.isTransaction1559Unsigned = exports.isAccessList = exports.isAccessListEntry = exports.isBaseTransaction = void 0;\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst format_transaction_js_1 = require(\"./utils/format_transaction.js\");\n\nfunction isBaseTransaction(value) {\n  if (!(0, web3_validator_1.isNullish)(value.to) && !(0, web3_validator_1.isAddress)(value.to)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.type) && !(0, web3_validator_1.isNullish)(value.type) && value.type.length !== 2) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.nonce)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.gas)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.value)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.input)) return false;\n  if (value.chainId && !(0, web3_validator_1.isHexStrict)(value.chainId)) return false;\n  return true;\n}\n\nexports.isBaseTransaction = isBaseTransaction;\n\nfunction isAccessListEntry(value) {\n  if (!(0, web3_validator_1.isNullish)(value.address) && !(0, web3_validator_1.isAddress)(value.address)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.storageKeys) && !value.storageKeys.every(storageKey => (0, web3_validator_1.isHexString32Bytes)(storageKey))) return false;\n  return true;\n}\n\nexports.isAccessListEntry = isAccessListEntry;\n\nfunction isAccessList(value) {\n  if (!Array.isArray(value) || !value.every(accessListEntry => isAccessListEntry(accessListEntry))) return false;\n  return true;\n}\n\nexports.isAccessList = isAccessList;\n\nfunction isTransaction1559Unsigned(value) {\n  if (!isBaseTransaction(value)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.maxFeePerGas)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.maxPriorityFeePerGas)) return false;\n  if (!isAccessList(value.accessList)) return false;\n  return true;\n}\n\nexports.isTransaction1559Unsigned = isTransaction1559Unsigned;\n\nfunction isTransaction2930Unsigned(value) {\n  if (!isBaseTransaction(value)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.gasPrice)) return false;\n  if (!isAccessList(value.accessList)) return false;\n  return true;\n}\n\nexports.isTransaction2930Unsigned = isTransaction2930Unsigned;\n\nfunction isTransactionLegacyUnsigned(value) {\n  if (!isBaseTransaction(value)) return false;\n  if (!(0, web3_validator_1.isHexStrict)(value.gasPrice)) return false;\n  return true;\n}\n\nexports.isTransactionLegacyUnsigned = isTransactionLegacyUnsigned;\n\nfunction isTransactionWithSender(value) {\n  if (!(0, web3_validator_1.isAddress)(value.from)) return false;\n  if (!isBaseTransaction(value)) return false;\n  if (!isTransaction1559Unsigned(value) && !isTransaction2930Unsigned(value) && !isTransactionLegacyUnsigned(value)) return false;\n  return true;\n}\n\nexports.isTransactionWithSender = isTransactionWithSender;\n\nfunction validateTransactionWithSender(value) {\n  if (!isTransactionWithSender(value)) throw new web3_errors_1.InvalidTransactionWithSender(value);\n}\n\nexports.validateTransactionWithSender = validateTransactionWithSender;\n\nfunction isTransactionCall(value) {\n  if (!(0, web3_validator_1.isNullish)(value.from) && !(0, web3_validator_1.isAddress)(value.from)) return false;\n  if (!(0, web3_validator_1.isAddress)(value.to)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.gas) && !(0, web3_validator_1.isHexStrict)(value.gas)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.gasPrice) && !(0, web3_validator_1.isHexStrict)(value.gasPrice)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.value) && !(0, web3_validator_1.isHexStrict)(value.value)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.data) && !(0, web3_validator_1.isHexStrict)(value.data)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.input) && !(0, web3_validator_1.isHexStrict)(value.input)) return false;\n  if (!(0, web3_validator_1.isNullish)(value.type)) return false;\n  if (isTransaction1559Unsigned(value)) return false;\n  if (isTransaction2930Unsigned(value)) return false;\n  return true;\n}\n\nexports.isTransactionCall = isTransactionCall;\n\nfunction validateTransactionCall(value) {\n  if (!isTransactionCall(value)) throw new web3_errors_1.InvalidTransactionCall(value);\n}\n\nexports.validateTransactionCall = validateTransactionCall;\n\nconst validateCustomChainInfo = transaction => {\n  if (!(0, web3_validator_1.isNullish)(transaction.common)) {\n    if ((0, web3_validator_1.isNullish)(transaction.common.customChain)) throw new web3_errors_1.MissingCustomChainError();\n    if ((0, web3_validator_1.isNullish)(transaction.common.customChain.chainId)) throw new web3_errors_1.MissingCustomChainIdError();\n    if (!(0, web3_validator_1.isNullish)(transaction.chainId) && transaction.chainId !== transaction.common.customChain.chainId) throw new web3_errors_1.ChainIdMismatchError({\n      txChainId: transaction.chainId,\n      customChainId: transaction.common.customChain.chainId\n    });\n  }\n};\n\nexports.validateCustomChainInfo = validateCustomChainInfo;\n\nconst validateChainInfo = transaction => {\n  if (!(0, web3_validator_1.isNullish)(transaction.common) && !(0, web3_validator_1.isNullish)(transaction.chain) && !(0, web3_validator_1.isNullish)(transaction.hardfork)) {\n    throw new web3_errors_1.CommonOrChainAndHardforkError();\n  }\n\n  if (!(0, web3_validator_1.isNullish)(transaction.chain) && (0, web3_validator_1.isNullish)(transaction.hardfork) || !(0, web3_validator_1.isNullish)(transaction.hardfork) && (0, web3_validator_1.isNullish)(transaction.chain)) throw new web3_errors_1.MissingChainOrHardforkError({\n    chain: transaction.chain,\n    hardfork: transaction.hardfork\n  });\n};\n\nexports.validateChainInfo = validateChainInfo;\n\nconst validateBaseChain = transaction => {\n  if (!(0, web3_validator_1.isNullish)(transaction.common)) if (!(0, web3_validator_1.isNullish)(transaction.common.baseChain)) if (!(0, web3_validator_1.isNullish)(transaction.chain) && transaction.chain !== transaction.common.baseChain) {\n    throw new web3_errors_1.ChainMismatchError({\n      txChain: transaction.chain,\n      baseChain: transaction.common.baseChain\n    });\n  }\n};\n\nexports.validateBaseChain = validateBaseChain;\n\nconst validateHardfork = transaction => {\n  if (!(0, web3_validator_1.isNullish)(transaction.common)) if (!(0, web3_validator_1.isNullish)(transaction.common.hardfork)) if (!(0, web3_validator_1.isNullish)(transaction.hardfork) && transaction.hardfork !== transaction.common.hardfork) {\n    throw new web3_errors_1.HardforkMismatchError({\n      txHardfork: transaction.hardfork,\n      commonHardfork: transaction.common.hardfork\n    });\n  }\n};\n\nexports.validateHardfork = validateHardfork;\n\nconst validateLegacyGas = transaction => {\n  if ( // This check is verifying gas and gasPrice aren't less than 0.\n  (0, web3_validator_1.isNullish)(transaction.gas) || !(0, web3_validator_1.isUInt)(transaction.gas) || (0, web3_validator_1.isNullish)(transaction.gasPrice) || !(0, web3_validator_1.isUInt)(transaction.gasPrice)) throw new web3_errors_1.InvalidGasOrGasPrice({\n    gas: transaction.gas,\n    gasPrice: transaction.gasPrice\n  });\n  if (!(0, web3_validator_1.isNullish)(transaction.maxFeePerGas) || !(0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas)) throw new web3_errors_1.UnsupportedFeeMarketError({\n    maxFeePerGas: transaction.maxFeePerGas,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n  });\n};\n\nexports.validateLegacyGas = validateLegacyGas;\n\nconst validateFeeMarketGas = transaction => {\n  // These errors come from 1.x, so they must be checked before\n  // InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error\n  // for the same code executing in 1.x\n  if (!(0, web3_validator_1.isNullish)(transaction.gasPrice) && transaction.type === '0x2') throw new web3_errors_1.Eip1559GasPriceError(transaction.gasPrice);\n  if (transaction.type === '0x0' || transaction.type === '0x1') throw new web3_errors_1.UnsupportedFeeMarketError({\n    maxFeePerGas: transaction.maxFeePerGas,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n  });\n  if ((0, web3_validator_1.isNullish)(transaction.maxFeePerGas) || !(0, web3_validator_1.isUInt)(transaction.maxFeePerGas) || (0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) || !(0, web3_validator_1.isUInt)(transaction.maxPriorityFeePerGas)) throw new web3_errors_1.InvalidMaxPriorityFeePerGasOrMaxFeePerGas({\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  });\n};\n\nexports.validateFeeMarketGas = validateFeeMarketGas;\n/**\n * This method checks if all required gas properties are present for either\n * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)\n */\n\nconst validateGas = transaction => {\n  const gasPresent = !(0, web3_validator_1.isNullish)(transaction.gas) || !(0, web3_validator_1.isNullish)(transaction.gasLimit);\n  const legacyGasPresent = gasPresent && !(0, web3_validator_1.isNullish)(transaction.gasPrice);\n  const feeMarketGasPresent = gasPresent && !(0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) && !(0, web3_validator_1.isNullish)(transaction.maxFeePerGas);\n  if (!legacyGasPresent && !feeMarketGasPresent) throw new web3_errors_1.MissingGasError({\n    gas: transaction.gas,\n    gasPrice: transaction.gasPrice,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  });\n  if (legacyGasPresent && feeMarketGasPresent) throw new web3_errors_1.TransactionGasMismatchError({\n    gas: transaction.gas,\n    gasPrice: transaction.gasPrice,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  });\n  (legacyGasPresent ? exports.validateLegacyGas : exports.validateFeeMarketGas)(transaction);\n  (!(0, web3_validator_1.isNullish)(transaction.type) && transaction.type > '0x1' ? exports.validateFeeMarketGas : exports.validateLegacyGas)(transaction);\n};\n\nexports.validateGas = validateGas;\n\nconst validateTransactionForSigning = (transaction, overrideMethod) => {\n  if (!(0, web3_validator_1.isNullish)(overrideMethod)) {\n    overrideMethod(transaction);\n    return;\n  }\n\n  if (typeof transaction !== 'object' || (0, web3_validator_1.isNullish)(transaction)) throw new web3_errors_1.InvalidTransactionObjectError(transaction);\n  (0, exports.validateCustomChainInfo)(transaction);\n  (0, exports.validateChainInfo)(transaction);\n  (0, exports.validateBaseChain)(transaction);\n  (0, exports.validateHardfork)(transaction);\n  const formattedTransaction = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT);\n  (0, exports.validateGas)(formattedTransaction);\n  if ((0, web3_validator_1.isNullish)(formattedTransaction.nonce) || (0, web3_validator_1.isNullish)(formattedTransaction.chainId) || formattedTransaction.nonce.startsWith('-') || formattedTransaction.chainId.startsWith('-')) throw new web3_errors_1.InvalidNonceOrChainIdError({\n    nonce: transaction.nonce,\n    chainId: transaction.chainId\n  });\n};\n\nexports.validateTransactionForSigning = validateTransactionForSigning;","map":{"version":3,"mappings":"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","names":["isBaseTransaction","value","to","type","length","nonce","gas","input","chainId","exports","isAccessListEntry","address","storageKeys","every","storageKey","isAccessList","Array","isArray","accessListEntry","isTransaction1559Unsigned","maxFeePerGas","maxPriorityFeePerGas","accessList","isTransaction2930Unsigned","gasPrice","isTransactionLegacyUnsigned","isTransactionWithSender","from","validateTransactionWithSender","web3_errors_1","isTransactionCall","data","validateTransactionCall","validateCustomChainInfo","transaction","common","customChain","txChainId","customChainId","validateChainInfo","chain","hardfork","validateBaseChain","baseChain","txChain","validateHardfork","txHardfork","commonHardfork","validateLegacyGas","validateFeeMarketGas","validateGas","gasPresent","gasLimit","legacyGasPresent","feeMarketGasPresent","validateTransactionForSigning","overrideMethod","formattedTransaction","web3_types_1","startsWith"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/validation.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tAccessList,\n\tAccessListEntry,\n\tBaseTransactionAPI,\n\tTransaction1559UnsignedAPI,\n\tTransaction2930UnsignedAPI,\n\tTransactionCall,\n\tTransactionLegacyUnsignedAPI,\n\tTransaction,\n\tTransactionWithSenderAPI,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { isAddress, isHexStrict, isHexString32Bytes, isNullish, isUInt } from 'web3-validator';\nimport {\n\tChainMismatchError,\n\tHardforkMismatchError,\n\tChainIdMismatchError,\n\tCommonOrChainAndHardforkError,\n\tEip1559GasPriceError,\n\tInvalidGasOrGasPrice,\n\tInvalidMaxPriorityFeePerGasOrMaxFeePerGas,\n\tInvalidNonceOrChainIdError,\n\tInvalidTransactionCall,\n\tInvalidTransactionObjectError,\n\tInvalidTransactionWithSender,\n\tMissingChainOrHardforkError,\n\tMissingCustomChainError,\n\tMissingCustomChainIdError,\n\tMissingGasError,\n\tTransactionGasMismatchError,\n\tUnsupportedFeeMarketError,\n} from 'web3-errors';\nimport { formatTransaction } from './utils/format_transaction.js';\nimport { InternalTransaction } from './types.js';\n\nexport function isBaseTransaction(value: BaseTransactionAPI): boolean {\n\tif (!isNullish(value.to) && !isAddress(value.to)) return false;\n\tif (!isHexStrict(value.type) && !isNullish(value.type) && value.type.length !== 2) return false;\n\tif (!isHexStrict(value.nonce)) return false;\n\tif (!isHexStrict(value.gas)) return false;\n\tif (!isHexStrict(value.value)) return false;\n\tif (!isHexStrict(value.input)) return false;\n\tif (value.chainId && !isHexStrict(value.chainId)) return false;\n\n\treturn true;\n}\n\nexport function isAccessListEntry(value: AccessListEntry): boolean {\n\tif (!isNullish(value.address) && !isAddress(value.address)) return false;\n\tif (\n\t\t!isNullish(value.storageKeys) &&\n\t\t!value.storageKeys.every(storageKey => isHexString32Bytes(storageKey))\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function isAccessList(value: AccessList): boolean {\n\tif (\n\t\t!Array.isArray(value) ||\n\t\t!value.every(accessListEntry => isAccessListEntry(accessListEntry))\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function isTransaction1559Unsigned(value: Transaction1559UnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.maxFeePerGas)) return false;\n\tif (!isHexStrict(value.maxPriorityFeePerGas)) return false;\n\tif (!isAccessList(value.accessList)) return false;\n\n\treturn true;\n}\n\nexport function isTransaction2930Unsigned(value: Transaction2930UnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.gasPrice)) return false;\n\tif (!isAccessList(value.accessList)) return false;\n\n\treturn true;\n}\n\nexport function isTransactionLegacyUnsigned(value: TransactionLegacyUnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.gasPrice)) return false;\n\n\treturn true;\n}\n\nexport function isTransactionWithSender(value: TransactionWithSenderAPI): boolean {\n\tif (!isAddress(value.from)) return false;\n\tif (!isBaseTransaction(value)) return false;\n\tif (\n\t\t!isTransaction1559Unsigned(value as Transaction1559UnsignedAPI) &&\n\t\t!isTransaction2930Unsigned(value as Transaction2930UnsignedAPI) &&\n\t\t!isTransactionLegacyUnsigned(value as TransactionLegacyUnsignedAPI)\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function validateTransactionWithSender(value: TransactionWithSenderAPI) {\n\tif (!isTransactionWithSender(value)) throw new InvalidTransactionWithSender(value);\n}\n\nexport function isTransactionCall(value: TransactionCall): boolean {\n\tif (!isNullish(value.from) && !isAddress(value.from)) return false;\n\tif (!isAddress(value.to)) return false;\n\tif (!isNullish(value.gas) && !isHexStrict(value.gas)) return false;\n\tif (!isNullish(value.gasPrice) && !isHexStrict(value.gasPrice)) return false;\n\tif (!isNullish(value.value) && !isHexStrict(value.value)) return false;\n\tif (!isNullish(value.data) && !isHexStrict(value.data)) return false;\n\tif (!isNullish(value.input) && !isHexStrict(value.input)) return false;\n\tif (!isNullish(value.type)) return false;\n\tif (isTransaction1559Unsigned(value as Transaction1559UnsignedAPI)) return false;\n\tif (isTransaction2930Unsigned(value as Transaction2930UnsignedAPI)) return false;\n\n\treturn true;\n}\n\nexport function validateTransactionCall(value: TransactionCall) {\n\tif (!isTransactionCall(value)) throw new InvalidTransactionCall(value);\n}\n\nexport const validateCustomChainInfo = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common)) {\n\t\tif (isNullish(transaction.common.customChain)) throw new MissingCustomChainError();\n\t\tif (isNullish(transaction.common.customChain.chainId))\n\t\t\tthrow new MissingCustomChainIdError();\n\t\tif (\n\t\t\t!isNullish(transaction.chainId) &&\n\t\t\ttransaction.chainId !== transaction.common.customChain.chainId\n\t\t)\n\t\t\tthrow new ChainIdMismatchError({\n\t\t\t\ttxChainId: transaction.chainId,\n\t\t\t\tcustomChainId: transaction.common.customChain.chainId,\n\t\t\t});\n\t}\n};\nexport const validateChainInfo = (transaction: InternalTransaction) => {\n\tif (\n\t\t!isNullish(transaction.common) &&\n\t\t!isNullish(transaction.chain) &&\n\t\t!isNullish(transaction.hardfork)\n\t) {\n\t\tthrow new CommonOrChainAndHardforkError();\n\t}\n\tif (\n\t\t(!isNullish(transaction.chain) && isNullish(transaction.hardfork)) ||\n\t\t(!isNullish(transaction.hardfork) && isNullish(transaction.chain))\n\t)\n\t\tthrow new MissingChainOrHardforkError({\n\t\t\tchain: transaction.chain,\n\t\t\thardfork: transaction.hardfork,\n\t\t});\n};\nexport const validateBaseChain = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common))\n\t\tif (!isNullish(transaction.common.baseChain))\n\t\t\tif (\n\t\t\t\t!isNullish(transaction.chain) &&\n\t\t\t\ttransaction.chain !== transaction.common.baseChain\n\t\t\t) {\n\t\t\t\tthrow new ChainMismatchError({\n\t\t\t\t\ttxChain: transaction.chain,\n\t\t\t\t\tbaseChain: transaction.common.baseChain,\n\t\t\t\t});\n\t\t\t}\n};\nexport const validateHardfork = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common))\n\t\tif (!isNullish(transaction.common.hardfork))\n\t\t\tif (\n\t\t\t\t!isNullish(transaction.hardfork) &&\n\t\t\t\ttransaction.hardfork !== transaction.common.hardfork\n\t\t\t) {\n\t\t\t\tthrow new HardforkMismatchError({\n\t\t\t\t\ttxHardfork: transaction.hardfork,\n\t\t\t\t\tcommonHardfork: transaction.common.hardfork,\n\t\t\t\t});\n\t\t\t}\n};\n\nexport const validateLegacyGas = (transaction: InternalTransaction) => {\n\tif (\n\t\t// This check is verifying gas and gasPrice aren't less than 0.\n\t\tisNullish(transaction.gas) ||\n\t\t!isUInt(transaction.gas) ||\n\t\tisNullish(transaction.gasPrice) ||\n\t\t!isUInt(transaction.gasPrice)\n\t)\n\t\tthrow new InvalidGasOrGasPrice({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t});\n\tif (!isNullish(transaction.maxFeePerGas) || !isNullish(transaction.maxPriorityFeePerGas))\n\t\tthrow new UnsupportedFeeMarketError({\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t});\n};\n\nexport const validateFeeMarketGas = (transaction: InternalTransaction) => {\n\t// These errors come from 1.x, so they must be checked before\n\t// InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error\n\t// for the same code executing in 1.x\n\tif (!isNullish(transaction.gasPrice) && transaction.type === '0x2')\n\t\tthrow new Eip1559GasPriceError(transaction.gasPrice);\n\tif (transaction.type === '0x0' || transaction.type === '0x1')\n\t\tthrow new UnsupportedFeeMarketError({\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t});\n\n\tif (\n\t\tisNullish(transaction.maxFeePerGas) ||\n\t\t!isUInt(transaction.maxFeePerGas) ||\n\t\tisNullish(transaction.maxPriorityFeePerGas) ||\n\t\t!isUInt(transaction.maxPriorityFeePerGas)\n\t)\n\t\tthrow new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n};\n\n/**\n * This method checks if all required gas properties are present for either\n * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)\n */\nexport const validateGas = (transaction: InternalTransaction) => {\n\tconst gasPresent = !isNullish(transaction.gas) || !isNullish(transaction.gasLimit);\n\tconst legacyGasPresent = gasPresent && !isNullish(transaction.gasPrice);\n\tconst feeMarketGasPresent =\n\t\tgasPresent &&\n\t\t!isNullish(transaction.maxPriorityFeePerGas) &&\n\t\t!isNullish(transaction.maxFeePerGas);\n\n\tif (!legacyGasPresent && !feeMarketGasPresent)\n\t\tthrow new MissingGasError({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n\n\tif (legacyGasPresent && feeMarketGasPresent)\n\t\tthrow new TransactionGasMismatchError({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n\n\t(legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);\n\t(!isNullish(transaction.type) && transaction.type > '0x1'\n\t\t? validateFeeMarketGas\n\t\t: validateLegacyGas)(transaction);\n};\n\nexport const validateTransactionForSigning = (\n\ttransaction: InternalTransaction,\n\toverrideMethod?: (transaction: InternalTransaction) => void,\n) => {\n\tif (!isNullish(overrideMethod)) {\n\t\toverrideMethod(transaction);\n\t\treturn;\n\t}\n\n\tif (typeof transaction !== 'object' || isNullish(transaction))\n\t\tthrow new InvalidTransactionObjectError(transaction);\n\n\tvalidateCustomChainInfo(transaction);\n\tvalidateChainInfo(transaction);\n\tvalidateBaseChain(transaction);\n\tvalidateHardfork(transaction);\n\n\tconst formattedTransaction = formatTransaction(transaction as Transaction, ETH_DATA_FORMAT);\n\tvalidateGas(formattedTransaction);\n\n\tif (\n\t\tisNullish(formattedTransaction.nonce) ||\n\t\tisNullish(formattedTransaction.chainId) ||\n\t\tformattedTransaction.nonce.startsWith('-') ||\n\t\tformattedTransaction.chainId.startsWith('-')\n\t)\n\t\tthrow new InvalidNonceOrChainIdError({\n\t\t\tnonce: transaction.nonce,\n\t\t\tchainId: transaction.chainId,\n\t\t});\n};\n"]},"metadata":{},"sourceType":"script"}