{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { decrypt as createDecipheriv, encrypt as createCipheriv } from 'ethereum-cryptography/aes.js';\nimport { pbkdf2Sync } from 'ethereum-cryptography/pbkdf2.js';\nimport { scryptSync } from 'ethereum-cryptography/scrypt.js';\nimport { InvalidKdfError, InvalidPasswordError, InvalidPrivateKeyError, InvalidSignatureError, IVLengthError, KeyDerivationError, KeyStoreVersionError, PBKDF2IterationsError, PrivateKeyLengthError, TransactionSigningError, UndefinedRawTransactionError } from 'web3-errors';\nimport { bytesToUint8Array, bytesToHex, fromUtf8, hexToBytes, numberToHex, randomBytes, sha3Raw, toChecksumAddress, uint8ArrayConcat, utf8ToHex, uuidV4 } from 'web3-utils';\nimport { isHexStrict, isNullish, isString, validator } from 'web3-validator';\nimport { secp256k1 } from './tx/constants.js';\nimport { keyStoreSchema } from './schemas.js';\nimport { TransactionFactory } from './tx/transactionFactory.js';\n/**\n * Get the private key Uint8Array after the validation\n */\n\nexport const parseAndValidatePrivateKey = (data, ignoreLength) => {\n  let privateKeyUint8Array; // To avoid the case of 1 character less in a hex string which is prefixed with '0' by using 'bytesToUint8Array'\n\n  if (!ignoreLength && typeof data === 'string' && isHexStrict(data) && data.length !== 66) {\n    throw new PrivateKeyLengthError();\n  }\n\n  try {\n    privateKeyUint8Array = data instanceof Uint8Array ? data : bytesToUint8Array(data);\n  } catch (_a) {\n    throw new InvalidPrivateKeyError();\n  }\n\n  if (!ignoreLength && privateKeyUint8Array.byteLength !== 32) {\n    throw new PrivateKeyLengthError();\n  }\n\n  return privateKeyUint8Array;\n};\n/**\n *\n * Hashes the given message. The data will be UTF-8 HEX decoded and enveloped as follows: \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message and hashed using keccak256.\n *\n * @param message - A message to hash, if its HEX it will be UTF8 decoded.\n * @returns The hashed message\n *\n * ```ts\n * hashMessage(\"Hello world\")\n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * hashMessage(utf8ToHex(\"Hello world\")) // Will be hex decoded in hashMessage\n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * ```\n */\n\nexport const hashMessage = message => {\n  const messageHex = isHexStrict(message) ? message : utf8ToHex(message);\n  const messageBytes = hexToBytes(messageHex);\n  const preamble = hexToBytes(fromUtf8(`\\x19Ethereum Signed Message:\\n${messageBytes.byteLength}`));\n  const ethMessage = uint8ArrayConcat(preamble, messageBytes);\n  return sha3Raw(ethMessage); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n};\n/**\n * Signs arbitrary data with a given private key.\n * **_NOTE:_** The value passed as the data parameter will be UTF-8 HEX decoded and wrapped as follows: \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message\n *\n * @param data - The data to sign\n * @param privateKey - The 32 byte private key to sign with\n * @returns The signature Object containing the message, messageHash, signature r, s, v\n *\n * ```ts\n * web3.eth.accounts.sign('Some data', '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')\n * > {\n * message: 'Some data',\n * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n * v: '0x1c',\n * r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',\n * s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029',\n * signature: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a0291c'\n * }\n * ```\n */\n\nexport const sign = (data, privateKey) => {\n  const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n  const hash = hashMessage(data);\n  const signature = secp256k1.sign(hash.substring(2), privateKeyUint8Array);\n  const signatureBytes = signature.toCompactRawBytes();\n  const r = signature.r.toString(16).padStart(64, '0');\n  const s = signature.s.toString(16).padStart(64, '0');\n  const v = signature.recovery + 27;\n  return {\n    message: data,\n    messageHash: hash,\n    v: numberToHex(v),\n    r: `0x${r}`,\n    s: `0x${s}`,\n    signature: `${bytesToHex(signatureBytes)}${v.toString(16)}`\n  };\n};\n/**\n * Signs an Ethereum transaction with a given private key.\n *\n * @param transaction - The transaction, must be a legacy, EIP2930 or EIP 1559 transaction type\n * @param privateKey -  The private key to import. This is 32 bytes of random data.\n * @returns A signTransactionResult object that contains message hash, r, s, v, transaction hash and raw transaction.\n *\n * This function is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.\n * This function will rely on user to provide the full transaction to be signed. If you want to sign a partial transaction object\n * Use {@link Web3.eth.accounts.sign} instead.\n *\n * Signing a legacy transaction\n * ```ts\n * signTransaction({\n *\tto: '0x118C2E5F57FD62C2B5b46a5ae9216F4FF4011a07',\n *\tvalue: '0x186A0',\n *\tgasLimit: '0x520812',\n *\tgasPrice: '0x09184e72a000',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0,\n * }, '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318'))\n * }\n * > {\n * messageHash: '0x28b7b75f7ba48d588a902c1ff4d5d13cc0ca9ac0aaa39562368146923fb853bf',\n * v: '0x25',\n * r: '0x601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5',\n * s: '0x690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * rawTransaction: '0xf869808609184e72a0008352081294118c2e5f57fd62c2b5b46a5ae9216f4ff4011a07830186a08025a00601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5a0690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * ```\n * Signing an eip 1559 transaction\n * ```ts\n * signTransaction({\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tmaxPriorityFeePerGas: '0x3B9ACA00',\n *\tmaxFeePerGas: '0xB2D05E00',\n *\tgasLimit: '0x6A4012',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0,\n * },\"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * > {\n *  messageHash: '0x5744f24d5f0aff6c70487c8e85adf07d8564e50b08558788f00479611d7bae5f',\n * v: '0x25',\n * r: '0x78a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347',\n * s: '0x9cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * rawTransaction: '0xf8638080836a401294f0109fc8df283027b6285cc889f5aa624eac1f55830186a08025a078a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347a009cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n * Signing an eip 2930 transaction\n * ```ts\n * signTransaction({\n *\tchainId: 1,\n *\tnonce: 0,\n *\tgasPrice: '0x09184e72a000',\n *\tgasLimit: '0x2710321',\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\taccessList: [\n *\t\t{\n *\t\t\taddress: '0x0000000000000000000000000000000000000101',\n *\t\t\tstorageKeys: [\n *\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n *\t\t\t\t'0x00000000000000000000000000000000000000000000000000000000000060a7',\n *\t\t\t],\n *\t\t},\n *\t],\n * },\"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * > {\n * messageHash: '0xc55ea24bdb4c379550a7c9a6818ac39ca33e75bc78ddb862bd82c31cc1c7a073',\n * v: '0x26',\n * r: '0x27344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098e',\n * s: '0x519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * rawTransaction: '0xf86a808609184e72a000840271032194f0109fc8df283027b6285cc889f5aa624eac1f55830186a08026a027344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098ea0519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n */\n\nexport const signTransaction = (transaction, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n  const signedTx = transaction.sign(hexToBytes(privateKey));\n  if (isNullish(signedTx.v) || isNullish(signedTx.r) || isNullish(signedTx.s)) throw new TransactionSigningError('Signer Error');\n  const validationErrors = signedTx.validate(true);\n\n  if (validationErrors.length > 0) {\n    let errorString = 'Signer Error ';\n\n    for (const validationError of validationErrors) {\n      errorString += `${errorString} ${validationError}.`;\n    }\n\n    throw new TransactionSigningError(errorString);\n  }\n\n  const rawTx = bytesToHex(signedTx.serialize());\n  const txHash = sha3Raw(rawTx); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n\n  return {\n    messageHash: bytesToHex(signedTx.getMessageToSign(true)),\n    v: `0x${signedTx.v.toString(16)}`,\n    r: `0x${signedTx.r.toString(16).padStart(64, '0')}`,\n    s: `0x${signedTx.s.toString(16).padStart(64, '0')}`,\n    rawTransaction: rawTx,\n    transactionHash: bytesToHex(txHash)\n  };\n});\n/**\n * Recovers the Ethereum address which was used to sign the given RLP encoded transaction.\n *\n * @param rawTransaction - The hex string having RLP encoded transaction\n * @returns The Ethereum address used to sign this transaction\n * ```ts\n * recoverTransaction('0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68');\n * > \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n * ```\n */\n\nexport const recoverTransaction = rawTransaction => {\n  if (isNullish(rawTransaction)) throw new UndefinedRawTransactionError();\n  const tx = TransactionFactory.fromSerializedData(hexToBytes(rawTransaction));\n  return toChecksumAddress(tx.getSenderAddress().toString());\n};\n/**\n * Recovers the Ethereum address which was used to sign the given data\n *\n * @param data - Either a signed message, hash, or the {@link signatureObject}\n * @param signature - The raw RLP encoded signature\n * @param signatureOrV - signatureOrV\n * @param prefixedOrR - prefixedOrR\n * @param s - s\n * @param prefixed - (default: false) If the last parameter is true, the given message will NOT automatically be prefixed with \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message, and assumed to be already prefixed.\n * @returns The Ethereum address used to sign this data\n * ```ts\n * sign('Some data', '0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728');\n * > {\n * message: 'Some data',\n * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n * v: '0x1b',\n * r: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f9',\n * s: '0x53e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb150',\n * signature: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b'\n * }\n * recover('0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b');\n * > '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0'\n * ```\n */\n\nexport const recover = (data, signatureOrV, prefixedOrR, s, prefixed) => {\n  if (typeof data === 'object') {\n    const signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;\n    return recover(data.messageHash, signatureStr, prefixedOrR);\n  }\n\n  if (typeof signatureOrV === 'string' && typeof prefixedOrR === 'string' && !isNullish(s)) {\n    const signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;\n    return recover(data, signatureStr, prefixed);\n  }\n\n  if (isNullish(signatureOrV)) throw new InvalidSignatureError('signature string undefined');\n  const V_INDEX = 130; // r = first 32 bytes, s = second 32 bytes, v = last byte of signature\n\n  const hashedMessage = prefixedOrR ? data : hashMessage(data);\n  let v = parseInt(signatureOrV.substring(V_INDEX), 16); // 0x + r + s + v\n\n  if (v > 26) {\n    v -= 27;\n  }\n\n  const ecPublicKey = secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX)).addRecoveryBit(v).recoverPublicKey(hashedMessage.replace('0x', '')).toRawBytes(false);\n  const publicHash = sha3Raw(ecPublicKey.subarray(1));\n  const address = toChecksumAddress(`0x${publicHash.slice(-40)}`);\n  return address;\n};\n/**\n * Get the ethereum Address from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns The Ethereum address\n * @example\n * ```ts\n * privateKeyToAddress(\"0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728\")\n * > \"0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\"\n * ```\n */\n\nexport const privateKeyToAddress = privateKey => {\n  const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey); // Get public key from private key in compressed format\n\n  const publicKey = secp256k1.getPublicKey(privateKeyUint8Array, false); // Uncompressed ECDSA public key contains the prefix `0x04` which is not used in the Ethereum public key\n\n  const publicKeyHash = sha3Raw(publicKey.slice(1)); // The hash is returned as 256 bits (32 bytes) or 64 hex characters\n  // To get the address, take the last 20 bytes of the public hash\n\n  const address = publicKeyHash.slice(-40);\n  return toChecksumAddress(`0x${address}`);\n};\n/**\n * Get the public key from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param isCompressed - if true, will generate a 33 byte compressed public key instead of a 65 byte public key\n * @returns The public key\n * @example\n * ```ts\n * privateKeyToAddress(\"0x1e046a882bb38236b646c9f135cf90ad90a140810f439875f2a6dd8e50fa261f\", true)\n * > \"0x42beb65f179720abaa3ec9a70a539629cbbc5ec65bb57e7fc78977796837e537662dd17042e6449dc843c281067a4d6d8d1a1775a13c41901670d5de7ee6503a\" // uncompressed public key\n * ```\n */\n\nexport const privateKeyToPublicKey = (privateKey, isCompressed) => {\n  const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey); // Get public key from private key in compressed format\n\n  return `0x${bytesToHex(secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`; // 0x and removing compression byte\n};\n/**\n * encrypt a private key with a password, returns a V3 JSON Keystore\n *\n * Read more: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n *\n * @param privateKey - The private key to encrypt, 32 bytes.\n * @param password - The password used for encryption.\n * @param options - Options to configure to encrypt the keystore either scrypt or pbkdf2\n * @returns Returns a V3 JSON Keystore\n *\n *\n * Encrypt using scrypt options\n * ```ts\n * encrypt('0x67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n * '123',\n * {\n *   n: 8192,\n *\t iv: web3.utils.hexToBytes('0xbfb43120ae00e9de110f8325143a2709'),\n *\t salt: web3.utils.hexToBytes('0x210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'),\n *\t),\n * }).then(console.log)\n * > {\n * version: 3,\n * id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n * address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n * crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *   cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *   cipher: 'aes-128-ctr',\n *   kdf: 'scrypt',\n *   kdfparams: {\n *     n: 8192,\n *     r: 8,\n *     p: 1,\n *     dklen: 32,\n *     salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *   },\n *   mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n * }\n *}\n *```\n * Encrypting using pbkdf2 options\n * ```ts\n * encrypt('0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n *'123',\n *{\n *\tiv: 'bfb43120ae00e9de110f8325143a2709',\n *\tsalt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *\tc: 262144,\n *\tkdf: 'pbkdf2',\n *}).then(console.log)\n * >\n * {\n *   version: 3,\n *   id: '77381417-0973-4e4b-b590-8eb3ace0fe2d',\n *   address: 'b8ce9ab6943e0eced004cde8e3bbed6568b2fa01',\n *   crypto: {\n *     ciphertext: '76512156a34105fa6473ad040c666ae7b917d14c06543accc0d2dc28e6073b12',\n *     cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *     cipher: 'aes-128-ctr',\n *     kdf: 'pbkdf2',\n *     kdfparams: {\n *       dklen: 32,\n *       salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *       c: 262144,\n *       prf: 'hmac-sha256'\n *     },\n *   mac: '46eb4884e82dc43b5aa415faba53cc653b7038e9d61cc32fd643cf8c396189b7'\n *   }\n * }\n *```\n */\n\nexport const encrypt = (privateKey, password, options) => __awaiter(void 0, void 0, void 0, function* () {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey); // if given salt or iv is a string, convert it to a Uint8Array\n\n  let salt;\n\n  if (options === null || options === void 0 ? void 0 : options.salt) {\n    salt = typeof options.salt === 'string' ? hexToBytes(options.salt) : options.salt;\n  } else {\n    salt = randomBytes(32);\n  }\n\n  if (!(isString(password) || password instanceof Uint8Array)) {\n    throw new InvalidPasswordError();\n  }\n\n  const uint8ArrayPassword = typeof password === 'string' ? hexToBytes(utf8ToHex(password)) : password;\n  let initializationVector;\n\n  if (options === null || options === void 0 ? void 0 : options.iv) {\n    initializationVector = typeof options.iv === 'string' ? hexToBytes(options.iv) : options.iv;\n\n    if (initializationVector.length !== 16) {\n      throw new IVLengthError();\n    }\n  } else {\n    initializationVector = randomBytes(16);\n  }\n\n  const kdf = (_a = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a !== void 0 ? _a : 'scrypt';\n  let derivedKey;\n  let kdfparams; // derive key from key derivation function\n\n  if (kdf === 'pbkdf2') {\n    kdfparams = {\n      dklen: (_b = options === null || options === void 0 ? void 0 : options.dklen) !== null && _b !== void 0 ? _b : 32,\n      salt: bytesToHex(salt).replace('0x', ''),\n      c: (_c = options === null || options === void 0 ? void 0 : options.c) !== null && _c !== void 0 ? _c : 262144,\n      prf: 'hmac-sha256'\n    };\n\n    if (kdfparams.c < 1000) {\n      // error when c < 1000, pbkdf2 is less secure with less iterations\n      throw new PBKDF2IterationsError();\n    }\n\n    derivedKey = pbkdf2Sync(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    kdfparams = {\n      n: (_d = options === null || options === void 0 ? void 0 : options.n) !== null && _d !== void 0 ? _d : 8192,\n      r: (_e = options === null || options === void 0 ? void 0 : options.r) !== null && _e !== void 0 ? _e : 8,\n      p: (_f = options === null || options === void 0 ? void 0 : options.p) !== null && _f !== void 0 ? _f : 1,\n      dklen: (_g = options === null || options === void 0 ? void 0 : options.dklen) !== null && _g !== void 0 ? _g : 32,\n      salt: bytesToHex(salt).replace('0x', '')\n    };\n    derivedKey = scryptSync(uint8ArrayPassword, salt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);\n  } else {\n    throw new InvalidKdfError();\n  }\n\n  const cipher = yield createCipheriv(privateKeyUint8Array, derivedKey.slice(0, 16), initializationVector, 'aes-128-ctr');\n  const ciphertext = bytesToHex(cipher).slice(2);\n  const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), cipher)).replace('0x', '');\n  return {\n    version: 3,\n    id: uuidV4(),\n    address: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace('0x', ''),\n    crypto: {\n      ciphertext,\n      cipherparams: {\n        iv: bytesToHex(initializationVector).replace('0x', '')\n      },\n      cipher: 'aes-128-ctr',\n      kdf,\n      kdfparams,\n      mac\n    }\n  };\n});\n/**\n * Get an Account object from the privateKey\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns A Web3Account object\n *\n * The `Web3Account.signTransaction` is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.\n * Use {@link Web3.eth.accounts.signTransaction} instead.\n *\n * ```ts\n * privateKeyToAccount(\"0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709\");\n * >    {\n * \t\t\taddress: '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01',\n * \t\t\tprivateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n * \t\t\tsign,\n * \t\t\tsignTransaction,\n * \t\t\tencrypt,\n * \t}\n * ```\n */\n\nexport const privateKeyToAccount = (privateKey, ignoreLength) => {\n  const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);\n  return {\n    address: privateKeyToAddress(privateKeyUint8Array),\n    privateKey: bytesToHex(privateKeyUint8Array),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    signTransaction: _tx => {\n      throw new TransactionSigningError('Do not have network access to sign the transaction');\n    },\n    sign: data => sign(typeof data === 'string' ? data : JSON.stringify(data), privateKeyUint8Array),\n    encrypt: (password, options) => __awaiter(void 0, void 0, void 0, function* () {\n      return encrypt(privateKeyUint8Array, password, options);\n    })\n  };\n};\n/**\n *\n * Generates and returns a Web3Account object that includes the private and public key\n * For creation of private key, it uses an audited package ethereum-cryptography/secp256k1\n * that is cryptographically secure random number with certain characteristics.\n * Read more: https://www.npmjs.com/package/ethereum-cryptography#secp256k1-curve\n *\n * @returns A Web3Account object\n * ```ts\n * web3.eth.accounts.create();\n * {\n * address: '0xbD504f977021b5E5DdccD8741A368b147B3B38bB',\n * privateKey: '0x964ced1c69ad27a311c432fdc0d8211e987595f7eb34ab405a5f16bdc9563ec5',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */\n\nexport const create = () => {\n  const privateKey = secp256k1.utils.randomPrivateKey();\n  return privateKeyToAccount(`${bytesToHex(privateKey)}`);\n};\n/**\n * Decrypts a v3 keystore JSON, and creates the account.\n *\n * @param keystore - the encrypted Keystore object or string to decrypt\n * @param password - The password that was used for encryption\n * @param nonStrict - if true and given a json string, the keystore will be parsed as lowercase.\n * @returns Returns the decrypted Web3Account object\n * Decrypting scrypt\n *\n * ```ts\n * decrypt({\n *   version: 3,\n *   id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n *   address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n *   crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *      cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *      cipher: 'aes-128-ctr',\n *      kdf: 'scrypt',\n *      kdfparams: {\n *        n: 8192,\n *        r: 8,\n *        p: 1,\n *        dklen: 32,\n *        salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *      },\n *      mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n *    }\n *   }, '123').then(console.log)\n * > {\n * address: '0xcdA9A91875fc35c8Ac1320E098e584495d66e47c',\n * privateKey: '67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */\n\nexport const decrypt = (keystore, password, nonStrict) => __awaiter(void 0, void 0, void 0, function* () {\n  const json = typeof keystore === 'object' ? keystore : JSON.parse(nonStrict ? keystore.toLowerCase() : keystore);\n  validator.validateJSONSchema(keyStoreSchema, json);\n  if (json.version !== 3) throw new KeyStoreVersionError();\n  const uint8ArrayPassword = typeof password === 'string' ? hexToBytes(utf8ToHex(password)) : password;\n  validator.validate(['bytes'], [uint8ArrayPassword]);\n  let derivedKey;\n\n  if (json.crypto.kdf === 'scrypt') {\n    const kdfparams = json.crypto.kdfparams;\n    const uint8ArraySalt = typeof kdfparams.salt === 'string' ? hexToBytes(kdfparams.salt) : kdfparams.salt;\n    derivedKey = scryptSync(uint8ArrayPassword, uint8ArraySalt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    const kdfparams = json.crypto.kdfparams;\n    const uint8ArraySalt = typeof kdfparams.salt === 'string' ? hexToBytes(kdfparams.salt) : kdfparams.salt;\n    derivedKey = pbkdf2Sync(uint8ArrayPassword, uint8ArraySalt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new InvalidKdfError();\n  }\n\n  const ciphertext = hexToBytes(json.crypto.ciphertext);\n  const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), ciphertext)).replace('0x', '');\n\n  if (mac !== json.crypto.mac) {\n    throw new KeyDerivationError();\n  }\n\n  const seed = yield createDecipheriv(hexToBytes(json.crypto.ciphertext), derivedKey.slice(0, 16), hexToBytes(json.crypto.cipherparams.iv));\n  return privateKeyToAccount(seed);\n});","map":{"version":3,"mappings":"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","names":["decrypt","createDecipheriv","encrypt","createCipheriv","pbkdf2Sync","scryptSync","InvalidKdfError","InvalidPasswordError","InvalidPrivateKeyError","InvalidSignatureError","IVLengthError","KeyDerivationError","KeyStoreVersionError","PBKDF2IterationsError","PrivateKeyLengthError","TransactionSigningError","UndefinedRawTransactionError","bytesToUint8Array","bytesToHex","fromUtf8","hexToBytes","numberToHex","randomBytes","sha3Raw","toChecksumAddress","uint8ArrayConcat","utf8ToHex","uuidV4","isHexStrict","isNullish","isString","validator","secp256k1","keyStoreSchema","TransactionFactory","parseAndValidatePrivateKey","data","ignoreLength","privateKeyUint8Array","length","Uint8Array","byteLength","hashMessage","message","messageHex","messageBytes","preamble","ethMessage","sign","privateKey","hash","signature","substring","signatureBytes","toCompactRawBytes","r","toString","padStart","s","v","recovery","messageHash","signTransaction","transaction","__awaiter","signedTx","validationErrors","validate","errorString","validationError","rawTx","serialize","txHash","getMessageToSign","rawTransaction","transactionHash","recoverTransaction","tx","fromSerializedData","getSenderAddress","recover","signatureOrV","prefixedOrR","prefixed","signatureStr","slice","V_INDEX","hashedMessage","parseInt","ecPublicKey","Signature","fromCompact","addRecoveryBit","recoverPublicKey","replace","toRawBytes","publicHash","subarray","address","privateKeyToAddress","publicKey","getPublicKey","publicKeyHash","privateKeyToPublicKey","isCompressed","password","options","salt","uint8ArrayPassword","initializationVector","iv","kdf","_a","derivedKey","kdfparams","dklen","_b","c","_c","prf","n","_d","_e","p","_f","_g","cipher","ciphertext","mac","version","id","toLowerCase","crypto","cipherparams","privateKeyToAccount","_tx","JSON","stringify","create","utils","randomPrivateKey","keystore","nonStrict","json","parse","validateJSONSchema","uint8ArraySalt","seed"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth-accounts/src/account.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tdecrypt as createDecipheriv,\n\tencrypt as createCipheriv,\n} from 'ethereum-cryptography/aes.js';\nimport { pbkdf2Sync } from 'ethereum-cryptography/pbkdf2.js';\nimport { scryptSync } from 'ethereum-cryptography/scrypt.js';\nimport {\n\tInvalidKdfError,\n\tInvalidPasswordError,\n\tInvalidPrivateKeyError,\n\tInvalidSignatureError,\n\tIVLengthError,\n\tKeyDerivationError,\n\tKeyStoreVersionError,\n\tPBKDF2IterationsError,\n\tPrivateKeyLengthError,\n\tTransactionSigningError,\n\tUndefinedRawTransactionError,\n} from 'web3-errors';\nimport {\n\tAddress,\n\tBytes,\n\tCipherOptions,\n\tHexString,\n\tKeyStore,\n\tPBKDF2SHA256Params,\n\tScryptParams,\n\tTransaction,\n} from 'web3-types';\nimport {\n\tbytesToUint8Array,\n\tbytesToHex,\n\tfromUtf8,\n\thexToBytes,\n\tnumberToHex,\n\trandomBytes,\n\tsha3Raw,\n\ttoChecksumAddress,\n\tuint8ArrayConcat,\n\tutf8ToHex,\n\tuuidV4,\n} from 'web3-utils';\n\nimport { isHexStrict, isNullish, isString, validator } from 'web3-validator';\nimport { secp256k1 } from './tx/constants.js';\nimport { keyStoreSchema } from './schemas.js';\nimport { TransactionFactory } from './tx/transactionFactory.js';\nimport type {\n\tSignatureObject,\n\tSignTransactionResult,\n\tTypedTransaction,\n\tWeb3Account,\n\tSignResult,\n} from './types.js';\n\n/**\n * Get the private key Uint8Array after the validation\n */\nexport const parseAndValidatePrivateKey = (data: Bytes, ignoreLength?: boolean): Uint8Array => {\n\tlet privateKeyUint8Array: Uint8Array;\n\n\t// To avoid the case of 1 character less in a hex string which is prefixed with '0' by using 'bytesToUint8Array'\n\tif (!ignoreLength && typeof data === 'string' && isHexStrict(data) && data.length !== 66) {\n\t\tthrow new PrivateKeyLengthError();\n\t}\n\n\ttry {\n\t\tprivateKeyUint8Array = data instanceof Uint8Array ? data : bytesToUint8Array(data);\n\t} catch {\n\t\tthrow new InvalidPrivateKeyError();\n\t}\n\n\tif (!ignoreLength && privateKeyUint8Array.byteLength !== 32) {\n\t\tthrow new PrivateKeyLengthError();\n\t}\n\n\treturn privateKeyUint8Array;\n};\n\n/**\n *\n * Hashes the given message. The data will be UTF-8 HEX decoded and enveloped as follows: \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message and hashed using keccak256.\n *\n * @param message - A message to hash, if its HEX it will be UTF8 decoded.\n * @returns The hashed message\n *\n * ```ts\n * hashMessage(\"Hello world\")\n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * hashMessage(utf8ToHex(\"Hello world\")) // Will be hex decoded in hashMessage\n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * ```\n */\nexport const hashMessage = (message: string): string => {\n\tconst messageHex = isHexStrict(message) ? message : utf8ToHex(message);\n\n\tconst messageBytes = hexToBytes(messageHex);\n\n\tconst preamble = hexToBytes(\n\t\tfromUtf8(`\\x19Ethereum Signed Message:\\n${messageBytes.byteLength}`),\n\t);\n\n\tconst ethMessage = uint8ArrayConcat(preamble, messageBytes);\n\n\treturn sha3Raw(ethMessage); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n};\n\n/**\n * Signs arbitrary data with a given private key.\n * **_NOTE:_** The value passed as the data parameter will be UTF-8 HEX decoded and wrapped as follows: \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message\n *\n * @param data - The data to sign\n * @param privateKey - The 32 byte private key to sign with\n * @returns The signature Object containing the message, messageHash, signature r, s, v\n *\n * ```ts\n * web3.eth.accounts.sign('Some data', '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')\n * > {\n * message: 'Some data',\n * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n * v: '0x1c',\n * r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',\n * s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029',\n * signature: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a0291c'\n * }\n * ```\n */\nexport const sign = (data: string, privateKey: Bytes): SignResult => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\tconst hash = hashMessage(data);\n\n\tconst signature = secp256k1.sign(hash.substring(2), privateKeyUint8Array);\n\tconst signatureBytes = signature.toCompactRawBytes();\n\tconst r = signature.r.toString(16).padStart(64, '0');\n\tconst s = signature.s.toString(16).padStart(64, '0');\n\tconst v = signature.recovery! + 27;\n\n\treturn {\n\t\tmessage: data,\n\t\tmessageHash: hash,\n\t\tv: numberToHex(v),\n\t\tr: `0x${r}`,\n\t\ts: `0x${s}`,\n\t\tsignature: `${bytesToHex(signatureBytes)}${v.toString(16)}`,\n\t};\n};\n\n/**\n * Signs an Ethereum transaction with a given private key.\n *\n * @param transaction - The transaction, must be a legacy, EIP2930 or EIP 1559 transaction type\n * @param privateKey -  The private key to import. This is 32 bytes of random data.\n * @returns A signTransactionResult object that contains message hash, r, s, v, transaction hash and raw transaction.\n *\n * This function is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.\n * This function will rely on user to provide the full transaction to be signed. If you want to sign a partial transaction object\n * Use {@link Web3.eth.accounts.sign} instead.\n *\n * Signing a legacy transaction\n * ```ts\n * signTransaction({\n *\tto: '0x118C2E5F57FD62C2B5b46a5ae9216F4FF4011a07',\n *\tvalue: '0x186A0',\n *\tgasLimit: '0x520812',\n *\tgasPrice: '0x09184e72a000',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0,\n * }, '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318'))\n * }\n * > {\n * messageHash: '0x28b7b75f7ba48d588a902c1ff4d5d13cc0ca9ac0aaa39562368146923fb853bf',\n * v: '0x25',\n * r: '0x601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5',\n * s: '0x690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * rawTransaction: '0xf869808609184e72a0008352081294118c2e5f57fd62c2b5b46a5ae9216f4ff4011a07830186a08025a00601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5a0690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * ```\n * Signing an eip 1559 transaction\n * ```ts\n * signTransaction({\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tmaxPriorityFeePerGas: '0x3B9ACA00',\n *\tmaxFeePerGas: '0xB2D05E00',\n *\tgasLimit: '0x6A4012',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0,\n * },\"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * > {\n *  messageHash: '0x5744f24d5f0aff6c70487c8e85adf07d8564e50b08558788f00479611d7bae5f',\n * v: '0x25',\n * r: '0x78a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347',\n * s: '0x9cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * rawTransaction: '0xf8638080836a401294f0109fc8df283027b6285cc889f5aa624eac1f55830186a08025a078a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347a009cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n * Signing an eip 2930 transaction\n * ```ts\n * signTransaction({\n *\tchainId: 1,\n *\tnonce: 0,\n *\tgasPrice: '0x09184e72a000',\n *\tgasLimit: '0x2710321',\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\taccessList: [\n *\t\t{\n *\t\t\taddress: '0x0000000000000000000000000000000000000101',\n *\t\t\tstorageKeys: [\n *\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n *\t\t\t\t'0x00000000000000000000000000000000000000000000000000000000000060a7',\n *\t\t\t],\n *\t\t},\n *\t],\n * },\"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * > {\n * messageHash: '0xc55ea24bdb4c379550a7c9a6818ac39ca33e75bc78ddb862bd82c31cc1c7a073',\n * v: '0x26',\n * r: '0x27344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098e',\n * s: '0x519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * rawTransaction: '0xf86a808609184e72a000840271032194f0109fc8df283027b6285cc889f5aa624eac1f55830186a08026a027344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098ea0519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n */\nexport const signTransaction = async (\n\ttransaction: TypedTransaction,\n\tprivateKey: HexString,\n\t// To make it compatible with rest of the API, have to keep it async\n\t// eslint-disable-next-line @typescript-eslint/require-await\n): Promise<SignTransactionResult> => {\n\tconst signedTx = transaction.sign(hexToBytes(privateKey));\n\tif (isNullish(signedTx.v) || isNullish(signedTx.r) || isNullish(signedTx.s))\n\t\tthrow new TransactionSigningError('Signer Error');\n\n\tconst validationErrors = signedTx.validate(true);\n\n\tif (validationErrors.length > 0) {\n\t\tlet errorString = 'Signer Error ';\n\t\tfor (const validationError of validationErrors) {\n\t\t\terrorString += `${errorString} ${validationError}.`;\n\t\t}\n\t\tthrow new TransactionSigningError(errorString);\n\t}\n\n\tconst rawTx = bytesToHex(signedTx.serialize());\n\tconst txHash = sha3Raw(rawTx); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n\n\treturn {\n\t\tmessageHash: bytesToHex(signedTx.getMessageToSign(true)),\n\t\tv: `0x${signedTx.v.toString(16)}`,\n\t\tr: `0x${signedTx.r.toString(16).padStart(64, '0')}`,\n\t\ts: `0x${signedTx.s.toString(16).padStart(64, '0')}`,\n\t\trawTransaction: rawTx,\n\t\ttransactionHash: bytesToHex(txHash),\n\t};\n};\n\n/**\n * Recovers the Ethereum address which was used to sign the given RLP encoded transaction.\n *\n * @param rawTransaction - The hex string having RLP encoded transaction\n * @returns The Ethereum address used to sign this transaction\n * ```ts\n * recoverTransaction('0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68');\n * > \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n * ```\n */\nexport const recoverTransaction = (rawTransaction: HexString): Address => {\n\tif (isNullish(rawTransaction)) throw new UndefinedRawTransactionError();\n\n\tconst tx = TransactionFactory.fromSerializedData(hexToBytes(rawTransaction));\n\n\treturn toChecksumAddress(tx.getSenderAddress().toString());\n};\n\n/**\n * Recovers the Ethereum address which was used to sign the given data\n *\n * @param data - Either a signed message, hash, or the {@link signatureObject}\n * @param signature - The raw RLP encoded signature\n * @param signatureOrV - signatureOrV\n * @param prefixedOrR - prefixedOrR\n * @param s - s\n * @param prefixed - (default: false) If the last parameter is true, the given message will NOT automatically be prefixed with \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message, and assumed to be already prefixed.\n * @returns The Ethereum address used to sign this data\n * ```ts\n * sign('Some data', '0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728');\n * > {\n * message: 'Some data',\n * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n * v: '0x1b',\n * r: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f9',\n * s: '0x53e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb150',\n * signature: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b'\n * }\n * recover('0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b');\n * > '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0'\n * ```\n */\nexport const recover = (\n\tdata: string | SignatureObject,\n\tsignatureOrV?: string,\n\tprefixedOrR?: boolean | string,\n\ts?: string,\n\tprefixed?: boolean,\n): Address => {\n\tif (typeof data === 'object') {\n\t\tconst signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;\n\t\treturn recover(data.messageHash, signatureStr, prefixedOrR);\n\t}\n\tif (typeof signatureOrV === 'string' && typeof prefixedOrR === 'string' && !isNullish(s)) {\n\t\tconst signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;\n\t\treturn recover(data, signatureStr, prefixed);\n\t}\n\n\tif (isNullish(signatureOrV)) throw new InvalidSignatureError('signature string undefined');\n\n\tconst V_INDEX = 130; // r = first 32 bytes, s = second 32 bytes, v = last byte of signature\n\tconst hashedMessage = prefixedOrR ? data : hashMessage(data);\n\n\tlet v = parseInt(signatureOrV.substring(V_INDEX),16); // 0x + r + s + v\n\tif (v > 26) {\n\t\tv -= 27;\n\t}\n\n\tconst ecPublicKey = secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX))\n\t\t.addRecoveryBit(v)\n\t\t.recoverPublicKey(hashedMessage.replace('0x', ''))\n\t\t.toRawBytes(false);\n\n\tconst publicHash = sha3Raw(ecPublicKey.subarray(1));\n\n\tconst address = toChecksumAddress(`0x${publicHash.slice(-40)}`);\n\n\treturn address;\n};\n\n/**\n * Get the ethereum Address from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns The Ethereum address\n * @example\n * ```ts\n * privateKeyToAddress(\"0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728\")\n * > \"0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\"\n * ```\n */\nexport const privateKeyToAddress = (privateKey: Bytes): string => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\t// Get public key from private key in compressed format\n\tconst publicKey = secp256k1.getPublicKey(privateKeyUint8Array, false);\n\n\t// Uncompressed ECDSA public key contains the prefix `0x04` which is not used in the Ethereum public key\n\tconst publicKeyHash = sha3Raw(publicKey.slice(1));\n\n\t// The hash is returned as 256 bits (32 bytes) or 64 hex characters\n\t// To get the address, take the last 20 bytes of the public hash\n\tconst address = publicKeyHash.slice(-40);\n\n\treturn toChecksumAddress(`0x${address}`);\n};\n\n/**\n * Get the public key from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param isCompressed - if true, will generate a 33 byte compressed public key instead of a 65 byte public key \n * @returns The public key\n * @example\n * ```ts\n * privateKeyToAddress(\"0x1e046a882bb38236b646c9f135cf90ad90a140810f439875f2a6dd8e50fa261f\", true)\n * > \"0x42beb65f179720abaa3ec9a70a539629cbbc5ec65bb57e7fc78977796837e537662dd17042e6449dc843c281067a4d6d8d1a1775a13c41901670d5de7ee6503a\" // uncompressed public key\n * ```\n */\n export const privateKeyToPublicKey = (privateKey: Bytes, isCompressed: boolean): string => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\t// Get public key from private key in compressed format\n\treturn `0x${bytesToHex(secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`; // 0x and removing compression byte\n};\n\n/**\n * encrypt a private key with a password, returns a V3 JSON Keystore\n *\n * Read more: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n *\n * @param privateKey - The private key to encrypt, 32 bytes.\n * @param password - The password used for encryption.\n * @param options - Options to configure to encrypt the keystore either scrypt or pbkdf2\n * @returns Returns a V3 JSON Keystore\n *\n *\n * Encrypt using scrypt options\n * ```ts\n * encrypt('0x67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n * '123',\n * {\n *   n: 8192,\n *\t iv: web3.utils.hexToBytes('0xbfb43120ae00e9de110f8325143a2709'),\n *\t salt: web3.utils.hexToBytes('0x210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'),\n *\t),\n * }).then(console.log)\n * > {\n * version: 3,\n * id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n * address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n * crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *   cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *   cipher: 'aes-128-ctr',\n *   kdf: 'scrypt',\n *   kdfparams: {\n *     n: 8192,\n *     r: 8,\n *     p: 1,\n *     dklen: 32,\n *     salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *   },\n *   mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n * }\n *}\n *```\n * Encrypting using pbkdf2 options\n * ```ts\n * encrypt('0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n *'123',\n *{\n *\tiv: 'bfb43120ae00e9de110f8325143a2709',\n *\tsalt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *\tc: 262144,\n *\tkdf: 'pbkdf2',\n *}).then(console.log)\n * >\n * {\n *   version: 3,\n *   id: '77381417-0973-4e4b-b590-8eb3ace0fe2d',\n *   address: 'b8ce9ab6943e0eced004cde8e3bbed6568b2fa01',\n *   crypto: {\n *     ciphertext: '76512156a34105fa6473ad040c666ae7b917d14c06543accc0d2dc28e6073b12',\n *     cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *     cipher: 'aes-128-ctr',\n *     kdf: 'pbkdf2',\n *     kdfparams: {\n *       dklen: 32,\n *       salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *       c: 262144,\n *       prf: 'hmac-sha256'\n *     },\n *   mac: '46eb4884e82dc43b5aa415faba53cc653b7038e9d61cc32fd643cf8c396189b7'\n *   }\n * }\n *```\n */\nexport const encrypt = async (\n\tprivateKey: Bytes,\n\tpassword: string | Uint8Array,\n\toptions?: CipherOptions,\n): Promise<KeyStore> => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n\n\t// if given salt or iv is a string, convert it to a Uint8Array\n\tlet salt;\n\tif (options?.salt) {\n\t\tsalt = typeof options.salt === 'string' ? hexToBytes(options.salt) : options.salt;\n\t} else {\n\t\tsalt = randomBytes(32);\n\t}\n\n\tif (!(isString(password) || password instanceof Uint8Array)) {\n\t\tthrow new InvalidPasswordError();\n\t}\n\n\tconst uint8ArrayPassword =\n\t\ttypeof password === 'string' ? hexToBytes(utf8ToHex(password)) : password;\n\n\tlet initializationVector;\n\tif (options?.iv) {\n\t\tinitializationVector = typeof options.iv === 'string' ? hexToBytes(options.iv) : options.iv;\n\t\tif (initializationVector.length !== 16) {\n\t\t\tthrow new IVLengthError();\n\t\t}\n\t} else {\n\t\tinitializationVector = randomBytes(16);\n\t}\n\n\tconst kdf = options?.kdf ?? 'scrypt';\n\n\tlet derivedKey;\n\tlet kdfparams: ScryptParams | PBKDF2SHA256Params;\n\n\t// derive key from key derivation function\n\tif (kdf === 'pbkdf2') {\n\t\tkdfparams = {\n\t\t\tdklen: options?.dklen ?? 32,\n\t\t\tsalt: bytesToHex(salt).replace('0x', ''),\n\t\t\tc: options?.c ?? 262144,\n\t\t\tprf: 'hmac-sha256',\n\t\t};\n\n\t\tif (kdfparams.c < 1000) {\n\t\t\t// error when c < 1000, pbkdf2 is less secure with less iterations\n\t\t\tthrow new PBKDF2IterationsError();\n\t\t}\n\t\tderivedKey = pbkdf2Sync(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, 'sha256');\n\t} else if (kdf === 'scrypt') {\n\t\tkdfparams = {\n\t\t\tn: options?.n ?? 8192,\n\t\t\tr: options?.r ?? 8,\n\t\t\tp: options?.p ?? 1,\n\t\t\tdklen: options?.dklen ?? 32,\n\t\t\tsalt: bytesToHex(salt).replace('0x', ''),\n\t\t};\n\t\tderivedKey = scryptSync(\n\t\t\tuint8ArrayPassword,\n\t\t\tsalt,\n\t\t\tkdfparams.n,\n\t\t\tkdfparams.p,\n\t\t\tkdfparams.r,\n\t\t\tkdfparams.dklen,\n\t\t);\n\t} else {\n\t\tthrow new InvalidKdfError();\n\t}\n\n\tconst cipher = await createCipheriv(\n\t\tprivateKeyUint8Array,\n\t\tderivedKey.slice(0, 16),\n\t\tinitializationVector,\n\t\t'aes-128-ctr',\n\t);\n\n\tconst ciphertext = bytesToHex(cipher).slice(2);\n\n\tconst mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), cipher)).replace('0x', '');\n\treturn {\n\t\tversion: 3,\n\t\tid: uuidV4(),\n\t\taddress: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace('0x', ''),\n\t\tcrypto: {\n\t\t\tciphertext,\n\t\t\tcipherparams: {\n\t\t\t\tiv: bytesToHex(initializationVector).replace('0x', ''),\n\t\t\t},\n\t\t\tcipher: 'aes-128-ctr',\n\t\t\tkdf,\n\t\t\tkdfparams,\n\t\t\tmac,\n\t\t},\n\t};\n};\n\n/**\n * Get an Account object from the privateKey\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns A Web3Account object\n *\n * The `Web3Account.signTransaction` is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.\n * Use {@link Web3.eth.accounts.signTransaction} instead.\n *\n * ```ts\n * privateKeyToAccount(\"0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709\");\n * >    {\n * \t\t\taddress: '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01',\n * \t\t\tprivateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n * \t\t\tsign,\n * \t\t\tsignTransaction,\n * \t\t\tencrypt,\n * \t}\n * ```\n */\nexport const privateKeyToAccount = (privateKey: Bytes, ignoreLength?: boolean): Web3Account => {\n\tconst privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);\n\n\treturn {\n\t\taddress: privateKeyToAddress(privateKeyUint8Array),\n\t\tprivateKey: bytesToHex(privateKeyUint8Array),\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tsignTransaction: (_tx: Transaction) => {\n\t\t\tthrow new TransactionSigningError('Do not have network access to sign the transaction');\n\t\t},\n\t\tsign: (data: Record<string, unknown> | string) =>\n\t\t\tsign(typeof data === 'string' ? data : JSON.stringify(data), privateKeyUint8Array),\n\t\tencrypt: async (password: string, options?: Record<string, unknown>) =>\n\t\t\tencrypt(privateKeyUint8Array, password, options),\n\t};\n};\n\n/**\n *\n * Generates and returns a Web3Account object that includes the private and public key\n * For creation of private key, it uses an audited package ethereum-cryptography/secp256k1\n * that is cryptographically secure random number with certain characteristics.\n * Read more: https://www.npmjs.com/package/ethereum-cryptography#secp256k1-curve\n *\n * @returns A Web3Account object\n * ```ts\n * web3.eth.accounts.create();\n * {\n * address: '0xbD504f977021b5E5DdccD8741A368b147B3B38bB',\n * privateKey: '0x964ced1c69ad27a311c432fdc0d8211e987595f7eb34ab405a5f16bdc9563ec5',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */\nexport const create = (): Web3Account => {\n\tconst privateKey = secp256k1.utils.randomPrivateKey();\n\n\treturn privateKeyToAccount(`${bytesToHex(privateKey)}`);\n};\n\n/**\n * Decrypts a v3 keystore JSON, and creates the account.\n *\n * @param keystore - the encrypted Keystore object or string to decrypt\n * @param password - The password that was used for encryption\n * @param nonStrict - if true and given a json string, the keystore will be parsed as lowercase.\n * @returns Returns the decrypted Web3Account object\n * Decrypting scrypt\n *\n * ```ts\n * decrypt({\n *   version: 3,\n *   id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n *   address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n *   crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *      cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *      cipher: 'aes-128-ctr',\n *      kdf: 'scrypt',\n *      kdfparams: {\n *        n: 8192,\n *        r: 8,\n *        p: 1,\n *        dklen: 32,\n *        salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *      },\n *      mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n *    }\n *   }, '123').then(console.log)\n * > {\n * address: '0xcdA9A91875fc35c8Ac1320E098e584495d66e47c',\n * privateKey: '67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */\nexport const decrypt = async (\n\tkeystore: KeyStore | string,\n\tpassword: string | Uint8Array,\n\tnonStrict?: boolean,\n): Promise<Web3Account> => {\n\tconst json =\n\t\ttypeof keystore === 'object'\n\t\t\t? keystore\n\t\t\t: (JSON.parse(nonStrict ? keystore.toLowerCase() : keystore) as KeyStore);\n\n\tvalidator.validateJSONSchema(keyStoreSchema, json);\n\n\tif (json.version !== 3) throw new KeyStoreVersionError();\n\n\tconst uint8ArrayPassword =\n\t\ttypeof password === 'string' ? hexToBytes(utf8ToHex(password)) : password;\n\n\tvalidator.validate(['bytes'], [uint8ArrayPassword]);\n\n\tlet derivedKey;\n\tif (json.crypto.kdf === 'scrypt') {\n\t\tconst kdfparams = json.crypto.kdfparams as ScryptParams;\n\t\tconst uint8ArraySalt =\n\t\t\ttypeof kdfparams.salt === 'string' ? hexToBytes(kdfparams.salt) : kdfparams.salt;\n\t\tderivedKey = scryptSync(\n\t\t\tuint8ArrayPassword,\n\t\t\tuint8ArraySalt,\n\t\t\tkdfparams.n,\n\t\t\tkdfparams.p,\n\t\t\tkdfparams.r,\n\t\t\tkdfparams.dklen,\n\t\t);\n\t} else if (json.crypto.kdf === 'pbkdf2') {\n\t\tconst kdfparams: PBKDF2SHA256Params = json.crypto.kdfparams as PBKDF2SHA256Params;\n\n\t\tconst uint8ArraySalt =\n\t\t\ttypeof kdfparams.salt === 'string' ? hexToBytes(kdfparams.salt) : kdfparams.salt;\n\n\t\tderivedKey = pbkdf2Sync(\n\t\t\tuint8ArrayPassword,\n\t\t\tuint8ArraySalt,\n\t\t\tkdfparams.c,\n\t\t\tkdfparams.dklen,\n\t\t\t'sha256',\n\t\t);\n\t} else {\n\t\tthrow new InvalidKdfError();\n\t}\n\n\tconst ciphertext = hexToBytes(json.crypto.ciphertext);\n\tconst mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), ciphertext)).replace('0x', '');\n\n\tif (mac !== json.crypto.mac) {\n\t\tthrow new KeyDerivationError();\n\t}\n\n\tconst seed = await createDecipheriv(\n\t\thexToBytes(json.crypto.ciphertext),\n\t\tderivedKey.slice(0, 16),\n\t\thexToBytes(json.crypto.cipherparams.iv),\n\t);\n\n\treturn privateKeyToAccount(seed);\n};\n"]},"metadata":{},"sourceType":"module"}