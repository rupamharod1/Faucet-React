{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { isAddress, isHexStrict, isHexString32Bytes, isNullish, isUInt } from 'web3-validator';\nimport { ChainMismatchError, HardforkMismatchError, ChainIdMismatchError, CommonOrChainAndHardforkError, Eip1559GasPriceError, InvalidGasOrGasPrice, InvalidMaxPriorityFeePerGasOrMaxFeePerGas, InvalidNonceOrChainIdError, InvalidTransactionCall, InvalidTransactionObjectError, InvalidTransactionWithSender, MissingChainOrHardforkError, MissingCustomChainError, MissingCustomChainIdError, MissingGasError, TransactionGasMismatchError, UnsupportedFeeMarketError } from 'web3-errors';\nimport { formatTransaction } from './utils/format_transaction.js';\nexport function isBaseTransaction(value) {\n  if (!isNullish(value.to) && !isAddress(value.to)) return false;\n  if (!isHexStrict(value.type) && !isNullish(value.type) && value.type.length !== 2) return false;\n  if (!isHexStrict(value.nonce)) return false;\n  if (!isHexStrict(value.gas)) return false;\n  if (!isHexStrict(value.value)) return false;\n  if (!isHexStrict(value.input)) return false;\n  if (value.chainId && !isHexStrict(value.chainId)) return false;\n  return true;\n}\nexport function isAccessListEntry(value) {\n  if (!isNullish(value.address) && !isAddress(value.address)) return false;\n  if (!isNullish(value.storageKeys) && !value.storageKeys.every(storageKey => isHexString32Bytes(storageKey))) return false;\n  return true;\n}\nexport function isAccessList(value) {\n  if (!Array.isArray(value) || !value.every(accessListEntry => isAccessListEntry(accessListEntry))) return false;\n  return true;\n}\nexport function isTransaction1559Unsigned(value) {\n  if (!isBaseTransaction(value)) return false;\n  if (!isHexStrict(value.maxFeePerGas)) return false;\n  if (!isHexStrict(value.maxPriorityFeePerGas)) return false;\n  if (!isAccessList(value.accessList)) return false;\n  return true;\n}\nexport function isTransaction2930Unsigned(value) {\n  if (!isBaseTransaction(value)) return false;\n  if (!isHexStrict(value.gasPrice)) return false;\n  if (!isAccessList(value.accessList)) return false;\n  return true;\n}\nexport function isTransactionLegacyUnsigned(value) {\n  if (!isBaseTransaction(value)) return false;\n  if (!isHexStrict(value.gasPrice)) return false;\n  return true;\n}\nexport function isTransactionWithSender(value) {\n  if (!isAddress(value.from)) return false;\n  if (!isBaseTransaction(value)) return false;\n  if (!isTransaction1559Unsigned(value) && !isTransaction2930Unsigned(value) && !isTransactionLegacyUnsigned(value)) return false;\n  return true;\n}\nexport function validateTransactionWithSender(value) {\n  if (!isTransactionWithSender(value)) throw new InvalidTransactionWithSender(value);\n}\nexport function isTransactionCall(value) {\n  if (!isNullish(value.from) && !isAddress(value.from)) return false;\n  if (!isAddress(value.to)) return false;\n  if (!isNullish(value.gas) && !isHexStrict(value.gas)) return false;\n  if (!isNullish(value.gasPrice) && !isHexStrict(value.gasPrice)) return false;\n  if (!isNullish(value.value) && !isHexStrict(value.value)) return false;\n  if (!isNullish(value.data) && !isHexStrict(value.data)) return false;\n  if (!isNullish(value.input) && !isHexStrict(value.input)) return false;\n  if (!isNullish(value.type)) return false;\n  if (isTransaction1559Unsigned(value)) return false;\n  if (isTransaction2930Unsigned(value)) return false;\n  return true;\n}\nexport function validateTransactionCall(value) {\n  if (!isTransactionCall(value)) throw new InvalidTransactionCall(value);\n}\nexport const validateCustomChainInfo = transaction => {\n  if (!isNullish(transaction.common)) {\n    if (isNullish(transaction.common.customChain)) throw new MissingCustomChainError();\n    if (isNullish(transaction.common.customChain.chainId)) throw new MissingCustomChainIdError();\n    if (!isNullish(transaction.chainId) && transaction.chainId !== transaction.common.customChain.chainId) throw new ChainIdMismatchError({\n      txChainId: transaction.chainId,\n      customChainId: transaction.common.customChain.chainId\n    });\n  }\n};\nexport const validateChainInfo = transaction => {\n  if (!isNullish(transaction.common) && !isNullish(transaction.chain) && !isNullish(transaction.hardfork)) {\n    throw new CommonOrChainAndHardforkError();\n  }\n\n  if (!isNullish(transaction.chain) && isNullish(transaction.hardfork) || !isNullish(transaction.hardfork) && isNullish(transaction.chain)) throw new MissingChainOrHardforkError({\n    chain: transaction.chain,\n    hardfork: transaction.hardfork\n  });\n};\nexport const validateBaseChain = transaction => {\n  if (!isNullish(transaction.common)) if (!isNullish(transaction.common.baseChain)) if (!isNullish(transaction.chain) && transaction.chain !== transaction.common.baseChain) {\n    throw new ChainMismatchError({\n      txChain: transaction.chain,\n      baseChain: transaction.common.baseChain\n    });\n  }\n};\nexport const validateHardfork = transaction => {\n  if (!isNullish(transaction.common)) if (!isNullish(transaction.common.hardfork)) if (!isNullish(transaction.hardfork) && transaction.hardfork !== transaction.common.hardfork) {\n    throw new HardforkMismatchError({\n      txHardfork: transaction.hardfork,\n      commonHardfork: transaction.common.hardfork\n    });\n  }\n};\nexport const validateLegacyGas = transaction => {\n  if ( // This check is verifying gas and gasPrice aren't less than 0.\n  isNullish(transaction.gas) || !isUInt(transaction.gas) || isNullish(transaction.gasPrice) || !isUInt(transaction.gasPrice)) throw new InvalidGasOrGasPrice({\n    gas: transaction.gas,\n    gasPrice: transaction.gasPrice\n  });\n  if (!isNullish(transaction.maxFeePerGas) || !isNullish(transaction.maxPriorityFeePerGas)) throw new UnsupportedFeeMarketError({\n    maxFeePerGas: transaction.maxFeePerGas,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n  });\n};\nexport const validateFeeMarketGas = transaction => {\n  // These errors come from 1.x, so they must be checked before\n  // InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error\n  // for the same code executing in 1.x\n  if (!isNullish(transaction.gasPrice) && transaction.type === '0x2') throw new Eip1559GasPriceError(transaction.gasPrice);\n  if (transaction.type === '0x0' || transaction.type === '0x1') throw new UnsupportedFeeMarketError({\n    maxFeePerGas: transaction.maxFeePerGas,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n  });\n  if (isNullish(transaction.maxFeePerGas) || !isUInt(transaction.maxFeePerGas) || isNullish(transaction.maxPriorityFeePerGas) || !isUInt(transaction.maxPriorityFeePerGas)) throw new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  });\n};\n/**\n * This method checks if all required gas properties are present for either\n * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)\n */\n\nexport const validateGas = transaction => {\n  const gasPresent = !isNullish(transaction.gas) || !isNullish(transaction.gasLimit);\n  const legacyGasPresent = gasPresent && !isNullish(transaction.gasPrice);\n  const feeMarketGasPresent = gasPresent && !isNullish(transaction.maxPriorityFeePerGas) && !isNullish(transaction.maxFeePerGas);\n  if (!legacyGasPresent && !feeMarketGasPresent) throw new MissingGasError({\n    gas: transaction.gas,\n    gasPrice: transaction.gasPrice,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  });\n  if (legacyGasPresent && feeMarketGasPresent) throw new TransactionGasMismatchError({\n    gas: transaction.gas,\n    gasPrice: transaction.gasPrice,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  });\n  (legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);\n  (!isNullish(transaction.type) && transaction.type > '0x1' ? validateFeeMarketGas : validateLegacyGas)(transaction);\n};\nexport const validateTransactionForSigning = (transaction, overrideMethod) => {\n  if (!isNullish(overrideMethod)) {\n    overrideMethod(transaction);\n    return;\n  }\n\n  if (typeof transaction !== 'object' || isNullish(transaction)) throw new InvalidTransactionObjectError(transaction);\n  validateCustomChainInfo(transaction);\n  validateChainInfo(transaction);\n  validateBaseChain(transaction);\n  validateHardfork(transaction);\n  const formattedTransaction = formatTransaction(transaction, ETH_DATA_FORMAT);\n  validateGas(formattedTransaction);\n  if (isNullish(formattedTransaction.nonce) || isNullish(formattedTransaction.chainId) || formattedTransaction.nonce.startsWith('-') || formattedTransaction.chainId.startsWith('-')) throw new InvalidNonceOrChainIdError({\n    nonce: transaction.nonce,\n    chainId: transaction.chainId\n  });\n};","map":{"version":3,"mappings":"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","names":["ETH_DATA_FORMAT","isAddress","isHexStrict","isHexString32Bytes","isNullish","isUInt","ChainMismatchError","HardforkMismatchError","ChainIdMismatchError","CommonOrChainAndHardforkError","Eip1559GasPriceError","InvalidGasOrGasPrice","InvalidMaxPriorityFeePerGasOrMaxFeePerGas","InvalidNonceOrChainIdError","InvalidTransactionCall","InvalidTransactionObjectError","InvalidTransactionWithSender","MissingChainOrHardforkError","MissingCustomChainError","MissingCustomChainIdError","MissingGasError","TransactionGasMismatchError","UnsupportedFeeMarketError","formatTransaction","isBaseTransaction","value","to","type","length","nonce","gas","input","chainId","isAccessListEntry","address","storageKeys","every","storageKey","isAccessList","Array","isArray","accessListEntry","isTransaction1559Unsigned","maxFeePerGas","maxPriorityFeePerGas","accessList","isTransaction2930Unsigned","gasPrice","isTransactionLegacyUnsigned","isTransactionWithSender","from","validateTransactionWithSender","isTransactionCall","data","validateTransactionCall","validateCustomChainInfo","transaction","common","customChain","txChainId","customChainId","validateChainInfo","chain","hardfork","validateBaseChain","baseChain","txChain","validateHardfork","txHardfork","commonHardfork","validateLegacyGas","validateFeeMarketGas","validateGas","gasPresent","gasLimit","legacyGasPresent","feeMarketGasPresent","validateTransactionForSigning","overrideMethod","formattedTransaction","startsWith"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/validation.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tAccessList,\n\tAccessListEntry,\n\tBaseTransactionAPI,\n\tTransaction1559UnsignedAPI,\n\tTransaction2930UnsignedAPI,\n\tTransactionCall,\n\tTransactionLegacyUnsignedAPI,\n\tTransaction,\n\tTransactionWithSenderAPI,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { isAddress, isHexStrict, isHexString32Bytes, isNullish, isUInt } from 'web3-validator';\nimport {\n\tChainMismatchError,\n\tHardforkMismatchError,\n\tChainIdMismatchError,\n\tCommonOrChainAndHardforkError,\n\tEip1559GasPriceError,\n\tInvalidGasOrGasPrice,\n\tInvalidMaxPriorityFeePerGasOrMaxFeePerGas,\n\tInvalidNonceOrChainIdError,\n\tInvalidTransactionCall,\n\tInvalidTransactionObjectError,\n\tInvalidTransactionWithSender,\n\tMissingChainOrHardforkError,\n\tMissingCustomChainError,\n\tMissingCustomChainIdError,\n\tMissingGasError,\n\tTransactionGasMismatchError,\n\tUnsupportedFeeMarketError,\n} from 'web3-errors';\nimport { formatTransaction } from './utils/format_transaction.js';\nimport { InternalTransaction } from './types.js';\n\nexport function isBaseTransaction(value: BaseTransactionAPI): boolean {\n\tif (!isNullish(value.to) && !isAddress(value.to)) return false;\n\tif (!isHexStrict(value.type) && !isNullish(value.type) && value.type.length !== 2) return false;\n\tif (!isHexStrict(value.nonce)) return false;\n\tif (!isHexStrict(value.gas)) return false;\n\tif (!isHexStrict(value.value)) return false;\n\tif (!isHexStrict(value.input)) return false;\n\tif (value.chainId && !isHexStrict(value.chainId)) return false;\n\n\treturn true;\n}\n\nexport function isAccessListEntry(value: AccessListEntry): boolean {\n\tif (!isNullish(value.address) && !isAddress(value.address)) return false;\n\tif (\n\t\t!isNullish(value.storageKeys) &&\n\t\t!value.storageKeys.every(storageKey => isHexString32Bytes(storageKey))\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function isAccessList(value: AccessList): boolean {\n\tif (\n\t\t!Array.isArray(value) ||\n\t\t!value.every(accessListEntry => isAccessListEntry(accessListEntry))\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function isTransaction1559Unsigned(value: Transaction1559UnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.maxFeePerGas)) return false;\n\tif (!isHexStrict(value.maxPriorityFeePerGas)) return false;\n\tif (!isAccessList(value.accessList)) return false;\n\n\treturn true;\n}\n\nexport function isTransaction2930Unsigned(value: Transaction2930UnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.gasPrice)) return false;\n\tif (!isAccessList(value.accessList)) return false;\n\n\treturn true;\n}\n\nexport function isTransactionLegacyUnsigned(value: TransactionLegacyUnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.gasPrice)) return false;\n\n\treturn true;\n}\n\nexport function isTransactionWithSender(value: TransactionWithSenderAPI): boolean {\n\tif (!isAddress(value.from)) return false;\n\tif (!isBaseTransaction(value)) return false;\n\tif (\n\t\t!isTransaction1559Unsigned(value as Transaction1559UnsignedAPI) &&\n\t\t!isTransaction2930Unsigned(value as Transaction2930UnsignedAPI) &&\n\t\t!isTransactionLegacyUnsigned(value as TransactionLegacyUnsignedAPI)\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function validateTransactionWithSender(value: TransactionWithSenderAPI) {\n\tif (!isTransactionWithSender(value)) throw new InvalidTransactionWithSender(value);\n}\n\nexport function isTransactionCall(value: TransactionCall): boolean {\n\tif (!isNullish(value.from) && !isAddress(value.from)) return false;\n\tif (!isAddress(value.to)) return false;\n\tif (!isNullish(value.gas) && !isHexStrict(value.gas)) return false;\n\tif (!isNullish(value.gasPrice) && !isHexStrict(value.gasPrice)) return false;\n\tif (!isNullish(value.value) && !isHexStrict(value.value)) return false;\n\tif (!isNullish(value.data) && !isHexStrict(value.data)) return false;\n\tif (!isNullish(value.input) && !isHexStrict(value.input)) return false;\n\tif (!isNullish(value.type)) return false;\n\tif (isTransaction1559Unsigned(value as Transaction1559UnsignedAPI)) return false;\n\tif (isTransaction2930Unsigned(value as Transaction2930UnsignedAPI)) return false;\n\n\treturn true;\n}\n\nexport function validateTransactionCall(value: TransactionCall) {\n\tif (!isTransactionCall(value)) throw new InvalidTransactionCall(value);\n}\n\nexport const validateCustomChainInfo = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common)) {\n\t\tif (isNullish(transaction.common.customChain)) throw new MissingCustomChainError();\n\t\tif (isNullish(transaction.common.customChain.chainId))\n\t\t\tthrow new MissingCustomChainIdError();\n\t\tif (\n\t\t\t!isNullish(transaction.chainId) &&\n\t\t\ttransaction.chainId !== transaction.common.customChain.chainId\n\t\t)\n\t\t\tthrow new ChainIdMismatchError({\n\t\t\t\ttxChainId: transaction.chainId,\n\t\t\t\tcustomChainId: transaction.common.customChain.chainId,\n\t\t\t});\n\t}\n};\nexport const validateChainInfo = (transaction: InternalTransaction) => {\n\tif (\n\t\t!isNullish(transaction.common) &&\n\t\t!isNullish(transaction.chain) &&\n\t\t!isNullish(transaction.hardfork)\n\t) {\n\t\tthrow new CommonOrChainAndHardforkError();\n\t}\n\tif (\n\t\t(!isNullish(transaction.chain) && isNullish(transaction.hardfork)) ||\n\t\t(!isNullish(transaction.hardfork) && isNullish(transaction.chain))\n\t)\n\t\tthrow new MissingChainOrHardforkError({\n\t\t\tchain: transaction.chain,\n\t\t\thardfork: transaction.hardfork,\n\t\t});\n};\nexport const validateBaseChain = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common))\n\t\tif (!isNullish(transaction.common.baseChain))\n\t\t\tif (\n\t\t\t\t!isNullish(transaction.chain) &&\n\t\t\t\ttransaction.chain !== transaction.common.baseChain\n\t\t\t) {\n\t\t\t\tthrow new ChainMismatchError({\n\t\t\t\t\ttxChain: transaction.chain,\n\t\t\t\t\tbaseChain: transaction.common.baseChain,\n\t\t\t\t});\n\t\t\t}\n};\nexport const validateHardfork = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common))\n\t\tif (!isNullish(transaction.common.hardfork))\n\t\t\tif (\n\t\t\t\t!isNullish(transaction.hardfork) &&\n\t\t\t\ttransaction.hardfork !== transaction.common.hardfork\n\t\t\t) {\n\t\t\t\tthrow new HardforkMismatchError({\n\t\t\t\t\ttxHardfork: transaction.hardfork,\n\t\t\t\t\tcommonHardfork: transaction.common.hardfork,\n\t\t\t\t});\n\t\t\t}\n};\n\nexport const validateLegacyGas = (transaction: InternalTransaction) => {\n\tif (\n\t\t// This check is verifying gas and gasPrice aren't less than 0.\n\t\tisNullish(transaction.gas) ||\n\t\t!isUInt(transaction.gas) ||\n\t\tisNullish(transaction.gasPrice) ||\n\t\t!isUInt(transaction.gasPrice)\n\t)\n\t\tthrow new InvalidGasOrGasPrice({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t});\n\tif (!isNullish(transaction.maxFeePerGas) || !isNullish(transaction.maxPriorityFeePerGas))\n\t\tthrow new UnsupportedFeeMarketError({\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t});\n};\n\nexport const validateFeeMarketGas = (transaction: InternalTransaction) => {\n\t// These errors come from 1.x, so they must be checked before\n\t// InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error\n\t// for the same code executing in 1.x\n\tif (!isNullish(transaction.gasPrice) && transaction.type === '0x2')\n\t\tthrow new Eip1559GasPriceError(transaction.gasPrice);\n\tif (transaction.type === '0x0' || transaction.type === '0x1')\n\t\tthrow new UnsupportedFeeMarketError({\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t});\n\n\tif (\n\t\tisNullish(transaction.maxFeePerGas) ||\n\t\t!isUInt(transaction.maxFeePerGas) ||\n\t\tisNullish(transaction.maxPriorityFeePerGas) ||\n\t\t!isUInt(transaction.maxPriorityFeePerGas)\n\t)\n\t\tthrow new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n};\n\n/**\n * This method checks if all required gas properties are present for either\n * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)\n */\nexport const validateGas = (transaction: InternalTransaction) => {\n\tconst gasPresent = !isNullish(transaction.gas) || !isNullish(transaction.gasLimit);\n\tconst legacyGasPresent = gasPresent && !isNullish(transaction.gasPrice);\n\tconst feeMarketGasPresent =\n\t\tgasPresent &&\n\t\t!isNullish(transaction.maxPriorityFeePerGas) &&\n\t\t!isNullish(transaction.maxFeePerGas);\n\n\tif (!legacyGasPresent && !feeMarketGasPresent)\n\t\tthrow new MissingGasError({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n\n\tif (legacyGasPresent && feeMarketGasPresent)\n\t\tthrow new TransactionGasMismatchError({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n\n\t(legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);\n\t(!isNullish(transaction.type) && transaction.type > '0x1'\n\t\t? validateFeeMarketGas\n\t\t: validateLegacyGas)(transaction);\n};\n\nexport const validateTransactionForSigning = (\n\ttransaction: InternalTransaction,\n\toverrideMethod?: (transaction: InternalTransaction) => void,\n) => {\n\tif (!isNullish(overrideMethod)) {\n\t\toverrideMethod(transaction);\n\t\treturn;\n\t}\n\n\tif (typeof transaction !== 'object' || isNullish(transaction))\n\t\tthrow new InvalidTransactionObjectError(transaction);\n\n\tvalidateCustomChainInfo(transaction);\n\tvalidateChainInfo(transaction);\n\tvalidateBaseChain(transaction);\n\tvalidateHardfork(transaction);\n\n\tconst formattedTransaction = formatTransaction(transaction as Transaction, ETH_DATA_FORMAT);\n\tvalidateGas(formattedTransaction);\n\n\tif (\n\t\tisNullish(formattedTransaction.nonce) ||\n\t\tisNullish(formattedTransaction.chainId) ||\n\t\tformattedTransaction.nonce.startsWith('-') ||\n\t\tformattedTransaction.chainId.startsWith('-')\n\t)\n\t\tthrow new InvalidNonceOrChainIdError({\n\t\t\tnonce: transaction.nonce,\n\t\t\tchainId: transaction.chainId,\n\t\t});\n};\n"]},"metadata":{},"sourceType":"module"}