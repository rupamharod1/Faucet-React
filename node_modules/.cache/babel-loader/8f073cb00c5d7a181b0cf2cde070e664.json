{"ast":null,"code":"\"use strict\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transactionBuilder = exports.defaultTransactionBuilder = exports.getTransactionType = exports.getTransactionNonce = exports.getTransactionFromOrToAttr = void 0;\n\nconst web3_types_1 = require(\"web3-types\");\n\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\n\nconst web3_net_1 = require(\"web3-net\");\n\nconst web3_validator_1 = require(\"web3-validator\");\n\nconst web3_errors_1 = require(\"web3-errors\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst constants_js_1 = require(\"../constants.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst rpc_method_wrappers_js_1 = require(\"../rpc_method_wrappers.js\");\n\nconst detect_transaction_type_js_1 = require(\"./detect_transaction_type.js\");\n\nconst schemas_js_1 = require(\"../schemas.js\"); // eslint-disable-next-line import/no-cycle\n\n\nconst get_transaction_gas_pricing_js_1 = require(\"./get_transaction_gas_pricing.js\");\n\nconst getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {\n  if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n    if (typeof transaction[attr] === 'string' && (0, web3_validator_1.isAddress)(transaction[attr])) {\n      return transaction[attr];\n    }\n\n    if (!(0, web3_validator_1.isHexStrict)(transaction[attr]) && (0, web3_validator_1.isNumber)(transaction[attr])) {\n      if (web3Context.wallet) {\n        const account = web3Context.wallet.get((0, web3_utils_1.format)({\n          format: 'uint'\n        }, transaction[attr], constants_js_1.NUMBER_DATA_FORMAT));\n\n        if (!(0, web3_validator_1.isNullish)(account)) {\n          return account.address;\n        }\n\n        throw new web3_errors_1.LocalWalletNotAvailableError();\n      }\n\n      throw new web3_errors_1.LocalWalletNotAvailableError();\n    } else {\n      throw attr === 'from' ? new web3_errors_1.InvalidTransactionWithSender(transaction.from) : // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      new web3_errors_1.InvalidTransactionWithReceiver(transaction.to);\n    }\n  }\n\n  if (attr === 'from') {\n    if (!(0, web3_validator_1.isNullish)(privateKey)) return (0, web3_eth_accounts_1.privateKeyToAddress)(privateKey);\n    if (!(0, web3_validator_1.isNullish)(web3Context.defaultAccount)) return web3Context.defaultAccount;\n  }\n\n  return undefined;\n};\n\nexports.getTransactionFromOrToAttr = getTransactionFromOrToAttr;\n\nconst getTransactionNonce = function (web3Context, address) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3_types_1.DEFAULT_RETURN_FORMAT;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    if ((0, web3_validator_1.isNullish)(address)) {\n      // TODO if (web3.eth.accounts.wallet) use address from local wallet\n      throw new web3_errors_1.UnableToPopulateNonceError();\n    }\n\n    return (0, rpc_method_wrappers_js_1.getTransactionCount)(web3Context, address, web3Context.defaultBlock, returnFormat);\n  });\n};\n\nexports.getTransactionNonce = getTransactionNonce;\n\nconst getTransactionType = (transaction, web3Context) => {\n  const inferredType = (0, detect_transaction_type_js_1.detectTransactionType)(transaction, web3Context);\n  if (!(0, web3_validator_1.isNullish)(inferredType)) return inferredType;\n  if (!(0, web3_validator_1.isNullish)(web3Context.defaultTransactionType)) return (0, web3_utils_1.format)({\n    format: 'uint'\n  }, web3Context.defaultTransactionType, web3_types_1.ETH_DATA_FORMAT);\n  return undefined;\n};\n\nexports.getTransactionType = getTransactionType; // Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\n\nfunction defaultTransactionBuilder(options) {\n  var _a, _b;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    let populatedTransaction = (0, web3_utils_1.format)(schemas_js_1.transactionSchema, options.transaction, web3_types_1.DEFAULT_RETURN_FORMAT);\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.from)) {\n      populatedTransaction.from = (0, exports.getTransactionFromOrToAttr)('from', options.web3Context, undefined, options.privateKey);\n    } // TODO: Debug why need to typecase getTransactionNonce\n\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.nonce)) {\n      populatedTransaction.nonce = yield (0, exports.getTransactionNonce)(options.web3Context, populatedTransaction.from, web3_types_1.ETH_DATA_FORMAT);\n    }\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.value)) {\n      populatedTransaction.value = '0x0';\n    }\n\n    if (!(0, web3_validator_1.isNullish)(populatedTransaction.data)) {\n      if (!(0, web3_validator_1.isNullish)(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new web3_errors_1.TransactionDataAndInputError({\n        data: (0, web3_utils_1.bytesToHex)(populatedTransaction.data),\n        input: (0, web3_utils_1.bytesToHex)(populatedTransaction.input)\n      });\n      if (!populatedTransaction.data.startsWith('0x')) populatedTransaction.data = `0x${populatedTransaction.data}`;\n    } else if (!(0, web3_validator_1.isNullish)(populatedTransaction.input)) {\n      if (!populatedTransaction.input.startsWith('0x')) populatedTransaction.input = `0x${populatedTransaction.input}`;\n    } else {\n      populatedTransaction.input = '0x';\n    }\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.common)) {\n      if (options.web3Context.defaultCommon) {\n        const common = options.web3Context.defaultCommon;\n        const chainId = common.customChain.chainId;\n        const networkId = common.customChain.networkId;\n        const name = common.customChain.name;\n        populatedTransaction.common = Object.assign(Object.assign({}, common), {\n          customChain: {\n            chainId,\n            networkId,\n            name\n          }\n        });\n      }\n\n      if ((0, web3_validator_1.isNullish)(populatedTransaction.chain)) {\n        populatedTransaction.chain = options.web3Context.defaultChain;\n      }\n\n      if ((0, web3_validator_1.isNullish)(populatedTransaction.hardfork)) {\n        populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n      }\n    }\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.chainId) && (0, web3_validator_1.isNullish)((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {\n      populatedTransaction.chainId = yield (0, rpc_method_wrappers_js_1.getChainId)(options.web3Context, web3_types_1.ETH_DATA_FORMAT);\n    }\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.networkId)) {\n      populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield (0, web3_net_1.getId)(options.web3Context, web3_types_1.ETH_DATA_FORMAT);\n    }\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.gasLimit) && !(0, web3_validator_1.isNullish)(populatedTransaction.gas)) {\n      populatedTransaction.gasLimit = populatedTransaction.gas;\n    }\n\n    populatedTransaction.type = (0, exports.getTransactionType)(populatedTransaction, options.web3Context);\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.accessList) && (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n      populatedTransaction.accessList = [];\n    }\n\n    if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield (0, get_transaction_gas_pricing_js_1.getTransactionGasPricing)(populatedTransaction, options.web3Context, web3_types_1.ETH_DATA_FORMAT));\n\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.gas) && (0, web3_validator_1.isNullish)(populatedTransaction.gasLimit) && options.fillGasLimit) {\n      const fillGasLimit = yield (0, rpc_method_wrappers_js_1.estimateGas)(options.web3Context, populatedTransaction, 'latest', web3_types_1.ETH_DATA_FORMAT);\n      populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), {\n        gas: (0, web3_utils_1.format)({\n          format: 'uint'\n        }, fillGasLimit, web3_types_1.ETH_DATA_FORMAT)\n      });\n    }\n\n    return populatedTransaction;\n  });\n}\n\nexports.defaultTransactionBuilder = defaultTransactionBuilder;\n\nconst transactionBuilder = options => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n\n  return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {\n    transaction: options.transaction\n  }));\n});\n\nexports.transactionBuilder = transactionBuilder;","map":{"version":3,"mappings":"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","names":["getTransactionFromOrToAttr","attr","web3Context","transaction","privateKey","undefined","wallet","account","get","format","constants_js_1","address","web3_errors_1","from","to","defaultAccount","exports","getTransactionNonce","returnFormat","web3_types_1","__awaiter","defaultBlock","getTransactionType","inferredType","defaultTransactionType","defaultTransactionBuilder","options","populatedTransaction","schemas_js_1","nonce","value","data","input","startsWith","common","defaultCommon","chainId","customChain","networkId","name","Object","chain","defaultChain","hardfork","defaultHardfork","_a","defaultNetworkId","_b","gasLimit","gas","type","accessList","fillGasPrice","fillGasLimit","transactionBuilder"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/web3-eth/src/utils/transaction_builder.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tAddress,\n\tHexString,\n\tValidChains,\n\tHardfork,\n\tTransaction,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tCommon,\n\tWeb3NetAPI,\n\tNumbers,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport {\n\tInvalidTransactionWithSender,\n\tInvalidTransactionWithReceiver,\n\tLocalWalletNotAvailableError,\n\tTransactionDataAndInputError,\n\tUnableToPopulateNonceError,\n} from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n\nexport const getTransactionFromOrToAttr = (\n\tattr: 'from' | 'to',\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction?:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\tprivateKey?: HexString | Uint8Array,\n): Address | undefined => {\n\tif (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n\t\tif (typeof transaction[attr] === 'string' && isAddress(transaction[attr] as string)) {\n\t\t\treturn transaction[attr] as Address;\n\t\t}\n\t\tif (!isHexStrict(transaction[attr] as string) && isNumber(transaction[attr] as Numbers)) {\n\t\t\tif (web3Context.wallet) {\n\t\t\t\tconst account = web3Context.wallet.get(\n\t\t\t\t\tformat({ format: 'uint' }, transaction[attr] as Numbers, NUMBER_DATA_FORMAT),\n\t\t\t\t);\n\n\t\t\t\tif (!isNullish(account)) {\n\t\t\t\t\treturn account.address;\n\t\t\t\t}\n\n\t\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t\t}\n\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t} else {\n\t\t\tthrow attr === 'from'\n\t\t\t\t? new InvalidTransactionWithSender(transaction.from)\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t  new InvalidTransactionWithReceiver(transaction.to);\n\t\t}\n\t}\n\tif (attr === 'from') {\n\t\tif (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n\t\tif (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n\t}\n\n\treturn undefined;\n};\n\nexport const getTransactionNonce = async <ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress?: Address,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n) => {\n\tif (isNullish(address)) {\n\t\t// TODO if (web3.eth.accounts.wallet) use address from local wallet\n\t\tthrow new UnableToPopulateNonceError();\n\t}\n\n\treturn getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n};\n\nexport const getTransactionType = (\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst inferredType = detectTransactionType(transaction, web3Context);\n\tif (!isNullish(inferredType)) return inferredType;\n\tif (!isNullish(web3Context.defaultTransactionType))\n\t\treturn format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n\n\treturn undefined;\n};\n\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport async function defaultTransactionBuilder<ReturnType = Transaction>(options: {\n\ttransaction: Transaction;\n\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\tprivateKey?: HexString | Uint8Array;\n\tfillGasPrice?: boolean;\n\tfillGasLimit?: boolean;\n}): Promise<ReturnType> {\n\tlet populatedTransaction = format(\n\t\ttransactionSchema,\n\t\toptions.transaction,\n\t\tDEFAULT_RETURN_FORMAT,\n\t) as InternalTransaction;\n\n\tif (isNullish(populatedTransaction.from)) {\n\t\tpopulatedTransaction.from = getTransactionFromOrToAttr(\n\t\t\t'from',\n\t\t\toptions.web3Context,\n\t\t\tundefined,\n\t\t\toptions.privateKey,\n\t\t);\n\t}\n\n\t// TODO: Debug why need to typecase getTransactionNonce\n\tif (isNullish(populatedTransaction.nonce)) {\n\t\tpopulatedTransaction.nonce = await getTransactionNonce(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction.from,\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t}\n\n\tif (isNullish(populatedTransaction.value)) {\n\t\tpopulatedTransaction.value = '0x0';\n\t}\n\n\tif (!isNullish(populatedTransaction.data)) {\n\t\tif (\n\t\t\t!isNullish(populatedTransaction.input) &&\n\t\t\tpopulatedTransaction.data !== populatedTransaction.input\n\t\t)\n\t\t\tthrow new TransactionDataAndInputError({\n\t\t\t\tdata: bytesToHex(populatedTransaction.data),\n\t\t\t\tinput: bytesToHex(populatedTransaction.input),\n\t\t\t});\n\n\t\tif (!populatedTransaction.data.startsWith('0x'))\n\t\t\tpopulatedTransaction.data = `0x${populatedTransaction.data}`;\n\t} else if (!isNullish(populatedTransaction.input)) {\n\t\tif (!populatedTransaction.input.startsWith('0x'))\n\t\t\tpopulatedTransaction.input = `0x${populatedTransaction.input}`;\n\t} else {\n\t\tpopulatedTransaction.input = '0x';\n\t}\n\n\tif (isNullish(populatedTransaction.common)) {\n\t\tif (options.web3Context.defaultCommon) {\n\t\t\tconst common = options.web3Context.defaultCommon as unknown as Common;\n\t\t\tconst chainId = common.customChain.chainId as string;\n\t\t\tconst networkId = common.customChain.networkId as string;\n\t\t\tconst name = common.customChain.name as string;\n\t\t\tpopulatedTransaction.common = {\n\t\t\t\t...common,\n\t\t\t\tcustomChain: { chainId, networkId, name },\n\t\t\t};\n\t\t}\n\n\t\tif (isNullish(populatedTransaction.chain)) {\n\t\t\tpopulatedTransaction.chain = options.web3Context.defaultChain as ValidChains;\n\t\t}\n\t\tif (isNullish(populatedTransaction.hardfork)) {\n\t\t\tpopulatedTransaction.hardfork = options.web3Context.defaultHardfork as Hardfork;\n\t\t}\n\t}\n\n\tif (\n\t\tisNullish(populatedTransaction.chainId) &&\n\t\tisNullish(populatedTransaction.common?.customChain.chainId)\n\t) {\n\t\tpopulatedTransaction.chainId = await getChainId(options.web3Context, ETH_DATA_FORMAT);\n\t}\n\n\tif (isNullish(populatedTransaction.networkId)) {\n\t\tpopulatedTransaction.networkId =\n\t\t\t(options.web3Context.defaultNetworkId as string) ??\n\t\t\t(await getId(options.web3Context, ETH_DATA_FORMAT));\n\t}\n\n\tif (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n\t\tpopulatedTransaction.gasLimit = populatedTransaction.gas;\n\t}\n\n\tpopulatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n\tif (\n\t\tisNullish(populatedTransaction.accessList) &&\n\t\t(populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')\n\t) {\n\t\tpopulatedTransaction.accessList = [];\n\t}\n\tif (options.fillGasPrice)\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\t...(await getTransactionGasPricing(\n\t\t\t\tpopulatedTransaction,\n\t\t\t\toptions.web3Context,\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t)),\n\t\t};\n\tif (\n\t\tisNullish(populatedTransaction.gas) &&\n\t\tisNullish(populatedTransaction.gasLimit) &&\n\t\toptions.fillGasLimit\n\t) {\n\t\tconst fillGasLimit = await estimateGas(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction,\n\t\t\t'latest',\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\tgas: format({ format: 'uint' }, fillGasLimit as Numbers, ETH_DATA_FORMAT),\n\t\t};\n\t}\n\treturn populatedTransaction as ReturnType;\n}\n\nexport const transactionBuilder = async <ReturnType = Transaction>(\n\toptions: {\n\t\ttransaction: Transaction;\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\tprivateKey?: HexString | Uint8Array;\n\t\tfillGasPrice?: boolean;\n\t\tfillGasLimit?: boolean;\n\t},\n\t// eslint-disable-next-line @typescript-eslint/require-await\n) =>\n\t(options.web3Context.transactionBuilder ?? defaultTransactionBuilder)({\n\t\t...options,\n\t\ttransaction: options.transaction,\n\t}) as unknown as ReturnType;\n"]},"metadata":{},"sourceType":"script"}