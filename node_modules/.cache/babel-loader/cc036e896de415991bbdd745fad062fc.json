{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\nconst utils_js_1 = require(\"./utils.js\"); // prettier-ignore\n\n\nconst _0n = BigInt(0),\n      _1n = BigInt(1),\n      _2n = BigInt(2),\n      _3n = BigInt(3); // prettier-ignore\n\n\nconst _4n = BigInt(4),\n      _5n = BigInt(5),\n      _8n = BigInt(8); // prettier-ignore\n\n\nconst _9n = BigInt(9),\n      _16n = BigInt(16); // Calculates a modulo b\n\n\nfunction mod(a, b) {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n\nexports.mod = mod;\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\n\nfunction pow(num, power, modulo) {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n\n  while (power > _0n) {\n    if (power & _1n) res = res * num % modulo;\n    num = num * num % modulo;\n    power >>= _1n;\n  }\n\n  return res;\n}\n\nexports.pow = pow; // Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\n\nfunction pow2(x, power, modulo) {\n  let res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n\n  return res;\n}\n\nexports.pow2 = pow2; // Inverses number over modulo\n\nfunction invert(number, modulo) {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  } // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n\n\n  let a = mod(number, modulo);\n  let b = modulo; // prettier-ignore\n\n  let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q; // prettier-ignore\n\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nexports.invert = invert; // Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\n\nfunction tonelliShanks(P) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n  let Q, S, Z; // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++); // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n\n\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++); // Fast-path\n\n\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast(Fp, n) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  } // Slow-path\n\n\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow(Fp, n) {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S; // TODO: will fail at Fp2/etc\n\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n\n      let m = 1;\n\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      } // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n\n\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n\n      g = Fp.sqr(ge); // g = ge * ge\n\n      x = Fp.mul(x, ge); // x *= ge\n\n      b = Fp.mul(b, g); // b *= g\n\n      r = m;\n    }\n\n    return x;\n  };\n}\n\nexports.tonelliShanks = tonelliShanks;\n\nfunction FpSqrt(P) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4(Fp, n) {\n      const root = Fp.pow(n, p1div4); // Throw if root**2 != n\n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  } // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n\n\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8(Fp, n) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  } // P ≡ 9 (mod 16)\n\n\n  if (P % _16n === _9n) {// NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  } // Other cases: Tonelli-Shanks algorithm\n\n\n  return tonelliShanks(P);\n}\n\nexports.FpSqrt = FpSqrt; // Little-endian check for first LE bit (last BE bit);\n\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n\nexports.isNegativeLE = isNegativeLE; // prettier-ignore\n\nconst FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\n\nfunction validateField(field) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger'\n  };\n  const opts = FIELD_FIELDS.reduce((map, val) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return (0, utils_js_1.validateObject)(field, opts);\n}\n\nexports.validateField = validateField; // Generic field functions\n\nfunction FpPow(f, num, power) {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n\n  return p;\n}\n\nexports.FpPow = FpPow; // 0 is non-invertible: non-batched version will throw on 0\n\nfunction FpInvertBatch(f, nums) {\n  const tmp = new Array(nums.length); // Walk from first to last, multiply them by each other MOD p\n\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE); // Invert last element\n\n  const inverted = f.inv(lastMultiplied); // Walk from last to first, multiply them by inverted each other MOD p\n\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexports.FpInvertBatch = FpInvertBatch;\n\nfunction FpDiv(f, lhs, rhs) {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\nexports.FpDiv = FpDiv; // This function returns True whenever the value x is a square in the field F.\n\nfunction FpIsSquare(f) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n\n  return x => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\nexports.FpIsSquare = FpIsSquare; // CURVE.n lengths\n\nfunction nLength(n, nBitLength) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return {\n    nBitLength: _nBitLength,\n    nByteLength\n  };\n}\n\nexports.nLength = nLength;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\n\nfunction Field(ORDER, bitLen) {\n  let isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let redef = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const {\n    nBitLength: BITS,\n    nByteLength: BYTES\n  } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: (0, utils_js_1.bitMask)(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: num => mod(num, ORDER),\n    isValid: num => {\n      if (typeof num !== 'bigint') throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: num => num === _0n,\n    isOdd: num => (num & _1n) === _1n,\n    neg: num => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n    sqr: num => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n    // Same as above, but doesn't normalize\n    sqrN: num => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n    inv: num => invert(num, ORDER),\n    sqrt: redef.sqrt || (n => sqrtP(f, n)),\n    invertBatch: lst => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => c ? b : a,\n    toBytes: num => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),\n    fromBytes: bytes => {\n      if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);\n    }\n  });\n  return Object.freeze(f);\n}\n\nexports.Field = Field;\n\nfunction FpSqrtOdd(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexports.FpSqrtOdd = FpSqrtOdd;\n\nfunction FpSqrtEven(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\nexports.FpSqrtEven = FpSqrtEven;\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\n\nfunction hashToPrivateScalar(hash, groupOrder) {\n  let isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  hash = (0, utils_js_1.ensureBytes)('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\nexports.hashToPrivateScalar = hashToPrivateScalar;","map":{"version":3,"mappings":"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","names":["_0n","BigInt","_1n","_2n","_3n","_4n","_5n","_8n","_9n","_16n","mod","a","b","result","exports","pow","num","power","modulo","Error","res","pow2","x","invert","number","y","u","v","q","r","m","n","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","tonelliFast","Fp","root","eql","sqr","Q1div2","tonelliSlow","neg","ONE","g","mul","ZERO","t2","ge","FpSqrt","sqrt3mod4","c1","sqrt5mod8","n2","nv","i","sub","isNegativeLE","FIELD_FIELDS","validateField","field","initial","ORDER","MASK","BYTES","BITS","opts","reduce","map","val","FpPow","f","p","d","FpInvertBatch","nums","tmp","Array","length","lastMultiplied","acc","is0","inverted","inv","reduceRight","FpDiv","lhs","rhs","FpIsSquare","legendreConst","nLength","nBitLength","_nBitLength","undefined","toString","nByteLength","Math","ceil","Field","bitLen","isLE","redef","sqrtP","Object","freeze","create","isValid","isOdd","add","div","sqrN","addN","subN","mulN","sqrt","invertBatch","lst","cmov","c","toBytes","fromBytes","bytes","FpSqrtOdd","elm","FpSqrtEven","hashToPrivateScalar","hash","groupOrder","hashLen","minLen"],"sources":["/home/rupam/Desktop/Faucet-React/node_modules/@noble/curves/src/abstract/modular.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n"]},"metadata":{},"sourceType":"script"}